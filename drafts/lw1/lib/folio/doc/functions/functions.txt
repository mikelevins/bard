
COMPOSE (fn &rest fns) => new-fn
  function

  COMPOSE returns a new function that accepts a single argument. The
  new function applies the last element of FNS to its argument, then
  applies the next-to-last element to the return value of that first
  application, and so on until, finally, it applies FN to the value
  returned by the first element of FNS. The function returned by
  COMPOSE returns the value returned by FN.

  If FNS is empty, COMPOSE returns FN.

  EXAMPLE: 
    (compose 'upcase 'trim-whitespace 'to-string)
    (compose 'sort-items 'remove-invalid-items 'collect-items)

CONJOIN (&rest preds) => new-fn
  function

  CONJOIN accepts any number of predicate functions as inputs, and
  returns a new predicate function that accepts any number of
  arguments. Each input predicate may accept any number of arguments.

  The new function returned by CONJOIN applies each input predicate,
  from left to right, to its arguments. If any predicate returns a
  false value, the function returns that value without applying any
  further predicates to its inputs. If all predicates return true
  values then the function returns the value returned by the last
  predicate.

DISJOIN (&rest preds) => new-fn
  function

  DISJOIN accepts any number of predicate functions as inputs, and
  returns a new predicate function that accepts any number of
  arguments. Each input predicate may accept any number of arguments.

  The new function returned by DISJOIN applies each input predicate,
  from left to right, to its arguments. If any predicate returns a
  true value, the function returns that value without applying any
  further predicates to its inputs. If all predicates return false
  values then the function returns the value returned by the last
  predicate.

FLIP (f) => new-fn
  function

  FLIP accepts a function of two arguments as its input, and returns a
  function of two arguments. The function returned by FLIP calls its
  input function with its arguments reversed. In other words, if a
  function f should be called (f x y), then g, equal to (flip f),
  should be called (g y x).

  FLIP is handy for cases in which you want to use PARTIAL to create a
  partially-applied function, but where the input function's arguments
  are not accepted in a convenient order.

  EXAMPLE: 
    (defvar $type-recognizers
            (mapcar (partial (flip typep))
                    $typenames))
    

PARTIAL (f &rest args) => new-function
  function

  PARTIAL accepts a function and some argument expressions, and
  returns a new function. The new function is a curried form, or
  partial application, of the input function, that has already
  accepted the argument values supplied. The new function can be
  applied to the remaining required values to obtain the output of the
  original input function.

  A common use of partial is to create a local function for which some
  inputs are constant. In this relatively common case, you can
  dynamically compute the unchanging arguments and build them into a
  function using PARTIAL, and then, for instance, map the resulting
  function over a collection of input values.

  EXAMPLE:
    (defvar $add-two (partial '+ 2))
    (funcall $add-two 1) => 3

ROTATE-LEFT (f) => new-function
  function

  ROTATE-LEFT accepts an input function and returns a new function
  that behaves exactly the same as the input function, but with the
  order of arguments changed.

  The function returned by ROTATE-LEFT behaves as if the input
  arguments to F have been "rotated" one place to the left: the first
  argument becomes the last, the second becomes the first, and so on.

  Suppose the function f accepts the following arguments:
    (f a b c d)

  The expression (rotate-left f) returns a function we can call g,
  which accepts the same arguments, but in the following order:
    (g b c d a)

  The inputs to f have been "rotated" one place to the left, and a
  has been moved into the empty spot left by d when it moved left.

  Like FLIP, ROTATE-LEFT is useful for constructing functions using
  PARTIAL when the input function accepts arguments in an inconvenient
  order.

ROTATE-RIGHT (f) => new-function
  function

  ROTATE-RIGHT accepts an input function and returns a new function
  that behaves exactly the same as the input function, but with the
  order of arguments changed.

  The function returned by ROTATE-RIGHT behaves as if the input
  arguments to F have been "rotated" one place to the right: the last
  argument becomes the first, the first becomes the second, and so on.

  Suppose the function f accepts the following arguments:
    (f a b c d)

  The expression (rotate-right f) returns a function we can call g,
  which accepts the same arguments, but in the following order:
    (g d a b c)

  The inputs to f have been "rotated" one place to the right, and d
  has been moved into the empty spot left by when it moved right.

  Like FLIP, ROTATE-RIGHT is useful for constructing functions using
  PARTIAL when the input function accepts arguments in an inconvenient
  order.
