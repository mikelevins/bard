;;;; ***********************************************************************
;;;; FILE IDENTIFICATION
;;;;
;;;; Name:          compile.bard
;;;; Project:       Bard
;;;; Purpose:       bard compiler in bard
;;;; Author:        mikel evins
;;;; Copyright:     2013 by mikel evins
;;;;
;;;; ***********************************************************************

;;; ---------------------------------------------------------------------
;;; environments
;;; ---------------------------------------------------------------------

(define variable $null-env [])

(define variable *environment* $null-env)

(define macro (with-environment e & body)
  (let ((var (gensym)))
    `(let ((,var *environment*))
       (ensure (set! *environment* ,e)
               (begin ,@body)
               (set! *environment* ,var)))))

;;; ---------------------------------------------------------------------
;;; modules
;;; ---------------------------------------------------------------------

(define variable *modules* {})

(define record <module> name environment)

(define method (find-module mname)
  with: ((mname <symbol>))
  (get *modules* mname))

(define method (define-module mname)
  with: ((mname <symbol>))
  (let ((mod (make <module> name: mname environment: $null-env)))
    (set! *modules* 
          (put *modules* mname mod))))

(define-module 'bard.base)

(define variable *module* (find-module 'bard.base))

(define macro (with-module m & body)
  (let ((var (gensym)))
    `(let ((,var *module*))
       (ensure (set! *module* ,m)
               (begin ,@body)
               (set! *module* ,var)))))


;;; ---------------------------------------------------------------------
;;; self-evaluating
;;; ---------------------------------------------------------------------

(define method (compile expr)
  with: ((expr <undefined>))
  expr)

(define method (compile expr)
  with: ((expr <null>))
  expr)

(define method (compile expr)
  with: ((expr <boolean>))
  expr)

(define method (compile expr)
  with: ((expr <keyword>))
  expr)

(define method (compile expr)
  with: ((expr <flonum>))
  expr)

(define method (compile expr)
  with: ((expr <ratnum>))
  expr)

(define method (compile expr)
  with: ((expr <fixnum>))
  expr)

(define method (compile expr)
  with: ((expr <bignum>))
  expr)

(define method (compile expr)
  with: ((expr <string>))
  expr)

;;; ---------------------------------------------------------------------
;;; variables
;;; ---------------------------------------------------------------------

(define record <var> name val mutable?)

(define method (find-var var frame)
  (position-if (^ (v)(= var (get v 'name)))
               frame))

(define method (in-env? var env)
  (let ((j nothing)
        (i (position-if (^ (fr)
                           (let ((found (find-var var fr)))
                             (if (something? found)
                                 (begin
                                  (set! j found)
                                  true)
                                 false)))
                        env)))
    (values i j)))

(define method (compile-variable-reference expr env module)
  (let ((i j (in-env? expr env)))
    (if i
        ['LREF i j]
        (let ((i j (in-env? expr (get module 'environment))))
          (if i
              ['MREF i j]
              (error (append "Undefined variable: " (as <string> expr))))))))

(define method (compile expr)
  with: ((expr <symbol>))
  (compile-variable-reference expr *environment* *module*))

;;; ---------------------------------------------------------------------
;;; applications
;;; ---------------------------------------------------------------------

(define method (compile-application op-expr args-expr env module)
  (let ((op (with-module module
              (with-environment env
                (compile op-expr))))
        (args (with-module module
                (with-environment env
                  (map compile args-expr)))))
    (compile-funcall op args env module)))

(define method (compile expr)
  with: ((expr <pair>))
  (compile-application (first expr) (rest expr) *environment* *module*))


