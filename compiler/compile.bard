;;;; ***********************************************************************
;;;; FILE IDENTIFICATION
;;;;
;;;; Name:          compile.bard
;;;; Project:       Bard
;;;; Purpose:       bard compiler in bard
;;;; Author:        mikel evins
;;;; Copyright:     2013 by mikel evins
;;;;
;;;; ***********************************************************************

;;; ---------------------------------------------------------------------
;;; compiler state variables
;;; ---------------------------------------------------------------------

(define variable $null-env [])

(define variable *environment* $null-env)
(define variable *module* $null-env)

;;; ---------------------------------------------------------------------
;;; self-evaluating
;;; ---------------------------------------------------------------------

(define method (compile expr env module)
  with: ((expr <undefined>))
  expr)

(define method (compile expr env module)
  with: ((expr <null>))
  expr)

(define method (compile expr env module)
  with: ((expr <boolean>))
  expr)

(define method (compile expr env module)
  with: ((expr <keyword>))
  expr)

(define method (compile expr env module)
  with: ((expr <flonum>))
  expr)

(define method (compile expr env module)
  with: ((expr <ratnum>))
  expr)

(define method (compile expr env module)
  with: ((expr <fixnum>))
  expr)

(define method (compile expr env module)
  with: ((expr <bignum>))
  expr)

(define method (compile expr env module)
  with: ((expr <string>))
  expr)

;;; ---------------------------------------------------------------------
;;; variables
;;; ---------------------------------------------------------------------

(define record <var> name val mutable?)

(define method (find-var var frame)
  (let ((len (length frame)))
    (loop search ((i 0))
          (if (< i len)
              (if (= var (get (element frame i) 'name))
                  i
                  (search (+ i 1)))
              nothing))))

(define method (find-var var frame)
  (position-if (^ (v)(= var (get v 'name)))
               frame))

(define method (in-env? var env)
  (let ((j nothing)
        (i (position-if (^ (fr)
                           (let ((found (find-var var fr)))
                             (if (something? found)
                                 (begin
                                  (set! j found)
                                  true)
                                 false)))
                        env)))
    (values i j)))

(define method (compile-variable-reference expr env module)
  (let ((i j (in-env? expr env)))
    (if i
        ['LREF i j]
        (let ((i j (in-env? expr module)))
          (if i
              ['MREF i j]
              (error (append "Undefined variable: " (as <string> expr))))))))

(define method (compile expr env module)
  with: ((expr <symbol>))
  (compile-variable-reference expr env module))

;;; ---------------------------------------------------------------------
;;; applications
;;; ---------------------------------------------------------------------

(define method (compile expr env module)
  with: ((expr <pair>))
  (compile-application expr env module))

