(define method (read-names path)
  with: ((path <string>))
  (with-open-file (in path)
    (lines in)))

(define method (triples name)
  with: ((name <string>))
  (take-by 3 1 name))

(define method (valid-name-part? p) false)
(define method (valid-name-part? p)
  with: ((p <string>))
  (> (length p) 1))

(define method (filter-name-parts name)
  (filter valid-name-part? name))

(define method (filter-names names)
  (filter something? (map filter-name-parts names)))

(define method (parse-names names)
  with: ((names <pair>))
  (let ((starts parts (partition first rest (filter-names (map triples names)))))
    (values starts (reduce append [] parts))))

(define method (match? s1 s2)
  with: ((s1 <string>)
         (s2 <string>))
  (and (= (next-last s1)(first s2))
       (= (last s1)(second s2))))

(define method (end-segment? s) true)
(define method (end-segment? s) 
  with: ((s <string>))
  (< (length s) 3))

(define method (next-segment partial-name name-parts)
  with: ((partial-name <pair>)
         (name-parts <pair>))
  (any (filter (partial match? (last partial-name))
               name-parts)))

(define method (merge-segments left right) "")
(define method (merge-segments left right)
  with: ((left <string>)
         (right <string>))
  (cond
   ((empty? left) right)
   ((empty? right) left)
   ((< (length right) 3) left)
   (else (append left (drop 2 right)))))

(define method (build-name name-starts name-parts)
  (loop build ((name [(any name-starts)]))
        (let ((segment (next-segment name name-parts)))
          (if (end-segment? segment)
              (reduce merge-segments "" (add-last name segment))
              (build (add-last name segment))))))

(define method (name-builder starts parts)
  (generate ()
    (yield (build-name starts parts))
    (resume)))

(define method (names path number)
  with: ((path <string>)(number <fixnum>))
  (let ((starts parts (parse-names (read-names path)))
        (names (name-builder starts parts)))
    (take number names)))

;;; (names "/Users/mikel/Workshop/bard/examples/namefiles/us.names" 10)
;;; (names "/Users/mikel/Workshop/bard/examples/namefiles/gnome.names" 10)
