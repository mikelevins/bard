(module xg.namer
        (uses: bard.lang)
        (from: bard.io
               (import: read-lines)))

(in-module xg.namer)

;;; ------------------------------------------------------------
;;; parameters
;;; ------------------------------------------------------------

(define $maximum-name-length 128)

;;; ------------------------------------------------------------
;;; building names
;;; ------------------------------------------------------------

(define-method build-name ((trips <Sequence>) &optional acc)
  (cond
   ((>= (length acc) $maximum-name-length) acc)
   ((is-end-triple? (last acc)) acc)
   (else: (let ((next (choose-next-triple trips (last acc))))
            (build-name trips (append acc next))))))

(define-method assemble ((trips <Sequence>))
  (apply cancat (unbookend (foldl merge-connecting-triples trips))))

(define-method get-name ((trips <Sequence>))
  (assemble (build-name trips)))

(define-method get-names ((trips <Sequence>)(count <Integer>)
                          &optional acc)
  (if (<= count 0)
      acc
      (get-names trips
                 (- count 1)
                 (append acc (get-name trips)))))

(define-method collect-names ((trips <Sequence>)(count <Integer>)
                              &optional acc)
  (if (>= (length trips) count)
      acc
      (unique (concat acc (get-names trips count)))))

;;; ------------------------------------------------------------
;;; output
;;; ------------------------------------------------------------

(define-method print-list ((s == [])) void)

(define-method print-list ((s <Sequence>))
  (print-line (first s))
  (print-list (rest s)))

;;; ------------------------------------------------------------
;;; main program
;;; ------------------------------------------------------------

(define-method read-triples ((f <File>))
  (let ((lines (read-lines f))
        (filtered-lines (remove-comments lines))
        (exploded-lines (map (compose (partial bookend "" "") explode)
                             filtered-lines)))
    (apply concat
           (map triples exploded-lines))))

(define-method main (& args)
  (let ((namefile (args 0))
        (count (args 1))
        (trips (read-triples namefile))
        (names (collect-names trips count)))
    (print-list (sort names))))

