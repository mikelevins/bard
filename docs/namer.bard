
(in bard.examples.Namer)

(define method (read-samples path)
  where: {path: <uri>}
  (filter (complement empty?)
          (all (tap lines: path))))

(define method (extend-name start parts ends & {chunk-size: 3 end-preference: 0.45})
  where: {start: <string>
	  parts: <vector>
	  ends: <vector>}
  (bind ([prefix (leave (1- chunk-size) start)]
	 [matcher (cut prefix-match? prefix _)]
	 [trimmer (cut subseq _ (1- chunk-size))]
	 [matching-parts (filter matcher parts)]
	 [matching-ends (filter matcher ends)])
    (if (and matching-ends
	     (< (random 1.0) end-preference))
	(cat start (trimmer (any matching-ends)))
	(if matching-parts
	    (extend-name (cat start (trimmer (any matching-parts)))
                         parts ends)
	    ;; we found no matches, so just return the start
	    start))))

(define method (generate-name starts parts ends & {chunk-size: 3})
  where: {starts: <vector>
	  parts: <vector>
	  ends: <vector>}
  (extend-name (any starts)
	       parts
	       ends
	       chunk-size: chunk-size))

(define method (generate-names samples count & {chunk-size: 3})
  where: {samples: <vector>
	  count: <small-integer>}
  (bind ([chunked-samples (mapover (cut take-by 3 1 _)
				   samples)]
	 [starts (mapover first chunked-samples)]
	 [parts (reduce append (mapover (compose drop-first drop-last)
					chunked-samples))]
	 [ends (mapover last chunked-samples)])
    (collect count (generate-name starts parts ends chunk-size: chunk-size))))

