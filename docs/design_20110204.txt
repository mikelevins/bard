Bard Design
February 4, 2011

1. Concepts

   Bard's organizing concepts are representation, behavior, and
   taxonomy.

   Representation
   --------------

   Representation consists of types, both built-in and user-defined,
   which define how to lay out data in memory. Bard provides a small
   but flexible set of built-in types, and a few mechanisms for
   defining user-defined types.

   Behavior
   --------

   Behavior consists of special forms, protocols, functions, methods,
   and macros.

   A special form is an operator that is built into the Bard
   language. Each special form may have its own distinct evaluation
   strategy. The number of special forms is small.

   A protocol is a formal description of a set of functions and the
   abstract types of its parameters.

   A function is a value that can occupy the operator position in an
   expression. Bard functions are polymorphic: the actual evaluation
   strategy depends upon the domain of the function and the properties
   of the parameters.

   A method is a non-polymorphic operator. In other words, a method is
   a primitive function. When a function chooses its evaluation
   strategy, the code that ultimately computes the output values is a
   method.

   A macro is an operator that rewrites the expression before
   evaluating it. The rewriting is called "macroexpansion". When a
   macro is called, it macroexpands the expression and calls the
   result. If the result's operator is another macro, another
   macroexpansion takes place, and so on, until the result's operator
   is no longer a macro.

   Taxonomy
   --------

   Taxonomy consists of descriptions of supertype/subtype
   relationships, and how they influence the selection of methods when
   functions are applied. The two central concepts in Bard taxonomy
   are domains and categories.

   A category is an abstract type that is defined as a collection of
   concrete types. You might, for example, create a category named
   Number, whose members are <small-integer>, <big-integer>, and
   perhaps some other numeric types.

   A domain is an object that describes how functions choose
   methods. As an example, Bard's default domain describes a system of
   categories and types organized into a directed acyclic graph of
   supertypes and subtypes. If you call a function that is defined on,
   say Number, and the input parameter is <small-integer>, the default
   domain tells Bard to use the Number method to compute the results.

   In Bard, defining a type (a representation) is separate from
   defining where it fits into a domain.
   
2. Basic built-in types

  Top and Bottom
    <anything>
      All values are instances of <anything>, by definition.
    <nothing>
      A single instance: nothing

  Booleans
    <true>
      A single instance: true
    <false>
      A single instance: false

  Numbers
    <small-integer>
      An integer type of finite storage size, chosen to be a
      convenient size for the host platform
    <big-integer>
      An integer type of arbitrary size. A <big-integer>
      implementation may require memory to be dynamically allocated
      for its representation.
    <single-float>
    <double-float>
    <ratio>
      Consisting of a numerator and a denominator, each of which may
      be either a <small-integer> or a <big-integer>.

  Sequences and Maps
    Bitvectors
    Bytevectors
    Text
    Object vectors

  Domains, Types, and Categories
    Domains
    Types
    Categories

  Protocols
    Built-on Protocols
    User-defined protocols

  Functions, Methods, and Macros
    Functions
      Generic functions
      Maps as functions
      Sequences as functions
      User-defined functions

    Methods

    Macros
