registers = (instr code pc nvals fn env globals vals stack halt)

extern = (%apply-prim %args %catenv %ccref %false? %fn-code 
          %fn-env %gref %gset! %lref %lset! %make-saved %makecc
          %pushvals %ret-code %ret-fn %ret-pc %ret-stack %setreg!
          %top %true?)

(HALT)
  halt <- #t  

(CONST k)
  vals <- (cons k vals)
  nvals <- (+ nvals 1)

(LREF i j)
  vals <- (cons (%lref env i j) vals)
  nvals <- (+ nvals 1)

(LSET i j)
  (%lset! env i j (%top stack))
  vals <- (cdr vals)
  nvals <- (- nvals 1)

(GREF g)
  vals <- (cons (%gref globals i j) vals)
  nvals <- (+ nvals 1)

(GSET g)
  (%gset! globals g (%top vals))
  vals <- (cdr vals)
  nvals <- (- nvals 1)

(POPV)
  vals <- (cdr vals)
  nvals <- (- nvals 1)

(POPC)
  stack <- (cdr stack)

(PRIM p)
  temp = (%apply-prim p registers)
  vals <- (%pushvals (get temp 'vals) vals)
  nvals <- (get temp 'nvals)

(JUMP d)
  pc <- d

(FJUMP d)
  pc <- (if (%false? (%top vals) d pc))
  vals <- (cdr vals)

(TJUMP d)
  pc <- (if (%true? (%top vals) d pc))
  vals <- (cdr vals)

(SAVE d)
  stack <- (cons (%setreg! (%make-saved registers) pc d) stack)

(CALL n)
  function = (%top vals)
  args = (%args n vals)
  fn    <- function
  code  <- (%fn-code function)
  pc    <- 0
  env   <- (%catenv env (%fn-env function) args)
  vals <- (drop (+ n 1) vals)

(RETURN)
  ret = (%top stack)
  fn    <- (%ret-fn ret)
  code  <- (%fn-code fn)
  pc    <- (%ret-pc ret)
  env   <- (%ret-env ret)
  stack <- (%ret-stack ret)

(CC)
  vals <- (cons (%makecc registers) vals)

(SETCC)
  cc = (%top vals)
  instr   <- (%ccref cc instr)
  code    <- (%ccref cc code)
  pc      <- (%ccref cc pc)
  nvals   <- (%ccref cc nvals)
  fn      <- (%ccref cc fn)
  env     <- (%ccref cc env)
  globals <- (%ccref cc globals)
  vals    <- (%ccref cc vals)
  stack   <- (%ccref cc stack)
  halt    <- (%ccref cc halt)




