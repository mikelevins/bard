;;; bard implementation of mikel's namer

;;; (load "/Volumes/ymra/Users/mikel/Desktop/Bard/dists/Bard_0.2.0/namer.bard")
;;; (time (read-names "/Volumes/ymra/Users/mikel/Desktop/Bard/dists/Bard_0.2.0/us.names"))

(define $name-starts nothing)
(define $name-parts nothing)

(define-function (triples (x <string>))
    (if (< (length x) 3)
        (list x)
        (add-first (take 3 x)
                   (triples (drop 1 x)))))

(define-function (read-names path)
    (let ((lines (with-open-file (in path)
                   (read-lines in)))
          (triples-list (map triples lines)))
      (set! $name-starts (map first triples-list))
      (set! $name-parts (reduce append nothing (filter something? (map rest triples-list))))
      path))

(define-function (choose-name-start)(any $name-starts))

(define-function (choose-name-next part)
    (let ((c1 (element part (- (length part) 2)))
          (c2 (element part (- (length part) 1)))
          (candidates (filter (method (p)(= (element p 0) c1))
                              $name-parts))
          (picks (filter (method (p)(= (element p 1) c2))
                         candidates)))
      (if (something? picks)
          (any picks)
          nothing)))

(define-function (part-finder)
  (let ((start (choose-name-start))
        (gen (generate ((nm start))
                        (yield nm)
                        (then (choose-name-next nm)))))
    gen))

(define-function (build-name)
    (let ((finder (part-finder))
          (name [])
          (last-part nothing))
      (with-exit (return)
        (repeat
         (let ((next-part (next finder)))
           (if (or (nothing? next-part)
                   (< (length next-part) 3)
                   (= next-part last-part))
               (return (if (something? name)
                           (reduce (method (x y)(add-last x (last y))) 
                                   (first name)
                                   (rest name))
                           name))
               (begin
                (set! name (add-last name next-part))
                (set! last-part next-part))))))))

