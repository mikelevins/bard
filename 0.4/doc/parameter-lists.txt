I. methods

(method () ...)
  method takes no arguments

(method (& args) ...)
  method takes any number of arguments, none required

(method (a b) ...)
  method takes 2 arguments, both required

(method (a b & more) ...)
  method takes any number of arguments, two required

(method (a b & {c: 1 d: nothing}) ...)
  method requires two arguments, and accepts two keyword arguments

II. functions

(-> ->)
  function takes no arguments and returns no values
(-> & -> &)
  function takes any number of arguments and returns any number of values

(-> -> Anything)
  function takes no arguments and returns one value of any type

(-> Anything Anything -> Anything)
  function takes two arguments of any type and returns one value of any type

(-> Integer Integer -> Integer Integer)
  function takes two arguments of type Integer and returns two values of type Integer

(-> Integer Integer & -> Integer Integer &)
  function takes at least two arguments of type Integer and returns at least two values of type Integer
  extra inputs and outputs can be of any type

III. adding and defining methods on functions

(define method (foo)
  ...)

  method takes no arguments

(define method (foo a b)
  ...)

  method takes two arguments of any type

(define method (foo a b)
  where ((a <fixnum>)
         (b List))
  ...)

  method takes two arguments, with a an instance of <fixnum> and b an
  instance of List.

(define method (foo a b)
  where ((a <fixnum>)
         (b (exactly 5)))
  ...)

  method takes two arguments, with a an instance of <fixnum> and b
  exactly equal to 5.

(define method (foo a b)
  where ((a <fixnum>)
         (b (satisfies (^ (x)
                        (or (symbol? x)
                            (text? x)))))
  ...)

  method takes two arguments, with a an instance of <fixnum> and b
  satisfying the supplied predicate.

define method is a macro. here's what it expands to in a few representative cases:  

(define method (foo)
  ...)

(add-method! foo [] (method () ...))

(define method (foo a b)
  ...)

(add-method! foo [ (isa Anything) (isa Anything)]
  (method (a b) ...))

(define method (foo a b)
  where ((a <fixnum>)
         (b (exactly 5)))
  ...)

(add-method! foo [ (isa <fixnum>)
                   (exactly 5) ]
  (method (a b) ...))


(define method (foo a b)
  where ((a <fixnum>)
         (b (satisfies (^ (x)
                        (or (symbol? x)
                            (text? x)))))
  ...)


(add-method! foo [ (isa <fixnum>)
                   (satisfies (^ (x)
                                (or (symbol? x)
                                    (text? x)))) ]
  (method (a b) ...))



