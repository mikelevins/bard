;;;; ***********************************************************************
;;;; FILE IDENTIFICATION
;;;;
;;;; Name:          compiler.bard
;;;; Project:       Bard
;;;; Purpose:       the bard compiler in bard
;;;; Author:        mikel evins
;;;; Copyright:     2013 by mikel evins
;;;;
;;;; ***********************************************************************

(define method (comp-const x val? more?)
  )

(define method (comp-var x env val? more?)
  )

(define method (arg-count x 1)
  )

(define method (comp-begin exprs env val? more?)
  )

(define method (assert test msg)
  )

(define method (gen-set! var env)
  )

(define method (gen op & args) 
  )

(define method (comp-if test-form then-form else-form env val? more?)
  )

(define method (comp-method params body env)
  )

(define method (seq & exprs)
  )

(define method (comp-funcall op args env val? more?)
  )

(define method (comp x env val? more?)
  (cond
   ((= x true) (comp-const x val? more?))
   ((= x false) (comp-const x val? more?))
   ((= x nothing) (comp-const x val? more?))
   ((symbol? x) (comp-var x env val? more?))
   ((atom? x) (comp-const x val? more?))
   (else: (let ((op (first x)))
            (cond 
             ;; quote
             ((= 'quote op)
              (arg-count x 1)
              (comp-const (second x) val? more?))
             ;; begin
             ((= 'begin op)
              (comp-begin (rest x) env val? more?))
             ;; set!
             ((= 'set! op)
              (arg-count x 2)
              (assert (symbol? (second x))
                      ["only variables can be arguments to set!; found " (second x) " in " x])
              (seq
               (comp (third x) env true true)
               (gen-set! (second x) env)
               (if (not val?) (gen 'POP))
               (unless more? (gen 'RETURN))))
             ;; if
             ((= 'if op)
              (arg-count x 2 3)
              (comp-if (second x) (third x) (fourth x) env val? more?))
             ;; method
             ((or (= '^ op)
                  (= 'method op))
              (when val?
                    (let ((f (comp-method (second x) (drop 2 x) env)))
                      (seq (gen 'FN f)
                           (unless more?
                                   (gen 'return))))))
             ;; function application
             (else: (comp-funcall (first x) (rest x) env val? more?)))))))
