how to call a function

supose the function we're going to call is defined as

  (^ (a b) (GNADD a b))

The compiled code for this is

0  LREF 'a     ; push the value of the lexical variable a
1  LREF 'b     ; push the value of the lexical variable b
2  PRIM 'GNADD ; execute primitive GNADD
3  ROTATE 1    ; rotate the bottom of the stack to the top
4  CONTINUE    ; pop saved state on the top of the stack and restore the VM to it 

The lexical variables a and b are the function parameters, bound by
the code that calls the function. Before execution of the function
body starts, the calling code also creates a continuation and pushes
it on the stack. This continuation is the return point for the called
function. The end of a function body always consists of the
instruction ROT, which rotates the return continuation to the top of
the stack, followed by CONTINUE, which pops the continuation and uses
it to transfer control (to return from the function).

Now suppose the function is named add and we call it like this:

  (add 2 3)

This compiles to code like this:

0  SAVE L0   ; create a continuation and push it on the stack; it continues after the end of the calling sequence
1  CONST 3   ; push the args from right to left
2  CONST 2   ; 
3  GREF 'add ; push the function
4  SETFN     ; pop the pushed function; set FN to the function, and CODE to its body
5  ARGS      ; pop the argument values and move them to ENV, bound to add's params
6  GO 0      ; transfer control to add's body
L0 ...

We can condense instructions 4, 5, and 6 into a single instruction, APPLY:

0  SAVE L0   ; create a continuation and push it on the stack; it continues after the end of the calling sequence
1  CONST 3   ; push the args from right to left
2  CONST 2   ; 
3  GREF 'add ; push the function
4  APPLY
L0 ...

APPLY does the same thing as the SETFN, ARGS, and GO instructions.

