All Bard values can always be treated as frames. The Frame protocol
defines a set of functions for which default methods are defined on
all values (even values of as-yet-undefined types):

  (get Frame Key) => Anything
  (put Frame Key Anything) => Frame
  (keys Frame) => List

User-defined types extend the use of this pun to treat all types as if
they were specifications for frames. 

  ? (define-schema <point> () x y)

  ? (make <point>)
  {x: undefined y: undefined}

  ? (define-schema <3d-point> (<point>) z)

  ? (make <3d-point>)
  {x: undefined y: undefined z: undefined}

User types may not necessarly be represented internally in the same
way as <frame> values.

It's always possible to use the Frame protocol to add slots to a
frame, and therefore to any value. The result value may not be the
same type as the input, though.

For example:

  ? (put 5 type: 'finger-count)
  {value: 5 type: finger-count}

The output is a <frame>, though the input was a <fixnum>.

Similarly, you can add arbitrary slots to a user-defined type, but if
the added slots don't appear in the type definition then the output is
no longer a member of the type.


