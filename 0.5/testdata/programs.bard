;;; simple program fragments for compiler testing

;;; literals

1
2
3
nothing
undefined
true
false
[]
[2 3 4]

:keyword

{}
{:a 1 :b 2}

"Frob!"

(->  ->)
(-> Integer Integer List -> List)
(-> List -> List Integer)

(method () foo)
(method (x) x)
(method (x y) (foo x y))
(method (x y & more) (reverse more))
(method (x y { :name nothing })
  (pair x name))

;;; variables

x
Foo

;;; setters

(setter x)
(set! x 1)
(set! (first x) 1)

;;; special forms

(begin 1 2 3)
(begin (+ 2 3)(* 2 3))

(if 1 2 3)
(if (> (+ 2 3) 2)
    'yes
    'no)
(quote Frobbozz)

;;; function calls

(pair 'a 'b)

;;; definitions

(define class Foo [] sup (-> Foo -> Anything))

(define class Point2D [] 
  point-x (-> Point2D -> Number)
  point-y (-> Point2D -> Number))

(define class Point3D [Point2D] 
  point-z (-> Point2D -> Number))

(define constant PI 3.14159)
(define variable *fruits* ['apple 'banana 'cherry])

;;; macros and special forms

(let ((x 1))
  x)

(let ((x 2)
      (y (+ x 1)))
  (* x y))

(let ((x y (values 2 3)))
  (* x y))

(with-open (in "~/.emacs" :direction :input)
  (count-lines in))
