(define class Accessor [Procedure]
  accessor? (-> Anything -> Boolean))

(define class Actor [Anything]
  actor? (-> Anything -> Boolean))

(define class Bard [Actor]
  bard? (-> Anything -> Boolean))

(define class Anything []
  as (-> Type Anything -> Anything)
  make (-> Type {} -> Anything)
  something? (-> Anything -> Boolean))

(define class Array [Collection]
  array? (-> Anything -> Boolean))

(define class Atom [Anything]
  atom? (-> Anything -> Boolean))

(define class Boolean [Atom]
  boolean? (-> Anything -> Boolean))

(define class Character [Atom]
  character? (-> Anything -> Boolean))

(define class Class [Mutable Type]
  class? (-> Anything -> Boolean))

(define class Collection [Anything]
  any (-> Collection -> Anything)
  collection? (-> Anything -> Boolean)
  count (-> Collection -> Integer)
  empty? (-> Collection -> Boolean)
  every? (-> Procedure Collection -> Boolean)
  filter (-> Procedure Collection -> Collection)
  find (-> Procedure Collection -> Anything)
  remove (-> Procedure Collection -> Collection))

(define class Complex [Number]
  complex? (-> Anything -> Boolean))

(define class Condition [Atom]
  condition? (-> Anything -> Boolean))

(define class EndOfFile [Name]
  eof? (-> Anything -> Boolean))

(define class Float [Real]
  float? (-> Anything -> Boolean))

(define class Function [Procedure]
  function? (-> Anything -> Boolean))

(define class Gatherer [Stream]
  gatherer? (-> Anything -> Boolean))

(define class Generator [Stream]
  choose (-> Procedure Generator -> Generator)
  collect (-> Generator -> List)
  collect-map (-> Procedure Generator -> List)
  elements (-> Stream -> Generator)
  generator? (-> Anything -> Boolean)
  range-from (-> Integer {} -> Generator)
  repeat (-> Anything -> Generator)
  scan (-> List -> Generator)
  scan-map (-> Procedure List -> Generator))

(define class Getter [Accessor]
  getter? (-> Anything -> Boolean))

(define class Integer [Rational]
  integer? (-> Anything -> Boolean))

(define class Keyword [Name]
  keyword? (-> Anything -> Boolean))

(define class List [Collection]
  add-first (-> Anything List -> List)
  add-last (-> List Anything -> List)
  append (-> List * -> List)
  by (-> Integer List -> List)
  drop (-> Integer List -> List)
  drop-while (-> Procedure List -> List)
  element (-> Integer List -> Anything)
  first (-> List -> Anything)
  indexes (-> List -> List)
  interleave (-> List List -> List)
  interpose (-> Anything List -> List)
  join (-> List -> List)
  last (-> List -> Anything)
  list (-> Anything * -> List)
  list? (-> Anything -> Boolean)
  map (-> Procedure List * -> List)
  match-prefix? (-> List List -> Boolean)
  partition (-> Procedure List -> List List)
  penult (-> List -> Anything)
  position (-> Procedure List -> (or Integer Nothing))
  range (-> Integer Integer {} -> List)
  reduce (-> Procedure Anything List -> Anything)
  rest (-> List -> List)
  reverse (-> List -> List)
  second (-> List -> Anything)
  some? (-> Procedure List -> Anything)
  sort (-> List Proceduer -> List)
  split (-> Procedure List -> List)
  tails (-> List -> List)
  take (-> Integer List -> List)
  take-by (-> Integer Integer List -> List)
  take-while (-> Procedure List -> List)
  unique (-> List {} -> List)
  unzip (-> List -> List List)
  zip (-> List List -> List))

(define class Macro [Procedure]
  macro? (-> Anything -> Boolean))

(define class Map [Collection]
  contains-key? (-> Map Anything {} -> Boolean)
  contains-value? (-> Map Anything {} -> Boolean)
  get (-> Map Anything {} -> Anything)
  keys (-> Map -> List)
  map? (-> Anything -> Boolean)
  merge (-> Map Map Map * -> Map)
  put (-> Map Anything Anything -> Map)
  remove-key (-> Map Anything -> Map)
  vals (-> Map -> List))

(define class Method [Procedure]
  method? (-> Anything -> Boolean))

(define class Mutable [Anything]
  mutable? (-> Anything -> Boolean))

(define class MutableMap [Mutable Map]
  mutable-map? (-> Anything -> Boolean))

(define class Name [Atom]
  name? (-> Anything -> Boolean))

(define class Number [Atom]
  number? (-> Anything -> Boolean))

(define class Ordered [Anything]
  < (-> Ordered Ordered Ordered * -> Boolean)
  <= (-> Ordered Ordered Ordered * -> Boolean)
  > (-> Ordered Ordered Ordered * -> Boolean)
  >= (-> Ordered Ordered Ordered * -> Boolean)
  ordered? (-> Anything -> Boolean))

(define class Pair [List]
  left (-> Pair -> Anything)
  pair (-> Anything Anything -> Pair)
  pair? (-> Anything -> Boolean)
  right (-> Pair -> Anything))

(define class Procedure [Atom]
  applicable? (-> Anything -> Boolean)
  apply (-> Procedure List -> Anything * )
  cascade (@ (arg * ) fn *)
  compose (-> Procedure * -> Procedure)
  conjoin (-> Procedure * -> Procedure)
  disjoin (-> Procedure * -> Procedure)
  flip (-> Procedure -> Procedure)
  partial (-> Procedure Anything * -> Procedure)
  procedure? (-> Anything -> Boolean)
  rotate-left (-> Procedure -> Procedure)
  rotate-right (-> Procedure -> Procedure)
  rpartial (-> Procedure Anything * -> Procedure)
  spread (-> Anything * -> Procedure))

(define class Ratio [Rational]
  ratio? (-> Anything -> Boolean))

(define class Rational [Real]
  rational? (-> Anything -> Boolean))

(define class Real [Number]
  real? (-> Anything -> Boolean))

(define class ResourceName [Name]
  resource-name? (-> Anything -> Boolean))

(define class Set [List]
  adjoin (-> Anything Set -> Set)
  difference (-> Set Set Set * -> Set)
  intersection (-> Set Set Set * -> Set)
  set? (-> Anything -> Boolean)
  union (-> Set Set Set * -> Set))

(define class Setter [Accessor]
  setter? (-> Anything -> Boolean))

(define class Stream [Collection]
  stream? (-> Anything -> Boolean))

(define class Structure [Mutable Type]
  structure? (-> Anything -> Boolean))

(define class Symbol [Name]
  symbol? (-> Anything -> Boolean))

(define class Text [UniformVector]
  text? (-> Anything -> Boolean))

(define class Type [Anything]
  type? (-> Anything -> Boolean))

(define class Undefined [Anything]
  undefined? (-> Anything -> Boolean))

(define class UniformVector [Vector]
  uniform-vector? (-> Anything -> Boolean))

(define class Vector [Array List]
  vector? (-> Anything -> Boolean))

(define class Word [Integer]
  word? (-> Anything -> Boolean))

