;;; Note well:
;;; these definitions are not intended to show how the built-in
;;; Bard structures are actually implemented; their purpose
;;; is to document their logical structure, including their
;;; standard accessors 

(define record <actor> resource-name)

(define record <alist-table> entries)

(define record <bard> globals)

(define record <bignum>)

(define record <bit>)

(define tuple <bitvector> 
  :minimum-count 0 :maximum-count nothing :type <bit>)

(define record <class> name protocol direct-superclasses)

(define record <cons> car cdr)

(define record <double-float>)

(define record <eof>)

(define record <false>)

(define record <fixnum>)

(define record <function> defined-methods)

(define record <getter>)

(define record <hash-table>)

(define record <long-float>)

(define record <macro> name)

(define record <method>)

(define record <nothing>)

(define record <package> name exports symbols)

(define record <random-state>)

(define record <readtable>)

(define record <restart>)

(define record <setter>)

(define record <short-float>)

(define record <signed-byte> sign)

(define record <single-float>)

(define record <singleton> value)

(define tuple <string> 
  :minimum-count 0 :maximum-count nothing :type <character>)

(define record <structure> name slot-descriptions)

(define record <true>)

(define record <undefined>)

(define record <unsigned-byte>)

(define record <url> 
  scheme host port path query)

(define record <vector>
  :minimum-count 0 :maximum-count nothing :type Anything)

(define record <wordvector>
  word-size
  (data :type (tuple :minimum-count 0 :maximum-count nothing :type Word)))


