InliningTest.setCar1(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar2(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar3(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar4(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar5(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar6(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar7(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar8(gnu.lists.Pair,java.lang.Object)void: 6 bytes
InliningTest.setCar9(java.lang.Object,java.lang.Object)void: 14 bytes
InliningTest.getCar1(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar2(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar3(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar4(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar5(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar6(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar7(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar8(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getCar9(java.lang.Object)java.lang.Object: 13 bytes
InliningTest.getCar10(java.lang.Object)java.lang.Object: 13 bytes
InliningTest.getCar11(gnu.lists.Pair)java.lang.Object: 5 bytes
InliningTest.getHome1()java.lang.String: 4 bytes
InliningTest.getHome2()java.lang.String: 4 bytes
InliningTest.getHome3()java.lang.String: 4 bytes
InliningTest.getHome4()java.lang.String: 4 bytes
InliningTest.getHome5()java.lang.String: 4 bytes
InliningTest.getHome6()java.lang.String: 4 bytes
InliningTest.getHome7()java.lang.String: 4 bytes
InliningTest.getHome8()java.lang.String: 4 bytes
InliningTest.setHome1(java.lang.String)void: 5 bytes
InliningTest.setHome2(java.lang.String)void: 5 bytes
InliningTest.setHome3(java.lang.String)void: 5 bytes
InliningTest.setHome4(java.lang.String)void: 5 bytes
InliningTest.setHome5(java.lang.String)void: 5 bytes
InliningTest.setHome6(java.lang.String)void: 5 bytes
InliningTest.setHome7(java.lang.String)void: 5 bytes
InliningTest.setHome8(java.lang.String)void: 5 bytes
InliningTest.isPair1(java.lang.Object)boolean: 5 bytes
InliningTest.isPair2(java.lang.Object)boolean: 5 bytes
InliningTest.isPair3(java.lang.Object)boolean: 5 bytes
InliningTest.isPair4(java.lang.Object)boolean: 5 bytes
InliningTest.isPair5(java.lang.Object)boolean: 5 bytes
InliningTest.isPair6(java.lang.Object)boolean: 5 bytes
InliningTest.isPair7(java.lang.Object)boolean: 5 bytes
InliningTest.isPair9(java.lang.Object)boolean: 5 bytes
InliningTest.isPair10(java.lang.Object)boolean: 5 bytes
InliningTest.isPair11(java.lang.Object)boolean: 5 bytes
InliningTest.isPair12(java.lang.Object)boolean: 5 bytes
InliningTest.isPair13(java.lang.Object)boolean: 5 bytes
InliningTest.isPair14(java.lang.Object)boolean: 5 bytes
InliningTest.isPair15(java.lang.Object)boolean: 5 bytes
InliningTest.isPair16(java.lang.Object)boolean: 5 bytes
InliningTest.isEmpty1(gnu.lists.Pair)boolean: 5 bytes
InliningTest.castToPair1(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair2(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair3(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair4(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair5(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair6(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair7(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair9(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair10(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair11(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.castToPair12(java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair1(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair2(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair3(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair4(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair5(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair6(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair7(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair9(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair10(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair11(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.newPair12(java.lang.Object,java.lang.Object)gnu.lists.Pair: 10 bytes
InliningTest.tohex1(java.lang.Object)java.lang.Object: 5 bytes
InliningTest.tohex2(Int)java.lang.Object: 5 bytes
InliningTest.tohex3(Int)java.lang.Object: 5 bytes
InliningTest.makeIarr1(int)int[]: 4 bytes
InliningTest.makeIarr2(int)int[]: 4 bytes
InliningTest.makeIarr3(int)int[]: 18 bytes
InliningTest.lengthIarr1(int[])int: 3 bytes
InliningTest.lengthIarr2(int[])int: 3 bytes
InliningTest.lengthIarr3(int[])int: 3 bytes
InliningTest.getIarr1(int[],int)int: 4 bytes
InliningTest.setIarr1(int[],int,int)void: 5 bytes
InliningTest.varargs1()java.lang.reflect.Method: 25 bytes
InliningTest.varargs2(java.lang.Class[])java.lang.reflect.Method: 10 bytes
InliningTest.varargs3(java.lang.Object)java.lang.reflect.Method: 35 bytes
InliningTest.factoriali1(int)int: 18 bytes
InliningTest.factoriali2(int)int: 18 bytes
InliningTest.factoriall1(long)long: 19 bytes
InliningTest.plusLambda1()int: 3 bytes
InliningTest.firstNegative(double[])double: 32 bytes
InliningTest.inlineTwoCalls(int)int: 26 bytes
InliningTest.inlineTwoFunctions(java.lang.Object)gnu.bytecode.Type$NeverReturns: 23 bytes
InliningTest.checkEven(int)boolean: 29 bytes
InliningTest.checkEvenUnspecReturn(int)java.lang.Object: 33 bytes
InliningTest.constantPropagation1()int: 3 bytes
InliningTest.constantPropagation2()int: 3 bytes
InliningTest.constantPropagation3()int: 6 bytes
InliningTest.factorialInfer1(int)java.lang.Object: 25 bytes
InliningTest.getFromVector1(gnu.lists.FVector,int)java.lang.Integer: 9 bytes
InliningTest.getFromVector2(gnu.lists.FVector,int)java.lang.Integer: 9 bytes
InliningTest.read1(gnu.kawa.io.InPort)int: 71 bytes
InliningTest.stringForEach1(java.lang.CharSequence)void: 51 bytes
InliningTest.stringForEach2(java.lang.CharSequence)void: 42 bytes
InliningTest.stringForEach3(java.lang.CharSequence)void: 49 bytes
InliningTest.stringForEach4(java.lang.CharSequence,int,int)void: 38 bytes
InliningTest.stringForEach5(java.lang.CharSequence,int,int)void: 52 bytes
InliningTest.stringForEach6(java.lang.CharSequence)void: 144 bytes
InliningTest.stringAppend1(gnu.lists.FString,char)gnu.lists.FString: 6 bytes
InliningTest.stringAppend2(gnu.lists.FString,int)gnu.lists.FString: 6 bytes
InliningTest.stringAppend3(gnu.lists.FString,gnu.lists.FString)gnu.lists.FString: 6 bytes
InliningTest.stringAppend4(gnu.lists.FString,gnu.text.Char)gnu.lists.FString: 9 bytes
InliningTest.stringAppend5(gnu.lists.FString,java.lang.Character)gnu.lists.FString: 9 bytes
InliningTest.stringAppend6(gnu.lists.FString,java.lang.Object)gnu.lists.FString: 6 bytes
InliningTest.stringAppend7(gnu.lists.FString,java.lang.Object,int)void: 13 bytes
InliningTest.translateSpaceToNewline(java.lang.CharSequence)java.lang.CharSequence: 65 bytes
InliningTest.topLevelRecurse1(gnu.lists.Pair)gnu.bytecode.Type$NeverReturns: 10 bytes
InliningTest.topLevelRecurse2(java.lang.Object,java.lang.Object)gnu.bytecode.Type$NeverReturns: 7 bytes
InliningTest.sum1(gnu.math.IntNum)java.lang.Object: 34 bytes
InliningTest.sum2(double)double: 27 bytes
InliningTest.numcomp1(java.lang.Object,java.lang.Object)int: 15 bytes
InliningTest.numcomp2(java.lang.Object,java.lang.Object)int: 16 bytes
InliningTest.numcomp3(java.lang.Object,java.lang.Object,java.lang.Object)int: 19 bytes
InliningTest.numcomp4(java.lang.Object,java.lang.Object,java.lang.Object)int: 32 bytes
InliningTest.numcomp5(java.lang.Object,java.lang.Object,java.lang.Object)int: 33 bytes
InliningTest.eqv1(java.lang.Object,java.lang.Object)boolean: 6 bytes
InliningTest.raise1(int,java.lang.Object)int: 13 bytes
InliningTest.case01()gnu.mapping.SimpleSymbol: 4 bytes
InliningTest.case02()gnu.mapping.SimpleSymbol: 4 bytes
InliningTest.case03()gnu.mapping.SimpleSymbol: 4 bytes
InliningTest.case04(java.lang.Object)gnu.math.IntNum: 193 bytes
InliningTest.case05(int)gnu.math.IntNum: 85 bytes
InliningTest.case06(long)gnu.math.IntNum: 171 bytes
InliningTest.case07(java.lang.Object)gnu.math.IntNum: 193 bytes
InliningTest.case08(int)gnu.math.IntNum: 85 bytes
InliningTest.case09(long)gnu.math.IntNum: 171 bytes
InliningTest.case10(java.lang.Object)java.lang.Object: 193 bytes
InliningTest.case11(int)java.lang.Object: 85 bytes
InliningTest.case12(long)java.lang.Object: 171 bytes
InliningTest.case13(gnu.math.IntNum)gnu.math.IntNum: 193 bytes
InliningTest.case14(char)gnu.math.IntNum: 85 bytes
cycle1.isIsEven(int)boolean: 17 bytes
cycle2.isIsOdd(int)boolean: 17 bytes
binarytrees.bottomUpTree(int,int)binarytrees$TreeNode: 60 bytes
binarytrees.test(int)void: 214 bytes
binarytrees$TreeNode.itemCheck()int: 35 bytes
fannkuch.vectorReverseSlice$Ex(int[],int,int)void: 35 bytes
fannkuch.countFlips(int[],int[])int: 46 bytes
fannkuch.fannkuch(int)int: 230 bytes
fannkuchredux.fannkuch(int)int: 285 bytes
fasta.randomNext(double)double: 28 bytes
pidigits.pidigits(int,java.io.PrintStream)void: 125 bytes
pidigits$Transformation.next()void: 59 bytes
pidigits$Transformation.extract(int)int: 41 bytes
pidigits$Transformation.compose(pidigits$Transformation)pidigits$Transformation: 110 bytes
pidigits$PiDigitSpigot.next()int: 50 bytes
pidigits$PiDigitSpigot.digit()int: 9 bytes
pidigits$PiDigitSpigot.isSafe(int)boolean: 18 bytes
pidigits$PiDigitSpigot.produce(int)pidigits$Transformation: 27 bytes
pidigits$PiDigitSpigot.consume(pidigits$Transformation)pidigits$Transformation: 9 bytes
mandelbrot.compute(int,java.io.PrintStream)void: 324 bytes
nbody.nbodySystem(int)void: 187 bytes
nbody.advance(nbody$Body[],double)void: 330 bytes
nbody.energy(nbody$Body[])double: 181 bytes
nbody.jupiter()nbody$Body: 57 bytes
nbody$Body.offsetMomentum(double,double,double)void: 32 bytes
regexdna.regexdna(java.io.InputStream)void: 329 bytes
revcomp1.revcomp(java.io.InputStream)void: 371 bytes
revcomp2.run(gnu.mapping.CallContext)void: 200 bytes
revcomp2$RevByteArray.reverseAndPrint()void: 129 bytes
spectralnorm.Approximate(int)double: 110 bytes
spectralnorm.A(int,int)double: 19 bytes
spectralnorm.multiplyAv(int,double[],double[])void: 53 bytes
spectralnorm.multiplyAtv(int,double[],double[])void: 53 bytes
spectralnorm.multiplyAtAv(int,double[],double[])void: 17 bytes
