// DO NOT EDIT: This file is automatically generated by gnu/text/Makefile.
package gnu.text;
public class StandardNamedChars {
  public static final NamedCharTable instance = new NamedCharTable();
  static { NamedCharTable t = instance;
    t.put("AElig", 0x000C6);  // LATIN CAPITAL LETTER AE 
    t.put("AMP", 38);  // AMPERSAND 
    t.put("Aacgr", 0x00386);  // GREEK CAPITAL LETTER ALPHA WITH TONOS 
    t.put("Aacute", 0x000C1);  // LATIN CAPITAL LETTER A WITH ACUTE 
    t.put("Abreve", 0x00102);  // LATIN CAPITAL LETTER A WITH BREVE 
    t.put("Acirc", 0x000C2);  // LATIN CAPITAL LETTER A WITH CIRCUMFLEX 
    t.put("Acy", 0x00410);  // CYRILLIC CAPITAL LETTER A 
    t.put("Afr", 0x1D504);  // MATHEMATICAL FRAKTUR CAPITAL A 
    t.put("Agr", 0x00391);  // GREEK CAPITAL LETTER ALPHA 
    t.put("Agrave", 0x000C0);  // LATIN CAPITAL LETTER A WITH GRAVE 
    t.put("Alpha", 0x00391);  // GREEK CAPITAL LETTER ALPHA 
    t.put("Amacr", 0x00100);  // LATIN CAPITAL LETTER A WITH MACRON 
    t.put("And", 0x02A53);  // DOUBLE LOGICAL AND 
    t.put("Aogon", 0x00104);  // LATIN CAPITAL LETTER A WITH OGONEK 
    t.put("Aopf", 0x1D538);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL A 
    t.put("ApplyFunction", 0x02061);  // FUNCTION APPLICATION 
    t.put("Aring", 0x000C5);  // LATIN CAPITAL LETTER A WITH RING ABOVE 
    t.put("Ascr", 0x1D49C);  // MATHEMATICAL SCRIPT CAPITAL A 
    t.put("Assign", 0x02254);  // COLON EQUALS 
    t.put("Atilde", 0x000C3);  // LATIN CAPITAL LETTER A WITH TILDE 
    t.put("Auml", 0x000C4);  // LATIN CAPITAL LETTER A WITH DIAERESIS 
    t.put("Backslash", 0x02216);  // SET MINUS 
    t.put("Barv", 0x02AE7);  // SHORT DOWN TACK WITH OVERBAR 
    t.put("Barwed", 0x02306);  // PERSPECTIVE 
    t.put("Bcy", 0x00411);  // CYRILLIC CAPITAL LETTER BE 
    t.put("Because", 0x02235);  // BECAUSE 
    t.put("Bernoullis", 0x0212C);  // SCRIPT CAPITAL B 
    t.put("Beta", 0x00392);  // GREEK CAPITAL LETTER BETA 
    t.put("Bfr", 0x1D505);  // MATHEMATICAL FRAKTUR CAPITAL B 
    t.put("Bgr", 0x00392);  // GREEK CAPITAL LETTER BETA 
    t.put("Bopf", 0x1D539);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL B 
    t.put("Breve", 0x002D8);  // BREVE 
    t.put("Bscr", 0x0212C);  // SCRIPT CAPITAL B 
    t.put("Bumpeq", 0x0224E);  // GEOMETRICALLY EQUIVALENT TO 
    t.put("CHcy", 0x00427);  // CYRILLIC CAPITAL LETTER CHE 
    t.put("COPY", 0x000A9);  // COPYRIGHT SIGN 
    t.put("Cacute", 0x00106);  // LATIN CAPITAL LETTER C WITH ACUTE 
    t.put("Cap", 0x022D2);  // DOUBLE INTERSECTION 
    t.put("CapitalDifferentialD", 0x02145);  // DOUBLE-STRUCK ITALIC CAPITAL D 
    t.put("Cayleys", 0x0212D);  // BLACK-LETTER CAPITAL C 
    t.put("Ccaron", 0x0010C);  // LATIN CAPITAL LETTER C WITH CARON 
    t.put("Ccedil", 0x000C7);  // LATIN CAPITAL LETTER C WITH CEDILLA 
    t.put("Ccirc", 0x00108);  // LATIN CAPITAL LETTER C WITH CIRCUMFLEX 
    t.put("Cconint", 0x02230);  // VOLUME INTEGRAL 
    t.put("Cdot", 0x0010A);  // LATIN CAPITAL LETTER C WITH DOT ABOVE 
    t.put("Cedilla", 0x000B8);  // CEDILLA 
    t.put("CenterDot", 0x000B7);  // MIDDLE DOT 
    t.put("Cfr", 0x0212D);  // BLACK-LETTER CAPITAL C 
    t.put("Chi", 0x003A7);  // GREEK CAPITAL LETTER CHI 
    t.put("CircleDot", 0x02299);  // CIRCLED DOT OPERATOR 
    t.put("CircleMinus", 0x02296);  // CIRCLED MINUS 
    t.put("CirclePlus", 0x02295);  // CIRCLED PLUS 
    t.put("CircleTimes", 0x02297);  // CIRCLED TIMES 
    t.put("ClockwiseContourIntegral", 0x02232);  // CLOCKWISE CONTOUR INTEGRAL 
    t.put("CloseCurlyDoubleQuote", 0x0201D);  // RIGHT DOUBLE QUOTATION MARK 
    t.put("CloseCurlyQuote", 0x02019);  // RIGHT SINGLE QUOTATION MARK 
    t.put("Colon", 0x02237);  // PROPORTION 
    t.put("Colone", 0x02A74);  // DOUBLE COLON EQUAL 
    t.put("Congruent", 0x02261);  // IDENTICAL TO 
    t.put("Conint", 0x0222F);  // SURFACE INTEGRAL 
    t.put("ContourIntegral", 0x0222E);  // CONTOUR INTEGRAL 
    t.put("Copf", 0x02102);  // DOUBLE-STRUCK CAPITAL C 
    t.put("Coproduct", 0x02210);  // N-ARY COPRODUCT 
    t.put("CounterClockwiseContourIntegral", 0x02233);  // ANTICLOCKWISE CONTOUR INTEGRAL 
    t.put("Cross", 0x02A2F);  // VECTOR OR CROSS PRODUCT 
    t.put("Cscr", 0x1D49E);  // MATHEMATICAL SCRIPT CAPITAL C 
    t.put("Cup", 0x022D3);  // DOUBLE UNION 
    t.put("CupCap", 0x0224D);  // EQUIVALENT TO 
    t.put("DD", 0x02145);  // DOUBLE-STRUCK ITALIC CAPITAL D 
    t.put("DDotrahd", 0x02911);  // RIGHTWARDS ARROW WITH DOTTED STEM 
    t.put("DJcy", 0x00402);  // CYRILLIC CAPITAL LETTER DJE 
    t.put("DScy", 0x00405);  // CYRILLIC CAPITAL LETTER DZE 
    t.put("DZcy", 0x0040F);  // CYRILLIC CAPITAL LETTER DZHE 
    t.put("Dagger", 0x02021);  // DOUBLE DAGGER 
    t.put("Darr", 0x021A1);  // DOWNWARDS TWO HEADED ARROW 
    t.put("Dashv", 0x02AE4);  // VERTICAL BAR DOUBLE LEFT TURNSTILE 
    t.put("Dcaron", 0x0010E);  // LATIN CAPITAL LETTER D WITH CARON 
    t.put("Dcy", 0x00414);  // CYRILLIC CAPITAL LETTER DE 
    t.put("Del", 0x02207);  // NABLA 
    t.put("Delta", 0x00394);  // GREEK CAPITAL LETTER DELTA 
    t.put("Dfr", 0x1D507);  // MATHEMATICAL FRAKTUR CAPITAL D 
    t.put("Dgr", 0x00394);  // GREEK CAPITAL LETTER DELTA 
    t.put("DiacriticalAcute", 0x000B4);  // ACUTE ACCENT 
    t.put("DiacriticalDot", 0x002D9);  // DOT ABOVE 
    t.put("DiacriticalDoubleAcute", 0x002DD);  // DOUBLE ACUTE ACCENT 
    t.put("DiacriticalGrave", 0x00060);  // GRAVE ACCENT 
    t.put("DiacriticalTilde", 0x002DC);  // SMALL TILDE 
    t.put("Diamond", 0x022C4);  // DIAMOND OPERATOR 
    t.put("DifferentialD", 0x02146);  // DOUBLE-STRUCK ITALIC SMALL D 
    t.put("Dopf", 0x1D53B);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL D 
    t.put("Dot", 0x000A8);  // DIAERESIS 
    t.put("DotDot" , 0x020DC);  // COMBINING FOUR DOTS ABOVE 
    t.put("DotEqual", 0x02250);  // APPROACHES THE LIMIT 
    t.put("DoubleContourIntegral", 0x0222F);  // SURFACE INTEGRAL 
    t.put("DoubleDot", 0x000A8);  // DIAERESIS 
    t.put("DoubleDownArrow", 0x021D3);  // DOWNWARDS DOUBLE ARROW 
    t.put("DoubleLeftArrow", 0x021D0);  // LEFTWARDS DOUBLE ARROW 
    t.put("DoubleLeftRightArrow", 0x021D4);  // LEFT RIGHT DOUBLE ARROW 
    t.put("DoubleLeftTee", 0x02AE4);  // VERTICAL BAR DOUBLE LEFT TURNSTILE 
    t.put("DoubleLongLeftArrow", 0x027F8);  // LONG LEFTWARDS DOUBLE ARROW 
    t.put("DoubleLongLeftRightArrow", 0x027FA);  // LONG LEFT RIGHT DOUBLE ARROW 
    t.put("DoubleLongRightArrow", 0x027F9);  // LONG RIGHTWARDS DOUBLE ARROW 
    t.put("DoubleRightArrow", 0x021D2);  // RIGHTWARDS DOUBLE ARROW 
    t.put("DoubleRightTee", 0x022A8);  // TRUE 
    t.put("DoubleUpArrow", 0x021D1);  // UPWARDS DOUBLE ARROW 
    t.put("DoubleUpDownArrow", 0x021D5);  // UP DOWN DOUBLE ARROW 
    t.put("DoubleVerticalBar", 0x02225);  // PARALLEL TO 
    t.put("DownArrow", 0x02193);  // DOWNWARDS ARROW 
    t.put("DownArrowBar", 0x02913);  // DOWNWARDS ARROW TO BAR 
    t.put("DownArrowUpArrow", 0x021F5);  // DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW 
    t.put("DownBreve" , 0x00311);  // COMBINING INVERTED BREVE 
    t.put("DownLeftRightVector", 0x02950);  // LEFT BARB DOWN RIGHT BARB DOWN HARPOON 
    t.put("DownLeftTeeVector", 0x0295E);  // LEFTWARDS HARPOON WITH BARB DOWN FROM BAR 
    t.put("DownLeftVector", 0x021BD);  // LEFTWARDS HARPOON WITH BARB DOWNWARDS 
    t.put("DownLeftVectorBar", 0x02956);  // LEFTWARDS HARPOON WITH BARB DOWN TO BAR 
    t.put("DownRightTeeVector", 0x0295F);  // RIGHTWARDS HARPOON WITH BARB DOWN FROM BAR 
    t.put("DownRightVector", 0x021C1);  // RIGHTWARDS HARPOON WITH BARB DOWNWARDS 
    t.put("DownRightVectorBar", 0x02957);  // RIGHTWARDS HARPOON WITH BARB DOWN TO BAR 
    t.put("DownTee", 0x022A4);  // DOWN TACK 
    t.put("DownTeeArrow", 0x021A7);  // DOWNWARDS ARROW FROM BAR 
    t.put("Downarrow", 0x021D3);  // DOWNWARDS DOUBLE ARROW 
    t.put("Dscr", 0x1D49F);  // MATHEMATICAL SCRIPT CAPITAL D 
    t.put("Dstrok", 0x00110);  // LATIN CAPITAL LETTER D WITH STROKE 
    t.put("EEacgr", 0x00389);  // GREEK CAPITAL LETTER ETA WITH TONOS 
    t.put("EEgr", 0x00397);  // GREEK CAPITAL LETTER ETA 
    t.put("ENG", 0x0014A);  // LATIN CAPITAL LETTER ENG 
    t.put("ETH", 0x000D0);  // LATIN CAPITAL LETTER ETH 
    t.put("Eacgr", 0x00388);  // GREEK CAPITAL LETTER EPSILON WITH TONOS 
    t.put("Eacute", 0x000C9);  // LATIN CAPITAL LETTER E WITH ACUTE 
    t.put("Ecaron", 0x0011A);  // LATIN CAPITAL LETTER E WITH CARON 
    t.put("Ecirc", 0x000CA);  // LATIN CAPITAL LETTER E WITH CIRCUMFLEX 
    t.put("Ecy", 0x0042D);  // CYRILLIC CAPITAL LETTER E 
    t.put("Edot", 0x00116);  // LATIN CAPITAL LETTER E WITH DOT ABOVE 
    t.put("Efr", 0x1D508);  // MATHEMATICAL FRAKTUR CAPITAL E 
    t.put("Egr", 0x00395);  // GREEK CAPITAL LETTER EPSILON 
    t.put("Egrave", 0x000C8);  // LATIN CAPITAL LETTER E WITH GRAVE 
    t.put("Element", 0x02208);  // ELEMENT OF 
    t.put("Emacr", 0x00112);  // LATIN CAPITAL LETTER E WITH MACRON 
    t.put("EmptySmallSquare", 0x025FB);  // WHITE MEDIUM SQUARE 
    t.put("EmptyVerySmallSquare", 0x025AB);  // WHITE SMALL SQUARE 
    t.put("Eogon", 0x00118);  // LATIN CAPITAL LETTER E WITH OGONEK 
    t.put("Eopf", 0x1D53C);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL E 
    t.put("Epsilon", 0x00395);  // GREEK CAPITAL LETTER EPSILON 
    t.put("Equal", 0x02A75);  // TWO CONSECUTIVE EQUALS SIGNS 
    t.put("EqualTilde", 0x02242);  // MINUS TILDE 
    t.put("Equilibrium", 0x021CC);  // RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON 
    t.put("Escr", 0x02130);  // SCRIPT CAPITAL E 
    t.put("Esim", 0x02A73);  // EQUALS SIGN ABOVE TILDE OPERATOR 
    t.put("Eta", 0x00397);  // GREEK CAPITAL LETTER ETA 
    t.put("Euml", 0x000CB);  // LATIN CAPITAL LETTER E WITH DIAERESIS 
    t.put("Exists", 0x02203);  // THERE EXISTS 
    t.put("ExponentialE", 0x02147);  // DOUBLE-STRUCK ITALIC SMALL E 
    t.put("Fcy", 0x00424);  // CYRILLIC CAPITAL LETTER EF 
    t.put("Ffr", 0x1D509);  // MATHEMATICAL FRAKTUR CAPITAL F 
    t.put("FilledSmallSquare", 0x025FC);  // BLACK MEDIUM SQUARE 
    t.put("FilledVerySmallSquare", 0x025AA);  // BLACK SMALL SQUARE 
    t.put("Fopf", 0x1D53D);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL F 
    t.put("ForAll", 0x02200);  // FOR ALL 
    t.put("Fouriertrf", 0x02131);  // SCRIPT CAPITAL F 
    t.put("Fscr", 0x02131);  // SCRIPT CAPITAL F 
    t.put("GJcy", 0x00403);  // CYRILLIC CAPITAL LETTER GJE 
    t.put("GT", 0x0003E);  // GREATER-THAN SIGN 
    t.put("Gamma", 0x00393);  // GREEK CAPITAL LETTER GAMMA 
    t.put("Gammad", 0x003DC);  // GREEK LETTER DIGAMMA 
    t.put("Gbreve", 0x0011E);  // LATIN CAPITAL LETTER G WITH BREVE 
    t.put("Gcedil", 0x00122);  // LATIN CAPITAL LETTER G WITH CEDILLA 
    t.put("Gcirc", 0x0011C);  // LATIN CAPITAL LETTER G WITH CIRCUMFLEX 
    t.put("Gcy", 0x00413);  // CYRILLIC CAPITAL LETTER GHE 
    t.put("Gdot", 0x00120);  // LATIN CAPITAL LETTER G WITH DOT ABOVE 
    t.put("Gfr", 0x1D50A);  // MATHEMATICAL FRAKTUR CAPITAL G 
    t.put("Gg", 0x022D9);  // VERY MUCH GREATER-THAN 
    t.put("Ggr", 0x00393);  // GREEK CAPITAL LETTER GAMMA 
    t.put("Gopf", 0x1D53E);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL G 
    t.put("GreaterEqual", 0x02265);  // GREATER-THAN OR EQUAL TO 
    t.put("GreaterEqualLess", 0x022DB);  // GREATER-THAN EQUAL TO OR LESS-THAN 
    t.put("GreaterFullEqual", 0x02267);  // GREATER-THAN OVER EQUAL TO 
    t.put("GreaterGreater", 0x02AA2);  // DOUBLE NESTED GREATER-THAN 
    t.put("GreaterLess", 0x02277);  // GREATER-THAN OR LESS-THAN 
    t.put("GreaterSlantEqual", 0x02A7E);  // GREATER-THAN OR SLANTED EQUAL TO 
    t.put("GreaterTilde", 0x02273);  // GREATER-THAN OR EQUIVALENT TO 
    t.put("Gscr", 0x1D4A2);  // MATHEMATICAL SCRIPT CAPITAL G 
    t.put("Gt", 0x0226B);  // MUCH GREATER-THAN 
    t.put("HARDcy", 0x0042A);  // CYRILLIC CAPITAL LETTER HARD SIGN 
    t.put("Hacek", 0x002C7);  // CARON 
    t.put("Hat", 0x0005E);  // CIRCUMFLEX ACCENT 
    t.put("Hcirc", 0x00124);  // LATIN CAPITAL LETTER H WITH CIRCUMFLEX 
    t.put("Hfr", 0x0210C);  // BLACK-LETTER CAPITAL H 
    t.put("HilbertSpace", 0x0210B);  // SCRIPT CAPITAL H 
    t.put("Hopf", 0x0210D);  // DOUBLE-STRUCK CAPITAL H 
    t.put("HorizontalLine", 0x02500);  // BOX DRAWINGS LIGHT HORIZONTAL 
    t.put("Hscr", 0x0210B);  // SCRIPT CAPITAL H 
    t.put("Hstrok", 0x00126);  // LATIN CAPITAL LETTER H WITH STROKE 
    t.put("HumpDownHump", 0x0224E);  // GEOMETRICALLY EQUIVALENT TO 
    t.put("HumpEqual", 0x0224F);  // DIFFERENCE BETWEEN 
    t.put("IEcy", 0x00415);  // CYRILLIC CAPITAL LETTER IE 
    t.put("IJlig", 0x00132);  // LATIN CAPITAL LIGATURE IJ 
    t.put("IOcy", 0x00401);  // CYRILLIC CAPITAL LETTER IO 
    t.put("Iacgr", 0x0038A);  // GREEK CAPITAL LETTER IOTA WITH TONOS 
    t.put("Iacute", 0x000CD);  // LATIN CAPITAL LETTER I WITH ACUTE 
    t.put("Icirc", 0x000CE);  // LATIN CAPITAL LETTER I WITH CIRCUMFLEX 
    t.put("Icy", 0x00418);  // CYRILLIC CAPITAL LETTER I 
    t.put("Idigr", 0x003AA);  // GREEK CAPITAL LETTER IOTA WITH DIALYTIKA 
    t.put("Idot", 0x00130);  // LATIN CAPITAL LETTER I WITH DOT ABOVE 
    t.put("Ifr", 0x02111);  // BLACK-LETTER CAPITAL I 
    t.put("Igr", 0x00399);  // GREEK CAPITAL LETTER IOTA 
    t.put("Igrave", 0x000CC);  // LATIN CAPITAL LETTER I WITH GRAVE 
    t.put("Im", 0x02111);  // BLACK-LETTER CAPITAL I 
    t.put("Imacr", 0x0012A);  // LATIN CAPITAL LETTER I WITH MACRON 
    t.put("ImaginaryI", 0x02148);  // DOUBLE-STRUCK ITALIC SMALL I 
    t.put("Implies", 0x021D2);  // RIGHTWARDS DOUBLE ARROW 
    t.put("Int", 0x0222C);  // DOUBLE INTEGRAL 
    t.put("Integral", 0x0222B);  // INTEGRAL 
    t.put("Intersection", 0x022C2);  // N-ARY INTERSECTION 
    t.put("InvisibleComma", 0x02063);  // INVISIBLE SEPARATOR 
    t.put("InvisibleTimes", 0x02062);  // INVISIBLE TIMES 
    t.put("Iogon", 0x0012E);  // LATIN CAPITAL LETTER I WITH OGONEK 
    t.put("Iopf", 0x1D540);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL I 
    t.put("Iota", 0x00399);  // GREEK CAPITAL LETTER IOTA 
    t.put("Iscr", 0x02110);  // SCRIPT CAPITAL I 
    t.put("Itilde", 0x00128);  // LATIN CAPITAL LETTER I WITH TILDE 
    t.put("Iukcy", 0x00406);  // CYRILLIC CAPITAL LETTER BYELORUSSIAN-UKRAINIAN I 
    t.put("Iuml", 0x000CF);  // LATIN CAPITAL LETTER I WITH DIAERESIS 
    t.put("Jcirc", 0x00134);  // LATIN CAPITAL LETTER J WITH CIRCUMFLEX 
    t.put("Jcy", 0x00419);  // CYRILLIC CAPITAL LETTER SHORT I 
    t.put("Jfr", 0x1D50D);  // MATHEMATICAL FRAKTUR CAPITAL J 
    t.put("Jopf", 0x1D541);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL J 
    t.put("Jscr", 0x1D4A5);  // MATHEMATICAL SCRIPT CAPITAL J 
    t.put("Jsercy", 0x00408);  // CYRILLIC CAPITAL LETTER JE 
    t.put("Jukcy", 0x00404);  // CYRILLIC CAPITAL LETTER UKRAINIAN IE 
    t.put("KHcy", 0x00425);  // CYRILLIC CAPITAL LETTER HA 
    t.put("KHgr", 0x003A7);  // GREEK CAPITAL LETTER CHI 
    t.put("KJcy", 0x0040C);  // CYRILLIC CAPITAL LETTER KJE 
    t.put("Kappa", 0x0039A);  // GREEK CAPITAL LETTER KAPPA 
    t.put("Kcedil", 0x00136);  // LATIN CAPITAL LETTER K WITH CEDILLA 
    t.put("Kcy", 0x0041A);  // CYRILLIC CAPITAL LETTER KA 
    t.put("Kfr", 0x1D50E);  // MATHEMATICAL FRAKTUR CAPITAL K 
    t.put("Kgr", 0x0039A);  // GREEK CAPITAL LETTER KAPPA 
    t.put("Kopf", 0x1D542);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL K 
    t.put("Kscr", 0x1D4A6);  // MATHEMATICAL SCRIPT CAPITAL K 
    t.put("LJcy", 0x00409);  // CYRILLIC CAPITAL LETTER LJE 
    t.put("LT", 60);  // LESS-THAN SIGN 
    t.put("Lacute", 0x00139);  // LATIN CAPITAL LETTER L WITH ACUTE 
    t.put("Lambda", 0x0039B);  // GREEK CAPITAL LETTER LAMDA 
    t.put("Lang", 0x027EA);  // MATHEMATICAL LEFT DOUBLE ANGLE BRACKET 
    t.put("Laplacetrf", 0x02112);  // SCRIPT CAPITAL L 
    t.put("Larr", 0x0219E);  // LEFTWARDS TWO HEADED ARROW 
    t.put("Lcaron", 0x0013D);  // LATIN CAPITAL LETTER L WITH CARON 
    t.put("Lcedil", 0x0013B);  // LATIN CAPITAL LETTER L WITH CEDILLA 
    t.put("Lcy", 0x0041B);  // CYRILLIC CAPITAL LETTER EL 
    t.put("LeftAngleBracket", 0x027E8);  // MATHEMATICAL LEFT ANGLE BRACKET 
    t.put("LeftArrow", 0x02190);  // LEFTWARDS ARROW 
    t.put("LeftArrowBar", 0x021E4);  // LEFTWARDS ARROW TO BAR 
    t.put("LeftArrowRightArrow", 0x021C6);  // LEFTWARDS ARROW OVER RIGHTWARDS ARROW 
    t.put("LeftCeiling", 0x02308);  // LEFT CEILING 
    t.put("LeftDoubleBracket", 0x027E6);  // MATHEMATICAL LEFT WHITE SQUARE BRACKET 
    t.put("LeftDownTeeVector", 0x02961);  // DOWNWARDS HARPOON WITH BARB LEFT FROM BAR 
    t.put("LeftDownVector", 0x021C3);  // DOWNWARDS HARPOON WITH BARB LEFTWARDS 
    t.put("LeftDownVectorBar", 0x02959);  // DOWNWARDS HARPOON WITH BARB LEFT TO BAR 
    t.put("LeftFloor", 0x0230A);  // LEFT FLOOR 
    t.put("LeftRightArrow", 0x02194);  // LEFT RIGHT ARROW 
    t.put("LeftRightVector", 0x0294E);  // LEFT BARB UP RIGHT BARB UP HARPOON 
    t.put("LeftTee", 0x022A3);  // LEFT TACK 
    t.put("LeftTeeArrow", 0x021A4);  // LEFTWARDS ARROW FROM BAR 
    t.put("LeftTeeVector", 0x0295A);  // LEFTWARDS HARPOON WITH BARB UP FROM BAR 
    t.put("LeftTriangle", 0x022B2);  // NORMAL SUBGROUP OF 
    t.put("LeftTriangleBar", 0x029CF);  // LEFT TRIANGLE BESIDE VERTICAL BAR 
    t.put("LeftTriangleEqual", 0x022B4);  // NORMAL SUBGROUP OF OR EQUAL TO 
    t.put("LeftUpDownVector", 0x02951);  // UP BARB LEFT DOWN BARB LEFT HARPOON 
    t.put("LeftUpTeeVector", 0x02960);  // UPWARDS HARPOON WITH BARB LEFT FROM BAR 
    t.put("LeftUpVector", 0x021BF);  // UPWARDS HARPOON WITH BARB LEFTWARDS 
    t.put("LeftUpVectorBar", 0x02958);  // UPWARDS HARPOON WITH BARB LEFT TO BAR 
    t.put("LeftVector", 0x021BC);  // LEFTWARDS HARPOON WITH BARB UPWARDS 
    t.put("LeftVectorBar", 0x02952);  // LEFTWARDS HARPOON WITH BARB UP TO BAR 
    t.put("Leftarrow", 0x021D0);  // LEFTWARDS DOUBLE ARROW 
    t.put("Leftrightarrow", 0x021D4);  // LEFT RIGHT DOUBLE ARROW 
    t.put("LessEqualGreater", 0x022DA);  // LESS-THAN EQUAL TO OR GREATER-THAN 
    t.put("LessFullEqual", 0x02266);  // LESS-THAN OVER EQUAL TO 
    t.put("LessGreater", 0x02276);  // LESS-THAN OR GREATER-THAN 
    t.put("LessLess", 0x02AA1);  // DOUBLE NESTED LESS-THAN 
    t.put("LessSlantEqual", 0x02A7D);  // LESS-THAN OR SLANTED EQUAL TO 
    t.put("LessTilde", 0x02272);  // LESS-THAN OR EQUIVALENT TO 
    t.put("Lfr", 0x1D50F);  // MATHEMATICAL FRAKTUR CAPITAL L 
    t.put("Lgr", 0x0039B);  // GREEK CAPITAL LETTER LAMDA 
    t.put("Ll", 0x022D8);  // VERY MUCH LESS-THAN 
    t.put("Lleftarrow", 0x021DA);  // LEFTWARDS TRIPLE ARROW 
    t.put("Lmidot", 0x0013F);  // LATIN CAPITAL LETTER L WITH MIDDLE DOT 
    t.put("LongLeftArrow", 0x027F5);  // LONG LEFTWARDS ARROW 
    t.put("LongLeftRightArrow", 0x027F7);  // LONG LEFT RIGHT ARROW 
    t.put("LongRightArrow", 0x027F6);  // LONG RIGHTWARDS ARROW 
    t.put("Longleftarrow", 0x027F8);  // LONG LEFTWARDS DOUBLE ARROW 
    t.put("Longleftrightarrow", 0x027FA);  // LONG LEFT RIGHT DOUBLE ARROW 
    t.put("Longrightarrow", 0x027F9);  // LONG RIGHTWARDS DOUBLE ARROW 
    t.put("Lopf", 0x1D543);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL L 
    t.put("LowerLeftArrow", 0x02199);  // SOUTH WEST ARROW 
    t.put("LowerRightArrow", 0x02198);  // SOUTH EAST ARROW 
    t.put("Lscr", 0x02112);  // SCRIPT CAPITAL L 
    t.put("Lsh", 0x021B0);  // UPWARDS ARROW WITH TIP LEFTWARDS 
    t.put("Lstrok", 0x00141);  // LATIN CAPITAL LETTER L WITH STROKE 
    t.put("Lt", 0x0226A);  // MUCH LESS-THAN 
    t.put("Map", 0x02905);  // RIGHTWARDS TWO-HEADED ARROW FROM BAR 
    t.put("Mcy", 0x0041C);  // CYRILLIC CAPITAL LETTER EM 
    t.put("MediumSpace", 0x0205F);  // MEDIUM MATHEMATICAL SPACE 
    t.put("Mellintrf", 0x02133);  // SCRIPT CAPITAL M 
    t.put("Mfr", 0x1D510);  // MATHEMATICAL FRAKTUR CAPITAL M 
    t.put("Mgr", 0x0039C);  // GREEK CAPITAL LETTER MU 
    t.put("MinusPlus", 0x02213);  // MINUS-OR-PLUS SIGN 
    t.put("Mopf", 0x1D544);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL M 
    t.put("Mscr", 0x02133);  // SCRIPT CAPITAL M 
    t.put("Mu", 0x0039C);  // GREEK CAPITAL LETTER MU 
    t.put("NJcy", 0x0040A);  // CYRILLIC CAPITAL LETTER NJE 
    t.put("Nacute", 0x00143);  // LATIN CAPITAL LETTER N WITH ACUTE 
    t.put("Ncaron", 0x00147);  // LATIN CAPITAL LETTER N WITH CARON 
    t.put("Ncedil", 0x00145);  // LATIN CAPITAL LETTER N WITH CEDILLA 
    t.put("Ncy", 0x0041D);  // CYRILLIC CAPITAL LETTER EN 
    t.put("NegativeMediumSpace", 0x0200B);  // ZERO WIDTH SPACE 
    t.put("NegativeThickSpace", 0x0200B);  // ZERO WIDTH SPACE 
    t.put("NegativeThinSpace", 0x0200B);  // ZERO WIDTH SPACE 
    t.put("NegativeVeryThinSpace", 0x0200B);  // ZERO WIDTH SPACE 
    t.put("NestedGreaterGreater", 0x0226B);  // MUCH GREATER-THAN 
    t.put("NestedLessLess", 0x0226A);  // MUCH LESS-THAN 
    t.put("NewLine", 0x0000A);  // LINE FEED (LF) 
    t.put("Nfr", 0x1D511);  // MATHEMATICAL FRAKTUR CAPITAL N 
    t.put("Ngr", 0x0039D);  // GREEK CAPITAL LETTER NU 
    t.put("NoBreak", 0x02060);  // WORD JOINER 
    t.put("NonBreakingSpace", 0x000A0);  // NO-BREAK SPACE 
    t.put("Nopf", 0x02115);  // DOUBLE-STRUCK CAPITAL N 
    t.put("Not", 0x02AEC);  // DOUBLE STROKE NOT SIGN 
    t.put("NotCongruent", 0x02262);  // NOT IDENTICAL TO 
    t.put("NotCupCap", 0x0226D);  // NOT EQUIVALENT TO 
    t.put("NotDoubleVerticalBar", 0x02226);  // NOT PARALLEL TO 
    t.put("NotElement", 0x02209);  // NOT AN ELEMENT OF 
    t.put("NotEqual", 0x02260);  // NOT EQUAL TO 
    t.put("NotEqualTilde", 0x02242, 0x00338);  // MINUS TILDE with slash 
    t.put("NotExists", 0x02204);  // THERE DOES NOT EXIST 
    t.put("NotGreater", 0x0226F);  // NOT GREATER-THAN 
    t.put("NotGreaterEqual", 0x02271);  // NEITHER GREATER-THAN NOR EQUAL TO 
    t.put("NotGreaterFullEqual", 0x02267, 0x00338);  // GREATER-THAN OVER EQUAL TO with slash 
    t.put("NotGreaterGreater", 0x0226B, 0x00338);  // MUCH GREATER THAN with slash 
    t.put("NotGreaterLess", 0x02279);  // NEITHER GREATER-THAN NOR LESS-THAN 
    t.put("NotGreaterSlantEqual", 0x02A7E, 0x00338);  // GREATER-THAN OR SLANTED EQUAL TO with slash 
    t.put("NotGreaterTilde", 0x02275);  // NEITHER GREATER-THAN NOR EQUIVALENT TO 
    t.put("NotHumpDownHump", 0x0224E, 0x00338);  // GEOMETRICALLY EQUIVALENT TO with slash 
    t.put("NotHumpEqual", 0x0224F, 0x00338);  // DIFFERENCE BETWEEN with slash 
    t.put("NotLeftTriangle", 0x022EA);  // NOT NORMAL SUBGROUP OF 
    t.put("NotLeftTriangleBar", 0x029CF, 0x00338);  // LEFT TRIANGLE BESIDE VERTICAL BAR with slash 
    t.put("NotLeftTriangleEqual", 0x022EC);  // NOT NORMAL SUBGROUP OF OR EQUAL TO 
    t.put("NotLess", 0x0226E);  // NOT LESS-THAN 
    t.put("NotLessEqual", 0x02270);  // NEITHER LESS-THAN NOR EQUAL TO 
    t.put("NotLessGreater", 0x02278);  // NEITHER LESS-THAN NOR GREATER-THAN 
    t.put("NotLessLess", 0x0226A, 0x00338);  // MUCH LESS THAN with slash 
    t.put("NotLessSlantEqual", 0x02A7D, 0x00338);  // LESS-THAN OR SLANTED EQUAL TO with slash 
    t.put("NotLessTilde", 0x02274);  // NEITHER LESS-THAN NOR EQUIVALENT TO 
    t.put("NotNestedGreaterGreater", 0x02AA2, 0x00338);  // DOUBLE NESTED GREATER-THAN with slash 
    t.put("NotNestedLessLess", 0x02AA1, 0x00338);  // DOUBLE NESTED LESS-THAN with slash 
    t.put("NotPrecedes", 0x02280);  // DOES NOT PRECEDE 
    t.put("NotPrecedesEqual", 0x02AAF, 0x00338);  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash 
    t.put("NotPrecedesSlantEqual", 0x022E0);  // DOES NOT PRECEDE OR EQUAL 
    t.put("NotReverseElement", 0x0220C);  // DOES NOT CONTAIN AS MEMBER 
    t.put("NotRightTriangle", 0x022EB);  // DOES NOT CONTAIN AS NORMAL SUBGROUP 
    t.put("NotRightTriangleBar", 0x029D0, 0x00338);  // VERTICAL BAR BESIDE RIGHT TRIANGLE with slash 
    t.put("NotRightTriangleEqual", 0x022ED);  // DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL 
    t.put("NotSquareSubset", 0x0228F, 0x00338);  // SQUARE IMAGE OF with slash 
    t.put("NotSquareSubsetEqual", 0x022E2);  // NOT SQUARE IMAGE OF OR EQUAL TO 
    t.put("NotSquareSuperset", 0x02290, 0x00338);  // SQUARE ORIGINAL OF with slash 
    t.put("NotSquareSupersetEqual", 0x022E3);  // NOT SQUARE ORIGINAL OF OR EQUAL TO 
    t.put("NotSubset", 0x02282, 0x020D2);  // SUBSET OF with vertical line 
    t.put("NotSubsetEqual", 0x02288);  // NEITHER A SUBSET OF NOR EQUAL TO 
    t.put("NotSucceeds", 0x02281);  // DOES NOT SUCCEED 
    t.put("NotSucceedsEqual", 0x02AB0, 0x00338);  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash 
    t.put("NotSucceedsSlantEqual", 0x022E1);  // DOES NOT SUCCEED OR EQUAL 
    t.put("NotSucceedsTilde", 0x0227F, 0x00338);  // SUCCEEDS OR EQUIVALENT TO with slash 
    t.put("NotSuperset", 0x02283, 0x020D2);  // SUPERSET OF with vertical line 
    t.put("NotSupersetEqual", 0x02289);  // NEITHER A SUPERSET OF NOR EQUAL TO 
    t.put("NotTilde", 0x02241);  // NOT TILDE 
    t.put("NotTildeEqual", 0x02244);  // NOT ASYMPTOTICALLY EQUAL TO 
    t.put("NotTildeFullEqual", 0x02247);  // NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO 
    t.put("NotTildeTilde", 0x02249);  // NOT ALMOST EQUAL TO 
    t.put("NotVerticalBar", 0x02224);  // DOES NOT DIVIDE 
    t.put("Nscr", 0x1D4A9);  // MATHEMATICAL SCRIPT CAPITAL N 
    t.put("Ntilde", 0x000D1);  // LATIN CAPITAL LETTER N WITH TILDE 
    t.put("Nu", 0x0039D);  // GREEK CAPITAL LETTER NU 
    t.put("OElig", 0x00152);  // LATIN CAPITAL LIGATURE OE 
    t.put("OHacgr", 0x0038F);  // GREEK CAPITAL LETTER OMEGA WITH TONOS 
    t.put("OHgr", 0x003A9);  // GREEK CAPITAL LETTER OMEGA 
    t.put("Oacgr", 0x0038C);  // GREEK CAPITAL LETTER OMICRON WITH TONOS 
    t.put("Oacute", 0x000D3);  // LATIN CAPITAL LETTER O WITH ACUTE 
    t.put("Ocirc", 0x000D4);  // LATIN CAPITAL LETTER O WITH CIRCUMFLEX 
    t.put("Ocy", 0x0041E);  // CYRILLIC CAPITAL LETTER O 
    t.put("Odblac", 0x00150);  // LATIN CAPITAL LETTER O WITH DOUBLE ACUTE 
    t.put("Ofr", 0x1D512);  // MATHEMATICAL FRAKTUR CAPITAL O 
    t.put("Ogr", 0x0039F);  // GREEK CAPITAL LETTER OMICRON 
    t.put("Ograve", 0x000D2);  // LATIN CAPITAL LETTER O WITH GRAVE 
    t.put("Omacr", 0x0014C);  // LATIN CAPITAL LETTER O WITH MACRON 
    t.put("Omega", 0x003A9);  // GREEK CAPITAL LETTER OMEGA 
    t.put("Omicron", 0x0039F);  // GREEK CAPITAL LETTER OMICRON 
    t.put("Oopf", 0x1D546);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL O 
    t.put("OpenCurlyDoubleQuote", 0x0201C);  // LEFT DOUBLE QUOTATION MARK 
    t.put("OpenCurlyQuote", 0x02018);  // LEFT SINGLE QUOTATION MARK 
    t.put("Or", 0x02A54);  // DOUBLE LOGICAL OR 
    t.put("Oscr", 0x1D4AA);  // MATHEMATICAL SCRIPT CAPITAL O 
    t.put("Oslash", 0x000D8);  // LATIN CAPITAL LETTER O WITH STROKE 
    t.put("Otilde", 0x000D5);  // LATIN CAPITAL LETTER O WITH TILDE 
    t.put("Otimes", 0x02A37);  // MULTIPLICATION SIGN IN DOUBLE CIRCLE 
    t.put("Ouml", 0x000D6);  // LATIN CAPITAL LETTER O WITH DIAERESIS 
    t.put("OverBar", 0x0203E);  // OVERLINE 
    t.put("OverBrace", 0x023DE);  // TOP CURLY BRACKET 
    t.put("OverBracket", 0x023B4);  // TOP SQUARE BRACKET 
    t.put("OverParenthesis", 0x023DC);  // TOP PARENTHESIS 
    t.put("PHgr", 0x003A6);  // GREEK CAPITAL LETTER PHI 
    t.put("PSgr", 0x003A8);  // GREEK CAPITAL LETTER PSI 
    t.put("PartialD", 0x02202);  // PARTIAL DIFFERENTIAL 
    t.put("Pcy", 0x0041F);  // CYRILLIC CAPITAL LETTER PE 
    t.put("Pfr", 0x1D513);  // MATHEMATICAL FRAKTUR CAPITAL P 
    t.put("Pgr", 0x003A0);  // GREEK CAPITAL LETTER PI 
    t.put("Phi", 0x003A6);  // GREEK CAPITAL LETTER PHI 
    t.put("Pi", 0x003A0);  // GREEK CAPITAL LETTER PI 
    t.put("PlusMinus", 0x000B1);  // PLUS-MINUS SIGN 
    t.put("Poincareplane", 0x0210C);  // BLACK-LETTER CAPITAL H 
    t.put("Popf", 0x02119);  // DOUBLE-STRUCK CAPITAL P 
    t.put("Pr", 0x02ABB);  // DOUBLE PRECEDES 
    t.put("Precedes", 0x0227A);  // PRECEDES 
    t.put("PrecedesEqual", 0x02AAF);  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN 
    t.put("PrecedesSlantEqual", 0x0227C);  // PRECEDES OR EQUAL TO 
    t.put("PrecedesTilde", 0x0227E);  // PRECEDES OR EQUIVALENT TO 
    t.put("Prime", 0x02033);  // DOUBLE PRIME 
    t.put("Product", 0x0220F);  // N-ARY PRODUCT 
    t.put("Proportion", 0x02237);  // PROPORTION 
    t.put("Proportional", 0x0221D);  // PROPORTIONAL TO 
    t.put("Pscr", 0x1D4AB);  // MATHEMATICAL SCRIPT CAPITAL P 
    t.put("Psi", 0x003A8);  // GREEK CAPITAL LETTER PSI 
    t.put("QUOT", 0x00022);  // QUOTATION MARK 
    t.put("Qfr", 0x1D514);  // MATHEMATICAL FRAKTUR CAPITAL Q 
    t.put("Qopf", 0x0211A);  // DOUBLE-STRUCK CAPITAL Q 
    t.put("Qscr", 0x1D4AC);  // MATHEMATICAL SCRIPT CAPITAL Q 
    t.put("RBarr", 0x02910);  // RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW 
    t.put("REG", 0x000AE);  // REGISTERED SIGN 
    t.put("Racute", 0x00154);  // LATIN CAPITAL LETTER R WITH ACUTE 
    t.put("Rang", 0x027EB);  // MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET 
    t.put("Rarr", 0x021A0);  // RIGHTWARDS TWO HEADED ARROW 
    t.put("Rarrtl", 0x02916);  // RIGHTWARDS TWO-HEADED ARROW WITH TAIL 
    t.put("Rcaron", 0x00158);  // LATIN CAPITAL LETTER R WITH CARON 
    t.put("Rcedil", 0x00156);  // LATIN CAPITAL LETTER R WITH CEDILLA 
    t.put("Rcy", 0x00420);  // CYRILLIC CAPITAL LETTER ER 
    t.put("Re", 0x0211C);  // BLACK-LETTER CAPITAL R 
    t.put("ReverseElement", 0x0220B);  // CONTAINS AS MEMBER 
    t.put("ReverseEquilibrium", 0x021CB);  // LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON 
    t.put("ReverseUpEquilibrium", 0x0296F);  // DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT 
    t.put("Rfr", 0x0211C);  // BLACK-LETTER CAPITAL R 
    t.put("Rgr", 0x003A1);  // GREEK CAPITAL LETTER RHO 
    t.put("Rho", 0x003A1);  // GREEK CAPITAL LETTER RHO 
    t.put("RightAngleBracket", 0x027E9);  // MATHEMATICAL RIGHT ANGLE BRACKET 
    t.put("RightArrow", 0x02192);  // RIGHTWARDS ARROW 
    t.put("RightArrowBar", 0x021E5);  // RIGHTWARDS ARROW TO BAR 
    t.put("RightArrowLeftArrow", 0x021C4);  // RIGHTWARDS ARROW OVER LEFTWARDS ARROW 
    t.put("RightCeiling", 0x02309);  // RIGHT CEILING 
    t.put("RightDoubleBracket", 0x027E7);  // MATHEMATICAL RIGHT WHITE SQUARE BRACKET 
    t.put("RightDownTeeVector", 0x0295D);  // DOWNWARDS HARPOON WITH BARB RIGHT FROM BAR 
    t.put("RightDownVector", 0x021C2);  // DOWNWARDS HARPOON WITH BARB RIGHTWARDS 
    t.put("RightDownVectorBar", 0x02955);  // DOWNWARDS HARPOON WITH BARB RIGHT TO BAR 
    t.put("RightFloor", 0x0230B);  // RIGHT FLOOR 
    t.put("RightTee", 0x022A2);  // RIGHT TACK 
    t.put("RightTeeArrow", 0x021A6);  // RIGHTWARDS ARROW FROM BAR 
    t.put("RightTeeVector", 0x0295B);  // RIGHTWARDS HARPOON WITH BARB UP FROM BAR 
    t.put("RightTriangle", 0x022B3);  // CONTAINS AS NORMAL SUBGROUP 
    t.put("RightTriangleBar", 0x029D0);  // VERTICAL BAR BESIDE RIGHT TRIANGLE 
    t.put("RightTriangleEqual", 0x022B5);  // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO 
    t.put("RightUpDownVector", 0x0294F);  // UP BARB RIGHT DOWN BARB RIGHT HARPOON 
    t.put("RightUpTeeVector", 0x0295C);  // UPWARDS HARPOON WITH BARB RIGHT FROM BAR 
    t.put("RightUpVector", 0x021BE);  // UPWARDS HARPOON WITH BARB RIGHTWARDS 
    t.put("RightUpVectorBar", 0x02954);  // UPWARDS HARPOON WITH BARB RIGHT TO BAR 
    t.put("RightVector", 0x021C0);  // RIGHTWARDS HARPOON WITH BARB UPWARDS 
    t.put("RightVectorBar", 0x02953);  // RIGHTWARDS HARPOON WITH BARB UP TO BAR 
    t.put("Rightarrow", 0x021D2);  // RIGHTWARDS DOUBLE ARROW 
    t.put("Ropf", 0x0211D);  // DOUBLE-STRUCK CAPITAL R 
    t.put("RoundImplies", 0x02970);  // RIGHT DOUBLE ARROW WITH ROUNDED HEAD 
    t.put("Rrightarrow", 0x021DB);  // RIGHTWARDS TRIPLE ARROW 
    t.put("Rscr", 0x0211B);  // SCRIPT CAPITAL R 
    t.put("Rsh", 0x021B1);  // UPWARDS ARROW WITH TIP RIGHTWARDS 
    t.put("RuleDelayed", 0x029F4);  // RULE-DELAYED 
    t.put("SHCHcy", 0x00429);  // CYRILLIC CAPITAL LETTER SHCHA 
    t.put("SHcy", 0x00428);  // CYRILLIC CAPITAL LETTER SHA 
    t.put("SOFTcy", 0x0042C);  // CYRILLIC CAPITAL LETTER SOFT SIGN 
    t.put("Sacute", 0x0015A);  // LATIN CAPITAL LETTER S WITH ACUTE 
    t.put("Sc", 0x02ABC);  // DOUBLE SUCCEEDS 
    t.put("Scaron", 0x00160);  // LATIN CAPITAL LETTER S WITH CARON 
    t.put("Scedil", 0x0015E);  // LATIN CAPITAL LETTER S WITH CEDILLA 
    t.put("Scirc", 0x0015C);  // LATIN CAPITAL LETTER S WITH CIRCUMFLEX 
    t.put("Scy", 0x00421);  // CYRILLIC CAPITAL LETTER ES 
    t.put("Sfr", 0x1D516);  // MATHEMATICAL FRAKTUR CAPITAL S 
    t.put("Sgr", 0x003A3);  // GREEK CAPITAL LETTER SIGMA 
    t.put("ShortDownArrow", 0x02193);  // DOWNWARDS ARROW 
    t.put("ShortLeftArrow", 0x02190);  // LEFTWARDS ARROW 
    t.put("ShortRightArrow", 0x02192);  // RIGHTWARDS ARROW 
    t.put("ShortUpArrow", 0x02191);  // UPWARDS ARROW 
    t.put("Sigma", 0x003A3);  // GREEK CAPITAL LETTER SIGMA 
    t.put("SmallCircle", 0x02218);  // RING OPERATOR 
    t.put("Sopf", 0x1D54A);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL S 
    t.put("Sqrt", 0x0221A);  // SQUARE ROOT 
    t.put("Square", 0x025A1);  // WHITE SQUARE 
    t.put("SquareIntersection", 0x02293);  // SQUARE CAP 
    t.put("SquareSubset", 0x0228F);  // SQUARE IMAGE OF 
    t.put("SquareSubsetEqual", 0x02291);  // SQUARE IMAGE OF OR EQUAL TO 
    t.put("SquareSuperset", 0x02290);  // SQUARE ORIGINAL OF 
    t.put("SquareSupersetEqual", 0x02292);  // SQUARE ORIGINAL OF OR EQUAL TO 
    t.put("SquareUnion", 0x02294);  // SQUARE CUP 
    t.put("Sscr", 0x1D4AE);  // MATHEMATICAL SCRIPT CAPITAL S 
    t.put("Star", 0x022C6);  // STAR OPERATOR 
    t.put("Sub", 0x022D0);  // DOUBLE SUBSET 
    t.put("Subset", 0x022D0);  // DOUBLE SUBSET 
    t.put("SubsetEqual", 0x02286);  // SUBSET OF OR EQUAL TO 
    t.put("Succeeds", 0x0227B);  // SUCCEEDS 
    t.put("SucceedsEqual", 0x02AB0);  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN 
    t.put("SucceedsSlantEqual", 0x0227D);  // SUCCEEDS OR EQUAL TO 
    t.put("SucceedsTilde", 0x0227F);  // SUCCEEDS OR EQUIVALENT TO 
    t.put("SuchThat", 0x0220B);  // CONTAINS AS MEMBER 
    t.put("Sum", 0x02211);  // N-ARY SUMMATION 
    t.put("Sup", 0x022D1);  // DOUBLE SUPERSET 
    t.put("Superset", 0x02283);  // SUPERSET OF 
    t.put("SupersetEqual", 0x02287);  // SUPERSET OF OR EQUAL TO 
    t.put("Supset", 0x022D1);  // DOUBLE SUPERSET 
    t.put("THORN", 0x000DE);  // LATIN CAPITAL LETTER THORN 
    t.put("THgr", 0x00398);  // GREEK CAPITAL LETTER THETA 
    t.put("TRADE", 0x02122);  // TRADE MARK SIGN 
    t.put("TSHcy", 0x0040B);  // CYRILLIC CAPITAL LETTER TSHE 
    t.put("TScy", 0x00426);  // CYRILLIC CAPITAL LETTER TSE 
    t.put("Tab", 0x00009);  // CHARACTER TABULATION 
    t.put("Tau", 0x003A4);  // GREEK CAPITAL LETTER TAU 
    t.put("Tcaron", 0x00164);  // LATIN CAPITAL LETTER T WITH CARON 
    t.put("Tcedil", 0x00162);  // LATIN CAPITAL LETTER T WITH CEDILLA 
    t.put("Tcy", 0x00422);  // CYRILLIC CAPITAL LETTER TE 
    t.put("Tfr", 0x1D517);  // MATHEMATICAL FRAKTUR CAPITAL T 
    t.put("Tgr", 0x003A4);  // GREEK CAPITAL LETTER TAU 
    t.put("Therefore", 0x02234);  // THEREFORE 
    t.put("Theta", 0x00398);  // GREEK CAPITAL LETTER THETA 
    t.put("ThickSpace", 0x0205F, 0x0200A);  // space of width 5/18 em 
    t.put("ThinSpace", 0x02009);  // THIN SPACE 
    t.put("Tilde", 0x0223C);  // TILDE OPERATOR 
    t.put("TildeEqual", 0x02243);  // ASYMPTOTICALLY EQUAL TO 
    t.put("TildeFullEqual", 0x02245);  // APPROXIMATELY EQUAL TO 
    t.put("TildeTilde", 0x02248);  // ALMOST EQUAL TO 
    t.put("Topf", 0x1D54B);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL T 
    t.put("TripleDot" , 0x020DB);  // COMBINING THREE DOTS ABOVE 
    t.put("Tscr", 0x1D4AF);  // MATHEMATICAL SCRIPT CAPITAL T 
    t.put("Tstrok", 0x00166);  // LATIN CAPITAL LETTER T WITH STROKE 
    t.put("Uacgr", 0x0038E);  // GREEK CAPITAL LETTER UPSILON WITH TONOS 
    t.put("Uacute", 0x000DA);  // LATIN CAPITAL LETTER U WITH ACUTE 
    t.put("Uarr", 0x0219F);  // UPWARDS TWO HEADED ARROW 
    t.put("Uarrocir", 0x02949);  // UPWARDS TWO-HEADED ARROW FROM SMALL CIRCLE 
    t.put("Ubrcy", 0x0040E);  // CYRILLIC CAPITAL LETTER SHORT U 
    t.put("Ubreve", 0x0016C);  // LATIN CAPITAL LETTER U WITH BREVE 
    t.put("Ucirc", 0x000DB);  // LATIN CAPITAL LETTER U WITH CIRCUMFLEX 
    t.put("Ucy", 0x00423);  // CYRILLIC CAPITAL LETTER U 
    t.put("Udblac", 0x00170);  // LATIN CAPITAL LETTER U WITH DOUBLE ACUTE 
    t.put("Udigr", 0x003AB);  // GREEK CAPITAL LETTER UPSILON WITH DIALYTIKA 
    t.put("Ufr", 0x1D518);  // MATHEMATICAL FRAKTUR CAPITAL U 
    t.put("Ugr", 0x003A5);  // GREEK CAPITAL LETTER UPSILON 
    t.put("Ugrave", 0x000D9);  // LATIN CAPITAL LETTER U WITH GRAVE 
    t.put("Umacr", 0x0016A);  // LATIN CAPITAL LETTER U WITH MACRON 
    t.put("UnderBar", 0x0005F);  // LOW LINE 
    t.put("UnderBrace", 0x023DF);  // BOTTOM CURLY BRACKET 
    t.put("UnderBracket", 0x023B5);  // BOTTOM SQUARE BRACKET 
    t.put("UnderParenthesis", 0x023DD);  // BOTTOM PARENTHESIS 
    t.put("Union", 0x022C3);  // N-ARY UNION 
    t.put("UnionPlus", 0x0228E);  // MULTISET UNION 
    t.put("Uogon", 0x00172);  // LATIN CAPITAL LETTER U WITH OGONEK 
    t.put("Uopf", 0x1D54C);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL U 
    t.put("UpArrow", 0x02191);  // UPWARDS ARROW 
    t.put("UpArrowBar", 0x02912);  // UPWARDS ARROW TO BAR 
    t.put("UpArrowDownArrow", 0x021C5);  // UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW 
    t.put("UpDownArrow", 0x02195);  // UP DOWN ARROW 
    t.put("UpEquilibrium", 0x0296E);  // UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT 
    t.put("UpTee", 0x022A5);  // UP TACK 
    t.put("UpTeeArrow", 0x021A5);  // UPWARDS ARROW FROM BAR 
    t.put("Uparrow", 0x021D1);  // UPWARDS DOUBLE ARROW 
    t.put("Updownarrow", 0x021D5);  // UP DOWN DOUBLE ARROW 
    t.put("UpperLeftArrow", 0x02196);  // NORTH WEST ARROW 
    t.put("UpperRightArrow", 0x02197);  // NORTH EAST ARROW 
    t.put("Upsi", 0x003D2);  // GREEK UPSILON WITH HOOK SYMBOL 
    t.put("Upsilon", 0x003A5);  // GREEK CAPITAL LETTER UPSILON 
    t.put("Uring", 0x0016E);  // LATIN CAPITAL LETTER U WITH RING ABOVE 
    t.put("Uscr", 0x1D4B0);  // MATHEMATICAL SCRIPT CAPITAL U 
    t.put("Utilde", 0x00168);  // LATIN CAPITAL LETTER U WITH TILDE 
    t.put("Uuml", 0x000DC);  // LATIN CAPITAL LETTER U WITH DIAERESIS 
    t.put("VDash", 0x022AB);  // DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE 
    t.put("Vbar", 0x02AEB);  // DOUBLE UP TACK 
    t.put("Vcy", 0x00412);  // CYRILLIC CAPITAL LETTER VE 
    t.put("Vdash", 0x022A9);  // FORCES 
    t.put("Vdashl", 0x02AE6);  // LONG DASH FROM LEFT MEMBER OF DOUBLE VERTICAL 
    t.put("Vee", 0x022C1);  // N-ARY LOGICAL OR 
    t.put("Verbar", 0x02016);  // DOUBLE VERTICAL LINE 
    t.put("Vert", 0x02016);  // DOUBLE VERTICAL LINE 
    t.put("VerticalBar", 0x02223);  // DIVIDES 
    t.put("VerticalLine", 0x0007C);  // VERTICAL LINE 
    t.put("VerticalSeparator", 0x02758);  // LIGHT VERTICAL BAR 
    t.put("VerticalTilde", 0x02240);  // WREATH PRODUCT 
    t.put("VeryThinSpace", 0x0200A);  // HAIR SPACE 
    t.put("Vfr", 0x1D519);  // MATHEMATICAL FRAKTUR CAPITAL V 
    t.put("Vopf", 0x1D54D);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL V 
    t.put("Vscr", 0x1D4B1);  // MATHEMATICAL SCRIPT CAPITAL V 
    t.put("Vvdash", 0x022AA);  // TRIPLE VERTICAL BAR RIGHT TURNSTILE 
    t.put("Wcirc", 0x00174);  // LATIN CAPITAL LETTER W WITH CIRCUMFLEX 
    t.put("Wedge", 0x022C0);  // N-ARY LOGICAL AND 
    t.put("Wfr", 0x1D51A);  // MATHEMATICAL FRAKTUR CAPITAL W 
    t.put("Wopf", 0x1D54E);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL W 
    t.put("Wscr", 0x1D4B2);  // MATHEMATICAL SCRIPT CAPITAL W 
    t.put("Xfr", 0x1D51B);  // MATHEMATICAL FRAKTUR CAPITAL X 
    t.put("Xgr", 0x0039E);  // GREEK CAPITAL LETTER XI 
    t.put("Xi", 0x0039E);  // GREEK CAPITAL LETTER XI 
    t.put("Xopf", 0x1D54F);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL X 
    t.put("Xscr", 0x1D4B3);  // MATHEMATICAL SCRIPT CAPITAL X 
    t.put("YAcy", 0x0042F);  // CYRILLIC CAPITAL LETTER YA 
    t.put("YIcy", 0x00407);  // CYRILLIC CAPITAL LETTER YI 
    t.put("YUcy", 0x0042E);  // CYRILLIC CAPITAL LETTER YU 
    t.put("Yacute", 0x000DD);  // LATIN CAPITAL LETTER Y WITH ACUTE 
    t.put("Ycirc", 0x00176);  // LATIN CAPITAL LETTER Y WITH CIRCUMFLEX 
    t.put("Ycy", 0x0042B);  // CYRILLIC CAPITAL LETTER YERU 
    t.put("Yfr", 0x1D51C);  // MATHEMATICAL FRAKTUR CAPITAL Y 
    t.put("Yopf", 0x1D550);  // MATHEMATICAL DOUBLE-STRUCK CAPITAL Y 
    t.put("Yscr", 0x1D4B4);  // MATHEMATICAL SCRIPT CAPITAL Y 
    t.put("Yuml", 0x00178);  // LATIN CAPITAL LETTER Y WITH DIAERESIS 
    t.put("ZHcy", 0x00416);  // CYRILLIC CAPITAL LETTER ZHE 
    t.put("Zacute", 0x00179);  // LATIN CAPITAL LETTER Z WITH ACUTE 
    t.put("Zcaron", 0x0017D);  // LATIN CAPITAL LETTER Z WITH CARON 
    t.put("Zcy", 0x00417);  // CYRILLIC CAPITAL LETTER ZE 
    t.put("Zdot", 0x0017B);  // LATIN CAPITAL LETTER Z WITH DOT ABOVE 
    t.put("ZeroWidthSpace", 0x0200B);  // ZERO WIDTH SPACE 
    t.put("Zeta", 0x00396);  // GREEK CAPITAL LETTER ZETA 
    t.put("Zfr", 0x02128);  // BLACK-LETTER CAPITAL Z 
    t.put("Zgr", 0x00396);  // GREEK CAPITAL LETTER ZETA 
    t.put("Zopf", 0x02124);  // DOUBLE-STRUCK CAPITAL Z 
    t.put("Zscr", 0x1D4B5);  // MATHEMATICAL SCRIPT CAPITAL Z 
    t.put("aacgr", 0x003AC);  // GREEK SMALL LETTER ALPHA WITH TONOS 
    t.put("aacute", 0x000E1);  // LATIN SMALL LETTER A WITH ACUTE 
    t.put("abreve", 0x00103);  // LATIN SMALL LETTER A WITH BREVE 
    t.put("ac", 0x0223E);  // INVERTED LAZY S 
    t.put("acE", 0x0223E, 0x00333);  // INVERTED LAZY S with double underline 
    t.put("acd", 0x0223F);  // SINE WAVE 
    t.put("acirc", 0x000E2);  // LATIN SMALL LETTER A WITH CIRCUMFLEX 
    t.put("acute", 0x000B4);  // ACUTE ACCENT 
    t.put("acy", 0x00430);  // CYRILLIC SMALL LETTER A 
    t.put("aelig", 0x000E6);  // LATIN SMALL LETTER AE 
    t.put("af", 0x02061);  // FUNCTION APPLICATION 
    t.put("afr", 0x1D51E);  // MATHEMATICAL FRAKTUR SMALL A 
    t.put("agr", 0x003B1);  // GREEK SMALL LETTER ALPHA 
    t.put("agrave", 0x000E0);  // LATIN SMALL LETTER A WITH GRAVE 
    t.put("alefsym", 0x02135);  // ALEF SYMBOL 
    t.put("aleph", 0x02135);  // ALEF SYMBOL 
    t.put("alpha", 0x003B1);  // GREEK SMALL LETTER ALPHA 
    t.put("amacr", 0x00101);  // LATIN SMALL LETTER A WITH MACRON 
    t.put("amalg", 0x02A3F);  // AMALGAMATION OR COPRODUCT 
    t.put("amp", 38);  // AMPERSAND 
    t.put("and", 0x02227);  // LOGICAL AND 
    t.put("andand", 0x02A55);  // TWO INTERSECTING LOGICAL AND 
    t.put("andd", 0x02A5C);  // LOGICAL AND WITH HORIZONTAL DASH 
    t.put("andslope", 0x02A58);  // SLOPING LARGE AND 
    t.put("andv", 0x02A5A);  // LOGICAL AND WITH MIDDLE STEM 
    t.put("ang", 0x02220);  // ANGLE 
    t.put("ange", 0x029A4);  // ANGLE WITH UNDERBAR 
    t.put("angle", 0x02220);  // ANGLE 
    t.put("angmsd", 0x02221);  // MEASURED ANGLE 
    t.put("angmsdaa", 0x029A8);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND RIGHT 
    t.put("angmsdab", 0x029A9);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING UP AND LEFT 
    t.put("angmsdac", 0x029AA);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND RIGHT 
    t.put("angmsdad", 0x029AB);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING DOWN AND LEFT 
    t.put("angmsdae", 0x029AC);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND UP 
    t.put("angmsdaf", 0x029AD);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND UP 
    t.put("angmsdag", 0x029AE);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING RIGHT AND DOWN 
    t.put("angmsdah", 0x029AF);  // MEASURED ANGLE WITH OPEN ARM ENDING IN ARROW POINTING LEFT AND DOWN 
    t.put("angrt", 0x0221F);  // RIGHT ANGLE 
    t.put("angrtvb", 0x022BE);  // RIGHT ANGLE WITH ARC 
    t.put("angrtvbd", 0x0299D);  // MEASURED RIGHT ANGLE WITH DOT 
    t.put("angsph", 0x02222);  // SPHERICAL ANGLE 
    t.put("angst", 0x000C5);  // LATIN CAPITAL LETTER A WITH RING ABOVE 
    t.put("angzarr", 0x0237C);  // RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW 
    t.put("aogon", 0x00105);  // LATIN SMALL LETTER A WITH OGONEK 
    t.put("aopf", 0x1D552);  // MATHEMATICAL DOUBLE-STRUCK SMALL A 
    t.put("ap", 0x02248);  // ALMOST EQUAL TO 
    t.put("apE", 0x02A70);  // APPROXIMATELY EQUAL OR EQUAL TO 
    t.put("apacir", 0x02A6F);  // ALMOST EQUAL TO WITH CIRCUMFLEX ACCENT 
    t.put("ape", 0x0224A);  // ALMOST EQUAL OR EQUAL TO 
    t.put("apid", 0x0224B);  // TRIPLE TILDE 
    t.put("apos", 0x00027);  // APOSTROPHE 
    t.put("approx", 0x02248);  // ALMOST EQUAL TO 
    t.put("approxeq", 0x0224A);  // ALMOST EQUAL OR EQUAL TO 
    t.put("aring", 0x000E5);  // LATIN SMALL LETTER A WITH RING ABOVE 
    t.put("ascr", 0x1D4B6);  // MATHEMATICAL SCRIPT SMALL A 
    t.put("ast", 0x0002A);  // ASTERISK 
    t.put("asymp", 0x02248);  // ALMOST EQUAL TO 
    t.put("asympeq", 0x0224D);  // EQUIVALENT TO 
    t.put("atilde", 0x000E3);  // LATIN SMALL LETTER A WITH TILDE 
    t.put("auml", 0x000E4);  // LATIN SMALL LETTER A WITH DIAERESIS 
    t.put("awconint", 0x02233);  // ANTICLOCKWISE CONTOUR INTEGRAL 
    t.put("awint", 0x02A11);  // ANTICLOCKWISE INTEGRATION 
    t.put("b.Delta", 0x1D6AB);  // MATHEMATICAL BOLD CAPITAL DELTA 
    t.put("b.Gamma", 0x1D6AA);  // MATHEMATICAL BOLD CAPITAL GAMMA 
    t.put("b.Gammad", 0x1D7CA);  // MATHEMATICAL BOLD CAPITAL DIGAMMA 
    t.put("b.Lambda", 0x1D6B2);  // MATHEMATICAL BOLD CAPITAL LAMDA 
    t.put("b.Omega", 0x1D6C0);  // MATHEMATICAL BOLD CAPITAL OMEGA 
    t.put("b.Phi", 0x1D6BD);  // MATHEMATICAL BOLD CAPITAL PHI 
    t.put("b.Pi", 0x1D6B7);  // MATHEMATICAL BOLD CAPITAL PI 
    t.put("b.Psi", 0x1D6BF);  // MATHEMATICAL BOLD CAPITAL PSI 
    t.put("b.Sigma", 0x1D6BA);  // MATHEMATICAL BOLD CAPITAL SIGMA 
    t.put("b.Theta", 0x1D6AF);  // MATHEMATICAL BOLD CAPITAL THETA 
    t.put("b.Upsi", 0x1D6BC);  // MATHEMATICAL BOLD CAPITAL UPSILON 
    t.put("b.Xi", 0x1D6B5);  // MATHEMATICAL BOLD CAPITAL XI 
    t.put("b.alpha", 0x1D6C2);  // MATHEMATICAL BOLD SMALL ALPHA 
    t.put("b.beta", 0x1D6C3);  // MATHEMATICAL BOLD SMALL BETA 
    t.put("b.chi", 0x1D6D8);  // MATHEMATICAL BOLD SMALL CHI 
    t.put("b.delta", 0x1D6C5);  // MATHEMATICAL BOLD SMALL DELTA 
    t.put("b.epsi", 0x1D6C6);  // MATHEMATICAL BOLD SMALL EPSILON 
    t.put("b.epsiv", 0x1D6DC);  // MATHEMATICAL BOLD EPSILON SYMBOL 
    t.put("b.eta", 0x1D6C8);  // MATHEMATICAL BOLD SMALL ETA 
    t.put("b.gamma", 0x1D6C4);  // MATHEMATICAL BOLD SMALL GAMMA 
    t.put("b.gammad", 0x1D7CB);  // MATHEMATICAL BOLD SMALL DIGAMMA 
    t.put("b.iota", 0x1D6CA);  // MATHEMATICAL BOLD SMALL IOTA 
    t.put("b.kappa", 0x1D6CB);  // MATHEMATICAL BOLD SMALL KAPPA 
    t.put("b.kappav", 0x1D6DE);  // MATHEMATICAL BOLD KAPPA SYMBOL 
    t.put("b.lambda", 0x1D6CC);  // MATHEMATICAL BOLD SMALL LAMDA 
    t.put("b.mu", 0x1D6CD);  // MATHEMATICAL BOLD SMALL MU 
    t.put("b.nu", 0x1D6CE);  // MATHEMATICAL BOLD SMALL NU 
    t.put("b.omega", 0x1D6DA);  // MATHEMATICAL BOLD SMALL OMEGA 
    t.put("b.phi", 0x1D6D7);  // MATHEMATICAL BOLD SMALL PHI 
    t.put("b.phiv", 0x1D6DF);  // MATHEMATICAL BOLD PHI SYMBOL 
    t.put("b.pi", 0x1D6D1);  // MATHEMATICAL BOLD SMALL PI 
    t.put("b.piv", 0x1D6E1);  // MATHEMATICAL BOLD PI SYMBOL 
    t.put("b.psi", 0x1D6D9);  // MATHEMATICAL BOLD SMALL PSI 
    t.put("b.rho", 0x1D6D2);  // MATHEMATICAL BOLD SMALL RHO 
    t.put("b.rhov", 0x1D6E0);  // MATHEMATICAL BOLD RHO SYMBOL 
    t.put("b.sigma", 0x1D6D4);  // MATHEMATICAL BOLD SMALL SIGMA 
    t.put("b.sigmav", 0x1D6D3);  // MATHEMATICAL BOLD SMALL FINAL SIGMA 
    t.put("b.tau", 0x1D6D5);  // MATHEMATICAL BOLD SMALL TAU 
    t.put("b.thetas", 0x1D6C9);  // MATHEMATICAL BOLD SMALL THETA 
    t.put("b.thetav", 0x1D6DD);  // MATHEMATICAL BOLD THETA SYMBOL 
    t.put("b.upsi", 0x1D6D6);  // MATHEMATICAL BOLD SMALL UPSILON 
    t.put("b.xi", 0x1D6CF);  // MATHEMATICAL BOLD SMALL XI 
    t.put("b.zeta", 0x1D6C7);  // MATHEMATICAL BOLD SMALL ZETA 
    t.put("bNot", 0x02AED);  // REVERSED DOUBLE STROKE NOT SIGN 
    t.put("backcong", 0x0224C);  // ALL EQUAL TO 
    t.put("backepsilon", 0x003F6);  // GREEK REVERSED LUNATE EPSILON SYMBOL 
    t.put("backprime", 0x02035);  // REVERSED PRIME 
    t.put("backsim", 0x0223D);  // REVERSED TILDE 
    t.put("backsimeq", 0x022CD);  // REVERSED TILDE EQUALS 
    t.put("barvee", 0x022BD);  // NOR 
    t.put("barwed", 0x02305);  // PROJECTIVE 
    t.put("barwedge", 0x02305);  // PROJECTIVE 
    t.put("bbrk", 0x023B5);  // BOTTOM SQUARE BRACKET 
    t.put("bbrktbrk", 0x023B6);  // BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET 
    t.put("bcong", 0x0224C);  // ALL EQUAL TO 
    t.put("bcy", 0x00431);  // CYRILLIC SMALL LETTER BE 
    t.put("bdquo", 0x0201E);  // DOUBLE LOW-9 QUOTATION MARK 
    t.put("becaus", 0x02235);  // BECAUSE 
    t.put("because", 0x02235);  // BECAUSE 
    t.put("bemptyv", 0x029B0);  // REVERSED EMPTY SET 
    t.put("bepsi", 0x003F6);  // GREEK REVERSED LUNATE EPSILON SYMBOL 
    t.put("bernou", 0x0212C);  // SCRIPT CAPITAL B 
    t.put("beta", 0x003B2);  // GREEK SMALL LETTER BETA 
    t.put("beth", 0x02136);  // BET SYMBOL 
    t.put("between", 0x0226C);  // BETWEEN 
    t.put("bfr", 0x1D51F);  // MATHEMATICAL FRAKTUR SMALL B 
    t.put("bgr", 0x003B2);  // GREEK SMALL LETTER BETA 
    t.put("bigcap", 0x022C2);  // N-ARY INTERSECTION 
    t.put("bigcirc", 0x025EF);  // LARGE CIRCLE 
    t.put("bigcup", 0x022C3);  // N-ARY UNION 
    t.put("bigodot", 0x02A00);  // N-ARY CIRCLED DOT OPERATOR 
    t.put("bigoplus", 0x02A01);  // N-ARY CIRCLED PLUS OPERATOR 
    t.put("bigotimes", 0x02A02);  // N-ARY CIRCLED TIMES OPERATOR 
    t.put("bigsqcup", 0x02A06);  // N-ARY SQUARE UNION OPERATOR 
    t.put("bigstar", 0x02605);  // BLACK STAR 
    t.put("bigtriangledown", 0x025BD);  // WHITE DOWN-POINTING TRIANGLE 
    t.put("bigtriangleup", 0x025B3);  // WHITE UP-POINTING TRIANGLE 
    t.put("biguplus", 0x02A04);  // N-ARY UNION OPERATOR WITH PLUS 
    t.put("bigvee", 0x022C1);  // N-ARY LOGICAL OR 
    t.put("bigwedge", 0x022C0);  // N-ARY LOGICAL AND 
    t.put("bkarow", 0x0290D);  // RIGHTWARDS DOUBLE DASH ARROW 
    t.put("blacklozenge", 0x029EB);  // BLACK LOZENGE 
    t.put("blacksquare", 0x025AA);  // BLACK SMALL SQUARE 
    t.put("blacktriangle", 0x025B4);  // BLACK UP-POINTING SMALL TRIANGLE 
    t.put("blacktriangledown", 0x025BE);  // BLACK DOWN-POINTING SMALL TRIANGLE 
    t.put("blacktriangleleft", 0x025C2);  // BLACK LEFT-POINTING SMALL TRIANGLE 
    t.put("blacktriangleright", 0x025B8);  // BLACK RIGHT-POINTING SMALL TRIANGLE 
    t.put("blank", 0x02423);  // OPEN BOX 
    t.put("blk12", 0x02592);  // MEDIUM SHADE 
    t.put("blk14", 0x02591);  // LIGHT SHADE 
    t.put("blk34", 0x02593);  // DARK SHADE 
    t.put("block", 0x02588);  // FULL BLOCK 
    t.put("bne", 0x0003D, 0x020E5);  // EQUALS SIGN with reverse slash 
    t.put("bnequiv", 0x02261, 0x020E5);  // IDENTICAL TO with reverse slash 
    t.put("bnot", 0x02310);  // REVERSED NOT SIGN 
    t.put("bopf", 0x1D553);  // MATHEMATICAL DOUBLE-STRUCK SMALL B 
    t.put("bot", 0x022A5);  // UP TACK 
    t.put("bottom", 0x022A5);  // UP TACK 
    t.put("bowtie", 0x022C8);  // BOWTIE 
    t.put("boxDL", 0x02557);  // BOX DRAWINGS DOUBLE DOWN AND LEFT 
    t.put("boxDR", 0x02554);  // BOX DRAWINGS DOUBLE DOWN AND RIGHT 
    t.put("boxDl", 0x02556);  // BOX DRAWINGS DOWN DOUBLE AND LEFT SINGLE 
    t.put("boxDr", 0x02553);  // BOX DRAWINGS DOWN DOUBLE AND RIGHT SINGLE 
    t.put("boxH", 0x02550);  // BOX DRAWINGS DOUBLE HORIZONTAL 
    t.put("boxHD", 0x02566);  // BOX DRAWINGS DOUBLE DOWN AND HORIZONTAL 
    t.put("boxHU", 0x02569);  // BOX DRAWINGS DOUBLE UP AND HORIZONTAL 
    t.put("boxHd", 0x02564);  // BOX DRAWINGS DOWN SINGLE AND HORIZONTAL DOUBLE 
    t.put("boxHu", 0x02567);  // BOX DRAWINGS UP SINGLE AND HORIZONTAL DOUBLE 
    t.put("boxUL", 0x0255D);  // BOX DRAWINGS DOUBLE UP AND LEFT 
    t.put("boxUR", 0x0255A);  // BOX DRAWINGS DOUBLE UP AND RIGHT 
    t.put("boxUl", 0x0255C);  // BOX DRAWINGS UP DOUBLE AND LEFT SINGLE 
    t.put("boxUr", 0x02559);  // BOX DRAWINGS UP DOUBLE AND RIGHT SINGLE 
    t.put("boxV", 0x02551);  // BOX DRAWINGS DOUBLE VERTICAL 
    t.put("boxVH", 0x0256C);  // BOX DRAWINGS DOUBLE VERTICAL AND HORIZONTAL 
    t.put("boxVL", 0x02563);  // BOX DRAWINGS DOUBLE VERTICAL AND LEFT 
    t.put("boxVR", 0x02560);  // BOX DRAWINGS DOUBLE VERTICAL AND RIGHT 
    t.put("boxVh", 0x0256B);  // BOX DRAWINGS VERTICAL DOUBLE AND HORIZONTAL SINGLE 
    t.put("boxVl", 0x02562);  // BOX DRAWINGS VERTICAL DOUBLE AND LEFT SINGLE 
    t.put("boxVr", 0x0255F);  // BOX DRAWINGS VERTICAL DOUBLE AND RIGHT SINGLE 
    t.put("boxbox", 0x029C9);  // TWO JOINED SQUARES 
    t.put("boxdL", 0x02555);  // BOX DRAWINGS DOWN SINGLE AND LEFT DOUBLE 
    t.put("boxdR", 0x02552);  // BOX DRAWINGS DOWN SINGLE AND RIGHT DOUBLE 
    t.put("boxdl", 0x02510);  // BOX DRAWINGS LIGHT DOWN AND LEFT 
    t.put("boxdr", 0x0250C);  // BOX DRAWINGS LIGHT DOWN AND RIGHT 
    t.put("boxh", 0x02500);  // BOX DRAWINGS LIGHT HORIZONTAL 
    t.put("boxhD", 0x02565);  // BOX DRAWINGS DOWN DOUBLE AND HORIZONTAL SINGLE 
    t.put("boxhU", 0x02568);  // BOX DRAWINGS UP DOUBLE AND HORIZONTAL SINGLE 
    t.put("boxhd", 0x0252C);  // BOX DRAWINGS LIGHT DOWN AND HORIZONTAL 
    t.put("boxhu", 0x02534);  // BOX DRAWINGS LIGHT UP AND HORIZONTAL 
    t.put("boxminus", 0x0229F);  // SQUARED MINUS 
    t.put("boxplus", 0x0229E);  // SQUARED PLUS 
    t.put("boxtimes", 0x022A0);  // SQUARED TIMES 
    t.put("boxuL", 0x0255B);  // BOX DRAWINGS UP SINGLE AND LEFT DOUBLE 
    t.put("boxuR", 0x02558);  // BOX DRAWINGS UP SINGLE AND RIGHT DOUBLE 
    t.put("boxul", 0x02518);  // BOX DRAWINGS LIGHT UP AND LEFT 
    t.put("boxur", 0x02514);  // BOX DRAWINGS LIGHT UP AND RIGHT 
    t.put("boxv", 0x02502);  // BOX DRAWINGS LIGHT VERTICAL 
    t.put("boxvH", 0x0256A);  // BOX DRAWINGS VERTICAL SINGLE AND HORIZONTAL DOUBLE 
    t.put("boxvL", 0x02561);  // BOX DRAWINGS VERTICAL SINGLE AND LEFT DOUBLE 
    t.put("boxvR", 0x0255E);  // BOX DRAWINGS VERTICAL SINGLE AND RIGHT DOUBLE 
    t.put("boxvh", 0x0253C);  // BOX DRAWINGS LIGHT VERTICAL AND HORIZONTAL 
    t.put("boxvl", 0x02524);  // BOX DRAWINGS LIGHT VERTICAL AND LEFT 
    t.put("boxvr", 0x0251C);  // BOX DRAWINGS LIGHT VERTICAL AND RIGHT 
    t.put("bprime", 0x02035);  // REVERSED PRIME 
    t.put("breve", 0x002D8);  // BREVE 
    t.put("brvbar", 0x000A6);  // BROKEN BAR 
    t.put("bscr", 0x1D4B7);  // MATHEMATICAL SCRIPT SMALL B 
    t.put("bsemi", 0x0204F);  // REVERSED SEMICOLON 
    t.put("bsim", 0x0223D);  // REVERSED TILDE 
    t.put("bsime", 0x022CD);  // REVERSED TILDE EQUALS 
    t.put("bsol", 0x0005C);  // REVERSE SOLIDUS 
    t.put("bsolb", 0x029C5);  // SQUARED FALLING DIAGONAL SLASH 
    t.put("bsolhsub", 0x027C8);  // REVERSE SOLIDUS PRECEDING SUBSET 
    t.put("bull", 0x02022);  // BULLET 
    t.put("bullet", 0x02022);  // BULLET 
    t.put("bump", 0x0224E);  // GEOMETRICALLY EQUIVALENT TO 
    t.put("bumpE", 0x02AAE);  // EQUALS SIGN WITH BUMPY ABOVE 
    t.put("bumpe", 0x0224F);  // DIFFERENCE BETWEEN 
    t.put("bumpeq", 0x0224F);  // DIFFERENCE BETWEEN 
    t.put("cacute", 0x00107);  // LATIN SMALL LETTER C WITH ACUTE 
    t.put("cap", 0x02229);  // INTERSECTION 
    t.put("capand", 0x02A44);  // INTERSECTION WITH LOGICAL AND 
    t.put("capbrcup", 0x02A49);  // INTERSECTION ABOVE BAR ABOVE UNION 
    t.put("capcap", 0x02A4B);  // INTERSECTION BESIDE AND JOINED WITH INTERSECTION 
    t.put("capcup", 0x02A47);  // INTERSECTION ABOVE UNION 
    t.put("capdot", 0x02A40);  // INTERSECTION WITH DOT 
    t.put("caps", 0x02229, 0x0FE00);  // INTERSECTION with serifs 
    t.put("caret", 0x02041);  // CARET INSERTION POINT 
    t.put("caron", 0x002C7);  // CARON 
    t.put("ccaps", 0x02A4D);  // CLOSED INTERSECTION WITH SERIFS 
    t.put("ccaron", 0x0010D);  // LATIN SMALL LETTER C WITH CARON 
    t.put("ccedil", 0x000E7);  // LATIN SMALL LETTER C WITH CEDILLA 
    t.put("ccirc", 0x00109);  // LATIN SMALL LETTER C WITH CIRCUMFLEX 
    t.put("ccups", 0x02A4C);  // CLOSED UNION WITH SERIFS 
    t.put("ccupssm", 0x02A50);  // CLOSED UNION WITH SERIFS AND SMASH PRODUCT 
    t.put("cdot", 0x0010B);  // LATIN SMALL LETTER C WITH DOT ABOVE 
    t.put("cedil", 0x000B8);  // CEDILLA 
    t.put("cemptyv", 0x029B2);  // EMPTY SET WITH SMALL CIRCLE ABOVE 
    t.put("cent", 0x000A2);  // CENT SIGN 
    t.put("centerdot", 0x000B7);  // MIDDLE DOT 
    t.put("cfr", 0x1D520);  // MATHEMATICAL FRAKTUR SMALL C 
    t.put("chcy", 0x00447);  // CYRILLIC SMALL LETTER CHE 
    t.put("check", 0x02713);  // CHECK MARK 
    t.put("checkmark", 0x02713);  // CHECK MARK 
    t.put("chi", 0x003C7);  // GREEK SMALL LETTER CHI 
    t.put("cir", 0x025CB);  // WHITE CIRCLE 
    t.put("cirE", 0x029C3);  // CIRCLE WITH TWO HORIZONTAL STROKES TO THE RIGHT 
    t.put("circ", 0x002C6);  // MODIFIER LETTER CIRCUMFLEX ACCENT 
    t.put("circeq", 0x02257);  // RING EQUAL TO 
    t.put("circlearrowleft", 0x021BA);  // ANTICLOCKWISE OPEN CIRCLE ARROW 
    t.put("circlearrowright", 0x021BB);  // CLOCKWISE OPEN CIRCLE ARROW 
    t.put("circledR", 0x000AE);  // REGISTERED SIGN 
    t.put("circledS", 0x024C8);  // CIRCLED LATIN CAPITAL LETTER S 
    t.put("circledast", 0x0229B);  // CIRCLED ASTERISK OPERATOR 
    t.put("circledcirc", 0x0229A);  // CIRCLED RING OPERATOR 
    t.put("circleddash", 0x0229D);  // CIRCLED DASH 
    t.put("cire", 0x02257);  // RING EQUAL TO 
    t.put("cirfnint", 0x02A10);  // CIRCULATION FUNCTION 
    t.put("cirmid", 0x02AEF);  // VERTICAL LINE WITH CIRCLE ABOVE 
    t.put("cirscir", 0x029C2);  // CIRCLE WITH SMALL CIRCLE TO THE RIGHT 
    t.put("clubs", 0x02663);  // BLACK CLUB SUIT 
    t.put("clubsuit", 0x02663);  // BLACK CLUB SUIT 
    t.put("colon", 0x0003A);  // COLON 
    t.put("colone", 0x02254);  // COLON EQUALS 
    t.put("coloneq", 0x02254);  // COLON EQUALS 
    t.put("comma", 0x0002C);  // COMMA 
    t.put("commat", 0x00040);  // COMMERCIAL AT 
    t.put("comp", 0x02201);  // COMPLEMENT 
    t.put("compfn", 0x02218);  // RING OPERATOR 
    t.put("complement", 0x02201);  // COMPLEMENT 
    t.put("complexes", 0x02102);  // DOUBLE-STRUCK CAPITAL C 
    t.put("cong", 0x02245);  // APPROXIMATELY EQUAL TO 
    t.put("congdot", 0x02A6D);  // CONGRUENT WITH DOT ABOVE 
    t.put("conint", 0x0222E);  // CONTOUR INTEGRAL 
    t.put("copf", 0x1D554);  // MATHEMATICAL DOUBLE-STRUCK SMALL C 
    t.put("coprod", 0x02210);  // N-ARY COPRODUCT 
    t.put("copy", 0x000A9);  // COPYRIGHT SIGN 
    t.put("copysr", 0x02117);  // SOUND RECORDING COPYRIGHT 
    t.put("crarr", 0x021B5);  // DOWNWARDS ARROW WITH CORNER LEFTWARDS 
    t.put("cross", 0x02717);  // BALLOT X 
    t.put("cscr", 0x1D4B8);  // MATHEMATICAL SCRIPT SMALL C 
    t.put("csub", 0x02ACF);  // CLOSED SUBSET 
    t.put("csube", 0x02AD1);  // CLOSED SUBSET OR EQUAL TO 
    t.put("csup", 0x02AD0);  // CLOSED SUPERSET 
    t.put("csupe", 0x02AD2);  // CLOSED SUPERSET OR EQUAL TO 
    t.put("ctdot", 0x022EF);  // MIDLINE HORIZONTAL ELLIPSIS 
    t.put("cudarrl", 0x02938);  // RIGHT-SIDE ARC CLOCKWISE ARROW 
    t.put("cudarrr", 0x02935);  // ARROW POINTING RIGHTWARDS THEN CURVING DOWNWARDS 
    t.put("cuepr", 0x022DE);  // EQUAL TO OR PRECEDES 
    t.put("cuesc", 0x022DF);  // EQUAL TO OR SUCCEEDS 
    t.put("cularr", 0x021B6);  // ANTICLOCKWISE TOP SEMICIRCLE ARROW 
    t.put("cularrp", 0x0293D);  // TOP ARC ANTICLOCKWISE ARROW WITH PLUS 
    t.put("cup", 0x0222A);  // UNION 
    t.put("cupbrcap", 0x02A48);  // UNION ABOVE BAR ABOVE INTERSECTION 
    t.put("cupcap", 0x02A46);  // UNION ABOVE INTERSECTION 
    t.put("cupcup", 0x02A4A);  // UNION BESIDE AND JOINED WITH UNION 
    t.put("cupdot", 0x0228D);  // MULTISET MULTIPLICATION 
    t.put("cupor", 0x02A45);  // UNION WITH LOGICAL OR 
    t.put("cups", 0x0222A, 0x0FE00);  // UNION with serifs 
    t.put("curarr", 0x021B7);  // CLOCKWISE TOP SEMICIRCLE ARROW 
    t.put("curarrm", 0x0293C);  // TOP ARC CLOCKWISE ARROW WITH MINUS 
    t.put("curlyeqprec", 0x022DE);  // EQUAL TO OR PRECEDES 
    t.put("curlyeqsucc", 0x022DF);  // EQUAL TO OR SUCCEEDS 
    t.put("curlyvee", 0x022CE);  // CURLY LOGICAL OR 
    t.put("curlywedge", 0x022CF);  // CURLY LOGICAL AND 
    t.put("curren", 0x000A4);  // CURRENCY SIGN 
    t.put("curvearrowleft", 0x021B6);  // ANTICLOCKWISE TOP SEMICIRCLE ARROW 
    t.put("curvearrowright", 0x021B7);  // CLOCKWISE TOP SEMICIRCLE ARROW 
    t.put("cuvee", 0x022CE);  // CURLY LOGICAL OR 
    t.put("cuwed", 0x022CF);  // CURLY LOGICAL AND 
    t.put("cwconint", 0x02232);  // CLOCKWISE CONTOUR INTEGRAL 
    t.put("cwint", 0x02231);  // CLOCKWISE INTEGRAL 
    t.put("cylcty", 0x0232D);  // CYLINDRICITY 
    t.put("dArr", 0x021D3);  // DOWNWARDS DOUBLE ARROW 
    t.put("dHar", 0x02965);  // DOWNWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT 
    t.put("dagger", 0x02020);  // DAGGER 
    t.put("daleth", 0x02138);  // DALET SYMBOL 
    t.put("darr", 0x02193);  // DOWNWARDS ARROW 
    t.put("dash", 0x02010);  // HYPHEN 
    t.put("dashv", 0x022A3);  // LEFT TACK 
    t.put("dbkarow", 0x0290F);  // RIGHTWARDS TRIPLE DASH ARROW 
    t.put("dblac", 0x002DD);  // DOUBLE ACUTE ACCENT 
    t.put("dcaron", 0x0010F);  // LATIN SMALL LETTER D WITH CARON 
    t.put("dcy", 0x00434);  // CYRILLIC SMALL LETTER DE 
    t.put("dd", 0x02146);  // DOUBLE-STRUCK ITALIC SMALL D 
    t.put("ddagger", 0x02021);  // DOUBLE DAGGER 
    t.put("ddarr", 0x021CA);  // DOWNWARDS PAIRED ARROWS 
    t.put("ddotseq", 0x02A77);  // EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW 
    t.put("deg", 0x000B0);  // DEGREE SIGN 
    t.put("delta", 0x003B4);  // GREEK SMALL LETTER DELTA 
    t.put("demptyv", 0x029B1);  // EMPTY SET WITH OVERBAR 
    t.put("dfisht", 0x0297F);  // DOWN FISH TAIL 
    t.put("dfr", 0x1D521);  // MATHEMATICAL FRAKTUR SMALL D 
    t.put("dgr", 0x003B4);  // GREEK SMALL LETTER DELTA 
    t.put("dharl", 0x021C3);  // DOWNWARDS HARPOON WITH BARB LEFTWARDS 
    t.put("dharr", 0x021C2);  // DOWNWARDS HARPOON WITH BARB RIGHTWARDS 
    t.put("diam", 0x022C4);  // DIAMOND OPERATOR 
    t.put("diamond", 0x022C4);  // DIAMOND OPERATOR 
    t.put("diamondsuit", 0x02666);  // BLACK DIAMOND SUIT 
    t.put("diams", 0x02666);  // BLACK DIAMOND SUIT 
    t.put("die", 0x000A8);  // DIAERESIS 
    t.put("digamma", 0x003DD);  // GREEK SMALL LETTER DIGAMMA 
    t.put("disin", 0x022F2);  // ELEMENT OF WITH LONG HORIZONTAL STROKE 
    t.put("div", 0x000F7);  // DIVISION SIGN 
    t.put("divide", 0x000F7);  // DIVISION SIGN 
    t.put("divideontimes", 0x022C7);  // DIVISION TIMES 
    t.put("divonx", 0x022C7);  // DIVISION TIMES 
    t.put("djcy", 0x00452);  // CYRILLIC SMALL LETTER DJE 
    t.put("dlcorn", 0x0231E);  // BOTTOM LEFT CORNER 
    t.put("dlcrop", 0x0230D);  // BOTTOM LEFT CROP 
    t.put("dollar", 0x00024);  // DOLLAR SIGN 
    t.put("dopf", 0x1D555);  // MATHEMATICAL DOUBLE-STRUCK SMALL D 
    t.put("dot", 0x002D9);  // DOT ABOVE 
    t.put("doteq", 0x02250);  // APPROACHES THE LIMIT 
    t.put("doteqdot", 0x02251);  // GEOMETRICALLY EQUAL TO 
    t.put("dotminus", 0x02238);  // DOT MINUS 
    t.put("dotplus", 0x02214);  // DOT PLUS 
    t.put("dotsquare", 0x022A1);  // SQUARED DOT OPERATOR 
    t.put("doublebarwedge", 0x02306);  // PERSPECTIVE 
    t.put("downarrow", 0x02193);  // DOWNWARDS ARROW 
    t.put("downdownarrows", 0x021CA);  // DOWNWARDS PAIRED ARROWS 
    t.put("downharpoonleft", 0x021C3);  // DOWNWARDS HARPOON WITH BARB LEFTWARDS 
    t.put("downharpoonright", 0x021C2);  // DOWNWARDS HARPOON WITH BARB RIGHTWARDS 
    t.put("drbkarow", 0x02910);  // RIGHTWARDS TWO-HEADED TRIPLE DASH ARROW 
    t.put("drcorn", 0x0231F);  // BOTTOM RIGHT CORNER 
    t.put("drcrop", 0x0230C);  // BOTTOM RIGHT CROP 
    t.put("dscr", 0x1D4B9);  // MATHEMATICAL SCRIPT SMALL D 
    t.put("dscy", 0x00455);  // CYRILLIC SMALL LETTER DZE 
    t.put("dsol", 0x029F6);  // SOLIDUS WITH OVERBAR 
    t.put("dstrok", 0x00111);  // LATIN SMALL LETTER D WITH STROKE 
    t.put("dtdot", 0x022F1);  // DOWN RIGHT DIAGONAL ELLIPSIS 
    t.put("dtri", 0x025BF);  // WHITE DOWN-POINTING SMALL TRIANGLE 
    t.put("dtrif", 0x025BE);  // BLACK DOWN-POINTING SMALL TRIANGLE 
    t.put("duarr", 0x021F5);  // DOWNWARDS ARROW LEFTWARDS OF UPWARDS ARROW 
    t.put("duhar", 0x0296F);  // DOWNWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT 
    t.put("dwangle", 0x029A6);  // OBLIQUE ANGLE OPENING UP 
    t.put("dzcy", 0x0045F);  // CYRILLIC SMALL LETTER DZHE 
    t.put("dzigrarr", 0x027FF);  // LONG RIGHTWARDS SQUIGGLE ARROW 
    t.put("eDDot", 0x02A77);  // EQUALS SIGN WITH TWO DOTS ABOVE AND TWO DOTS BELOW 
    t.put("eDot", 0x02251);  // GEOMETRICALLY EQUAL TO 
    t.put("eacgr", 0x003AD);  // GREEK SMALL LETTER EPSILON WITH TONOS 
    t.put("eacute", 0x000E9);  // LATIN SMALL LETTER E WITH ACUTE 
    t.put("easter", 0x02A6E);  // EQUALS WITH ASTERISK 
    t.put("ecaron", 0x0011B);  // LATIN SMALL LETTER E WITH CARON 
    t.put("ecir", 0x02256);  // RING IN EQUAL TO 
    t.put("ecirc", 0x000EA);  // LATIN SMALL LETTER E WITH CIRCUMFLEX 
    t.put("ecolon", 0x02255);  // EQUALS COLON 
    t.put("ecy", 0x0044D);  // CYRILLIC SMALL LETTER E 
    t.put("edot", 0x00117);  // LATIN SMALL LETTER E WITH DOT ABOVE 
    t.put("ee", 0x02147);  // DOUBLE-STRUCK ITALIC SMALL E 
    t.put("eeacgr", 0x003AE);  // GREEK SMALL LETTER ETA WITH TONOS 
    t.put("eegr", 0x003B7);  // GREEK SMALL LETTER ETA 
    t.put("efDot", 0x02252);  // APPROXIMATELY EQUAL TO OR THE IMAGE OF 
    t.put("efr", 0x1D522);  // MATHEMATICAL FRAKTUR SMALL E 
    t.put("eg", 0x02A9A);  // DOUBLE-LINE EQUAL TO OR GREATER-THAN 
    t.put("egr", 0x003B5);  // GREEK SMALL LETTER EPSILON 
    t.put("egrave", 0x000E8);  // LATIN SMALL LETTER E WITH GRAVE 
    t.put("egs", 0x02A96);  // SLANTED EQUAL TO OR GREATER-THAN 
    t.put("egsdot", 0x02A98);  // SLANTED EQUAL TO OR GREATER-THAN WITH DOT INSIDE 
    t.put("el", 0x02A99);  // DOUBLE-LINE EQUAL TO OR LESS-THAN 
    t.put("elinters", 0x023E7);  // ELECTRICAL INTERSECTION 
    t.put("ell", 0x02113);  // SCRIPT SMALL L 
    t.put("els", 0x02A95);  // SLANTED EQUAL TO OR LESS-THAN 
    t.put("elsdot", 0x02A97);  // SLANTED EQUAL TO OR LESS-THAN WITH DOT INSIDE 
    t.put("emacr", 0x00113);  // LATIN SMALL LETTER E WITH MACRON 
    t.put("empty", 0x02205);  // EMPTY SET 
    t.put("emptyset", 0x02205);  // EMPTY SET 
    t.put("emptyv", 0x02205);  // EMPTY SET 
    t.put("emsp", 0x02003);  // EM SPACE 
    t.put("emsp13", 0x02004);  // THREE-PER-EM SPACE 
    t.put("emsp14", 0x02005);  // FOUR-PER-EM SPACE 
    t.put("eng", 0x0014B);  // LATIN SMALL LETTER ENG 
    t.put("ensp", 0x02002);  // EN SPACE 
    t.put("eogon", 0x00119);  // LATIN SMALL LETTER E WITH OGONEK 
    t.put("eopf", 0x1D556);  // MATHEMATICAL DOUBLE-STRUCK SMALL E 
    t.put("epar", 0x022D5);  // EQUAL AND PARALLEL TO 
    t.put("eparsl", 0x029E3);  // EQUALS SIGN AND SLANTED PARALLEL 
    t.put("eplus", 0x02A71);  // EQUALS SIGN ABOVE PLUS SIGN 
    t.put("epsi", 0x003B5);  // GREEK SMALL LETTER EPSILON 
    t.put("epsilon", 0x003B5);  // GREEK SMALL LETTER EPSILON 
    t.put("epsiv", 0x003F5);  // GREEK LUNATE EPSILON SYMBOL 
    t.put("eqcirc", 0x02256);  // RING IN EQUAL TO 
    t.put("eqcolon", 0x02255);  // EQUALS COLON 
    t.put("eqsim", 0x02242);  // MINUS TILDE 
    t.put("eqslantgtr", 0x02A96);  // SLANTED EQUAL TO OR GREATER-THAN 
    t.put("eqslantless", 0x02A95);  // SLANTED EQUAL TO OR LESS-THAN 
    t.put("equals", 0x0003D);  // EQUALS SIGN 
    t.put("equest", 0x0225F);  // QUESTIONED EQUAL TO 
    t.put("equiv", 0x02261);  // IDENTICAL TO 
    t.put("equivDD", 0x02A78);  // EQUIVALENT WITH FOUR DOTS ABOVE 
    t.put("eqvparsl", 0x029E5);  // IDENTICAL TO AND SLANTED PARALLEL 
    t.put("erDot", 0x02253);  // IMAGE OF OR APPROXIMATELY EQUAL TO 
    t.put("erarr", 0x02971);  // EQUALS SIGN ABOVE RIGHTWARDS ARROW 
    t.put("escr", 0x0212F);  // SCRIPT SMALL E 
    t.put("esdot", 0x02250);  // APPROACHES THE LIMIT 
    t.put("esim", 0x02242);  // MINUS TILDE 
    t.put("eta", 0x003B7);  // GREEK SMALL LETTER ETA 
    t.put("eth", 0x000F0);  // LATIN SMALL LETTER ETH 
    t.put("euml", 0x000EB);  // LATIN SMALL LETTER E WITH DIAERESIS 
    t.put("euro", 0x020AC);  // EURO SIGN 
    t.put("excl", 0x00021);  // EXCLAMATION MARK 
    t.put("exist", 0x02203);  // THERE EXISTS 
    t.put("expectation", 0x02130);  // SCRIPT CAPITAL E 
    t.put("exponentiale", 0x02147);  // DOUBLE-STRUCK ITALIC SMALL E 
    t.put("fallingdotseq", 0x02252);  // APPROXIMATELY EQUAL TO OR THE IMAGE OF 
    t.put("fcy", 0x00444);  // CYRILLIC SMALL LETTER EF 
    t.put("female", 0x02640);  // FEMALE SIGN 
    t.put("ffilig", 0x0FB03);  // LATIN SMALL LIGATURE FFI 
    t.put("fflig", 0x0FB00);  // LATIN SMALL LIGATURE FF 
    t.put("ffllig", 0x0FB04);  // LATIN SMALL LIGATURE FFL 
    t.put("ffr", 0x1D523);  // MATHEMATICAL FRAKTUR SMALL F 
    t.put("filig", 0x0FB01);  // LATIN SMALL LIGATURE FI 
    t.put("fjlig", 0x00066, 0x0006A);  // fj ligature 
    t.put("flat", 0x0266D);  // MUSIC FLAT SIGN 
    t.put("fllig", 0x0FB02);  // LATIN SMALL LIGATURE FL 
    t.put("fltns", 0x025B1);  // WHITE PARALLELOGRAM 
    t.put("fnof", 0x00192);  // LATIN SMALL LETTER F WITH HOOK 
    t.put("fopf", 0x1D557);  // MATHEMATICAL DOUBLE-STRUCK SMALL F 
    t.put("forall", 0x02200);  // FOR ALL 
    t.put("fork", 0x022D4);  // PITCHFORK 
    t.put("forkv", 0x02AD9);  // ELEMENT OF OPENING DOWNWARDS 
    t.put("fpartint", 0x02A0D);  // FINITE PART INTEGRAL 
    t.put("frac12", 0x000BD);  // VULGAR FRACTION ONE HALF 
    t.put("frac13", 0x02153);  // VULGAR FRACTION ONE THIRD 
    t.put("frac14", 0x000BC);  // VULGAR FRACTION ONE QUARTER 
    t.put("frac15", 0x02155);  // VULGAR FRACTION ONE FIFTH 
    t.put("frac16", 0x02159);  // VULGAR FRACTION ONE SIXTH 
    t.put("frac18", 0x0215B);  // VULGAR FRACTION ONE EIGHTH 
    t.put("frac23", 0x02154);  // VULGAR FRACTION TWO THIRDS 
    t.put("frac25", 0x02156);  // VULGAR FRACTION TWO FIFTHS 
    t.put("frac34", 0x000BE);  // VULGAR FRACTION THREE QUARTERS 
    t.put("frac35", 0x02157);  // VULGAR FRACTION THREE FIFTHS 
    t.put("frac38", 0x0215C);  // VULGAR FRACTION THREE EIGHTHS 
    t.put("frac45", 0x02158);  // VULGAR FRACTION FOUR FIFTHS 
    t.put("frac56", 0x0215A);  // VULGAR FRACTION FIVE SIXTHS 
    t.put("frac58", 0x0215D);  // VULGAR FRACTION FIVE EIGHTHS 
    t.put("frac78", 0x0215E);  // VULGAR FRACTION SEVEN EIGHTHS 
    t.put("frasl", 0x02044);  // FRACTION SLASH 
    t.put("frown", 0x02322);  // FROWN 
    t.put("fscr", 0x1D4BB);  // MATHEMATICAL SCRIPT SMALL F 
    t.put("gE", 0x02267);  // GREATER-THAN OVER EQUAL TO 
    t.put("gEl", 0x02A8C);  // GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN 
    t.put("gacute", 0x001F5);  // LATIN SMALL LETTER G WITH ACUTE 
    t.put("gamma", 0x003B3);  // GREEK SMALL LETTER GAMMA 
    t.put("gammad", 0x003DD);  // GREEK SMALL LETTER DIGAMMA 
    t.put("gap", 0x02A86);  // GREATER-THAN OR APPROXIMATE 
    t.put("gbreve", 0x0011F);  // LATIN SMALL LETTER G WITH BREVE 
    t.put("gcirc", 0x0011D);  // LATIN SMALL LETTER G WITH CIRCUMFLEX 
    t.put("gcy", 0x00433);  // CYRILLIC SMALL LETTER GHE 
    t.put("gdot", 0x00121);  // LATIN SMALL LETTER G WITH DOT ABOVE 
    t.put("ge", 0x02265);  // GREATER-THAN OR EQUAL TO 
    t.put("gel", 0x022DB);  // GREATER-THAN EQUAL TO OR LESS-THAN 
    t.put("geq", 0x02265);  // GREATER-THAN OR EQUAL TO 
    t.put("geqq", 0x02267);  // GREATER-THAN OVER EQUAL TO 
    t.put("geqslant", 0x02A7E);  // GREATER-THAN OR SLANTED EQUAL TO 
    t.put("ges", 0x02A7E);  // GREATER-THAN OR SLANTED EQUAL TO 
    t.put("gescc", 0x02AA9);  // GREATER-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL 
    t.put("gesdot", 0x02A80);  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT INSIDE 
    t.put("gesdoto", 0x02A82);  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE 
    t.put("gesdotol", 0x02A84);  // GREATER-THAN OR SLANTED EQUAL TO WITH DOT ABOVE LEFT 
    t.put("gesl", 0x022DB, 0x0FE00);  // GREATER-THAN slanted EQUAL TO OR LESS-THAN 
    t.put("gesles", 0x02A94);  // GREATER-THAN ABOVE SLANTED EQUAL ABOVE LESS-THAN ABOVE SLANTED EQUAL 
    t.put("gfr", 0x1D524);  // MATHEMATICAL FRAKTUR SMALL G 
    t.put("gg", 0x0226B);  // MUCH GREATER-THAN 
    t.put("ggg", 0x022D9);  // VERY MUCH GREATER-THAN 
    t.put("ggr", 0x003B3);  // GREEK SMALL LETTER GAMMA 
    t.put("gimel", 0x02137);  // GIMEL SYMBOL 
    t.put("gjcy", 0x00453);  // CYRILLIC SMALL LETTER GJE 
    t.put("gl", 0x02277);  // GREATER-THAN OR LESS-THAN 
    t.put("glE", 0x02A92);  // GREATER-THAN ABOVE LESS-THAN ABOVE DOUBLE-LINE EQUAL 
    t.put("gla", 0x02AA5);  // GREATER-THAN BESIDE LESS-THAN 
    t.put("glj", 0x02AA4);  // GREATER-THAN OVERLAPPING LESS-THAN 
    t.put("gnE", 0x02269);  // GREATER-THAN BUT NOT EQUAL TO 
    t.put("gnap", 0x02A8A);  // GREATER-THAN AND NOT APPROXIMATE 
    t.put("gnapprox", 0x02A8A);  // GREATER-THAN AND NOT APPROXIMATE 
    t.put("gne", 0x02A88);  // GREATER-THAN AND SINGLE-LINE NOT EQUAL TO 
    t.put("gneq", 0x02A88);  // GREATER-THAN AND SINGLE-LINE NOT EQUAL TO 
    t.put("gneqq", 0x02269);  // GREATER-THAN BUT NOT EQUAL TO 
    t.put("gnsim", 0x022E7);  // GREATER-THAN BUT NOT EQUIVALENT TO 
    t.put("gopf", 0x1D558);  // MATHEMATICAL DOUBLE-STRUCK SMALL G 
    t.put("grave", 0x00060);  // GRAVE ACCENT 
    t.put("gscr", 0x0210A);  // SCRIPT SMALL G 
    t.put("gsim", 0x02273);  // GREATER-THAN OR EQUIVALENT TO 
    t.put("gsime", 0x02A8E);  // GREATER-THAN ABOVE SIMILAR OR EQUAL 
    t.put("gsiml", 0x02A90);  // GREATER-THAN ABOVE SIMILAR ABOVE LESS-THAN 
    t.put("gt", 0x0003E);  // GREATER-THAN SIGN 
    t.put("gtcc", 0x02AA7);  // GREATER-THAN CLOSED BY CURVE 
    t.put("gtcir", 0x02A7A);  // GREATER-THAN WITH CIRCLE INSIDE 
    t.put("gtdot", 0x022D7);  // GREATER-THAN WITH DOT 
    t.put("gtlPar", 0x02995);  // DOUBLE LEFT ARC GREATER-THAN BRACKET 
    t.put("gtquest", 0x02A7C);  // GREATER-THAN WITH QUESTION MARK ABOVE 
    t.put("gtrapprox", 0x02A86);  // GREATER-THAN OR APPROXIMATE 
    t.put("gtrarr", 0x02978);  // GREATER-THAN ABOVE RIGHTWARDS ARROW 
    t.put("gtrdot", 0x022D7);  // GREATER-THAN WITH DOT 
    t.put("gtreqless", 0x022DB);  // GREATER-THAN EQUAL TO OR LESS-THAN 
    t.put("gtreqqless", 0x02A8C);  // GREATER-THAN ABOVE DOUBLE-LINE EQUAL ABOVE LESS-THAN 
    t.put("gtrless", 0x02277);  // GREATER-THAN OR LESS-THAN 
    t.put("gtrsim", 0x02273);  // GREATER-THAN OR EQUIVALENT TO 
    t.put("gvertneqq", 0x02269, 0x0FE00);  // GREATER-THAN BUT NOT EQUAL TO - with vertical stroke 
    t.put("gvnE", 0x02269, 0x0FE00);  // GREATER-THAN BUT NOT EQUAL TO - with vertical stroke 
    t.put("hArr", 0x021D4);  // LEFT RIGHT DOUBLE ARROW 
    t.put("hairsp", 0x0200A);  // HAIR SPACE 
    t.put("half", 0x000BD);  // VULGAR FRACTION ONE HALF 
    t.put("hamilt", 0x0210B);  // SCRIPT CAPITAL H 
    t.put("hardcy", 0x0044A);  // CYRILLIC SMALL LETTER HARD SIGN 
    t.put("harr", 0x02194);  // LEFT RIGHT ARROW 
    t.put("harrcir", 0x02948);  // LEFT RIGHT ARROW THROUGH SMALL CIRCLE 
    t.put("harrw", 0x021AD);  // LEFT RIGHT WAVE ARROW 
    t.put("hbar", 0x0210F);  // PLANCK CONSTANT OVER TWO PI 
    t.put("hcirc", 0x00125);  // LATIN SMALL LETTER H WITH CIRCUMFLEX 
    t.put("hearts", 0x02665);  // BLACK HEART SUIT 
    t.put("heartsuit", 0x02665);  // BLACK HEART SUIT 
    t.put("hellip", 0x02026);  // HORIZONTAL ELLIPSIS 
    t.put("hercon", 0x022B9);  // HERMITIAN CONJUGATE MATRIX 
    t.put("hfr", 0x1D525);  // MATHEMATICAL FRAKTUR SMALL H 
    t.put("hksearow", 0x02925);  // SOUTH EAST ARROW WITH HOOK 
    t.put("hkswarow", 0x02926);  // SOUTH WEST ARROW WITH HOOK 
    t.put("hoarr", 0x021FF);  // LEFT RIGHT OPEN-HEADED ARROW 
    t.put("homtht", 0x0223B);  // HOMOTHETIC 
    t.put("hookleftarrow", 0x021A9);  // LEFTWARDS ARROW WITH HOOK 
    t.put("hookrightarrow", 0x021AA);  // RIGHTWARDS ARROW WITH HOOK 
    t.put("hopf", 0x1D559);  // MATHEMATICAL DOUBLE-STRUCK SMALL H 
    t.put("horbar", 0x02015);  // HORIZONTAL BAR 
    t.put("hscr", 0x1D4BD);  // MATHEMATICAL SCRIPT SMALL H 
    t.put("hslash", 0x0210F);  // PLANCK CONSTANT OVER TWO PI 
    t.put("hstrok", 0x00127);  // LATIN SMALL LETTER H WITH STROKE 
    t.put("hybull", 0x02043);  // HYPHEN BULLET 
    t.put("hyphen", 0x02010);  // HYPHEN 
    t.put("iacgr", 0x003AF);  // GREEK SMALL LETTER IOTA WITH TONOS 
    t.put("iacute", 0x000ED);  // LATIN SMALL LETTER I WITH ACUTE 
    t.put("ic", 0x02063);  // INVISIBLE SEPARATOR 
    t.put("icirc", 0x000EE);  // LATIN SMALL LETTER I WITH CIRCUMFLEX 
    t.put("icy", 0x00438);  // CYRILLIC SMALL LETTER I 
    t.put("idiagr", 0x00390);  // GREEK SMALL LETTER IOTA WITH DIALYTIKA AND TONOS 
    t.put("idigr", 0x003CA);  // GREEK SMALL LETTER IOTA WITH DIALYTIKA 
    t.put("iecy", 0x00435);  // CYRILLIC SMALL LETTER IE 
    t.put("iexcl", 0x000A1);  // INVERTED EXCLAMATION MARK 
    t.put("iff", 0x021D4);  // LEFT RIGHT DOUBLE ARROW 
    t.put("ifr", 0x1D526);  // MATHEMATICAL FRAKTUR SMALL I 
    t.put("igr", 0x003B9);  // GREEK SMALL LETTER IOTA 
    t.put("igrave", 0x000EC);  // LATIN SMALL LETTER I WITH GRAVE 
    t.put("ii", 0x02148);  // DOUBLE-STRUCK ITALIC SMALL I 
    t.put("iiiint", 0x02A0C);  // QUADRUPLE INTEGRAL OPERATOR 
    t.put("iiint", 0x0222D);  // TRIPLE INTEGRAL 
    t.put("iinfin", 0x029DC);  // INCOMPLETE INFINITY 
    t.put("iiota", 0x02129);  // TURNED GREEK SMALL LETTER IOTA 
    t.put("ijlig", 0x00133);  // LATIN SMALL LIGATURE IJ 
    t.put("imacr", 0x0012B);  // LATIN SMALL LETTER I WITH MACRON 
    t.put("image", 0x02111);  // BLACK-LETTER CAPITAL I 
    t.put("imagline", 0x02110);  // SCRIPT CAPITAL I 
    t.put("imagpart", 0x02111);  // BLACK-LETTER CAPITAL I 
    t.put("imath", 0x00131);  // LATIN SMALL LETTER DOTLESS I 
    t.put("imof", 0x022B7);  // IMAGE OF 
    t.put("imped", 0x001B5);  // LATIN CAPITAL LETTER Z WITH STROKE 
    t.put("in", 0x02208);  // ELEMENT OF 
    t.put("incare", 0x02105);  // CARE OF 
    t.put("infin", 0x0221E);  // INFINITY 
    t.put("infintie", 0x029DD);  // TIE OVER INFINITY 
    t.put("inodot", 0x00131);  // LATIN SMALL LETTER DOTLESS I 
    t.put("int", 0x0222B);  // INTEGRAL 
    t.put("intcal", 0x022BA);  // INTERCALATE 
    t.put("integers", 0x02124);  // DOUBLE-STRUCK CAPITAL Z 
    t.put("intercal", 0x022BA);  // INTERCALATE 
    t.put("intlarhk", 0x02A17);  // INTEGRAL WITH LEFTWARDS ARROW WITH HOOK 
    t.put("intprod", 0x02A3C);  // INTERIOR PRODUCT 
    t.put("iocy", 0x00451);  // CYRILLIC SMALL LETTER IO 
    t.put("iogon", 0x0012F);  // LATIN SMALL LETTER I WITH OGONEK 
    t.put("iopf", 0x1D55A);  // MATHEMATICAL DOUBLE-STRUCK SMALL I 
    t.put("iota", 0x003B9);  // GREEK SMALL LETTER IOTA 
    t.put("iprod", 0x02A3C);  // INTERIOR PRODUCT 
    t.put("iquest", 0x000BF);  // INVERTED QUESTION MARK 
    t.put("iscr", 0x1D4BE);  // MATHEMATICAL SCRIPT SMALL I 
    t.put("isin", 0x02208);  // ELEMENT OF 
    t.put("isinE", 0x022F9);  // ELEMENT OF WITH TWO HORIZONTAL STROKES 
    t.put("isindot", 0x022F5);  // ELEMENT OF WITH DOT ABOVE 
    t.put("isins", 0x022F4);  // SMALL ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE 
    t.put("isinsv", 0x022F3);  // ELEMENT OF WITH VERTICAL BAR AT END OF HORIZONTAL STROKE 
    t.put("isinv", 0x02208);  // ELEMENT OF 
    t.put("it", 0x02062);  // INVISIBLE TIMES 
    t.put("itilde", 0x00129);  // LATIN SMALL LETTER I WITH TILDE 
    t.put("iukcy", 0x00456);  // CYRILLIC SMALL LETTER BYELORUSSIAN-UKRAINIAN I 
    t.put("iuml", 0x000EF);  // LATIN SMALL LETTER I WITH DIAERESIS 
    t.put("jcirc", 0x00135);  // LATIN SMALL LETTER J WITH CIRCUMFLEX 
    t.put("jcy", 0x00439);  // CYRILLIC SMALL LETTER SHORT I 
    t.put("jfr", 0x1D527);  // MATHEMATICAL FRAKTUR SMALL J 
    t.put("jmath", 0x00237);  // LATIN SMALL LETTER DOTLESS J 
    t.put("jopf", 0x1D55B);  // MATHEMATICAL DOUBLE-STRUCK SMALL J 
    t.put("jscr", 0x1D4BF);  // MATHEMATICAL SCRIPT SMALL J 
    t.put("jsercy", 0x00458);  // CYRILLIC SMALL LETTER JE 
    t.put("jukcy", 0x00454);  // CYRILLIC SMALL LETTER UKRAINIAN IE 
    t.put("kappa", 0x003BA);  // GREEK SMALL LETTER KAPPA 
    t.put("kappav", 0x003F0);  // GREEK KAPPA SYMBOL 
    t.put("kcedil", 0x00137);  // LATIN SMALL LETTER K WITH CEDILLA 
    t.put("kcy", 0x0043A);  // CYRILLIC SMALL LETTER KA 
    t.put("kfr", 0x1D528);  // MATHEMATICAL FRAKTUR SMALL K 
    t.put("kgr", 0x003BA);  // GREEK SMALL LETTER KAPPA 
    t.put("kgreen", 0x00138);  // LATIN SMALL LETTER KRA 
    t.put("khcy", 0x00445);  // CYRILLIC SMALL LETTER HA 
    t.put("khgr", 0x003C7);  // GREEK SMALL LETTER CHI 
    t.put("kjcy", 0x0045C);  // CYRILLIC SMALL LETTER KJE 
    t.put("kopf", 0x1D55C);  // MATHEMATICAL DOUBLE-STRUCK SMALL K 
    t.put("kscr", 0x1D4C0);  // MATHEMATICAL SCRIPT SMALL K 
    t.put("lAarr", 0x021DA);  // LEFTWARDS TRIPLE ARROW 
    t.put("lArr", 0x021D0);  // LEFTWARDS DOUBLE ARROW 
    t.put("lAtail", 0x0291B);  // LEFTWARDS DOUBLE ARROW-TAIL 
    t.put("lBarr", 0x0290E);  // LEFTWARDS TRIPLE DASH ARROW 
    t.put("lE", 0x02266);  // LESS-THAN OVER EQUAL TO 
    t.put("lEg", 0x02A8B);  // LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN 
    t.put("lHar", 0x02962);  // LEFTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB DOWN 
    t.put("lacute", 0x0013A);  // LATIN SMALL LETTER L WITH ACUTE 
    t.put("laemptyv", 0x029B4);  // EMPTY SET WITH LEFT ARROW ABOVE 
    t.put("lagran", 0x02112);  // SCRIPT CAPITAL L 
    t.put("lambda", 0x003BB);  // GREEK SMALL LETTER LAMDA 
    t.put("lang", 0x027E8);  // MATHEMATICAL LEFT ANGLE BRACKET 
    t.put("langd", 0x02991);  // LEFT ANGLE BRACKET WITH DOT 
    t.put("langle", 0x027E8);  // MATHEMATICAL LEFT ANGLE BRACKET 
    t.put("lap", 0x02A85);  // LESS-THAN OR APPROXIMATE 
    t.put("laquo", 0x000AB);  // LEFT-POINTING DOUBLE ANGLE QUOTATION MARK 
    t.put("larr", 0x02190);  // LEFTWARDS ARROW 
    t.put("larrb", 0x021E4);  // LEFTWARDS ARROW TO BAR 
    t.put("larrbfs", 0x0291F);  // LEFTWARDS ARROW FROM BAR TO BLACK DIAMOND 
    t.put("larrfs", 0x0291D);  // LEFTWARDS ARROW TO BLACK DIAMOND 
    t.put("larrhk", 0x021A9);  // LEFTWARDS ARROW WITH HOOK 
    t.put("larrlp", 0x021AB);  // LEFTWARDS ARROW WITH LOOP 
    t.put("larrpl", 0x02939);  // LEFT-SIDE ARC ANTICLOCKWISE ARROW 
    t.put("larrsim", 0x02973);  // LEFTWARDS ARROW ABOVE TILDE OPERATOR 
    t.put("larrtl", 0x021A2);  // LEFTWARDS ARROW WITH TAIL 
    t.put("lat", 0x02AAB);  // LARGER THAN 
    t.put("latail", 0x02919);  // LEFTWARDS ARROW-TAIL 
    t.put("late", 0x02AAD);  // LARGER THAN OR EQUAL TO 
    t.put("lates", 0x02AAD, 0x0FE00);  // LARGER THAN OR slanted EQUAL 
    t.put("lbarr", 0x0290C);  // LEFTWARDS DOUBLE DASH ARROW 
    t.put("lbbrk", 0x02772);  // LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT 
    t.put("lbrace", 0x0007B);  // LEFT CURLY BRACKET 
    t.put("lbrack", 0x0005B);  // LEFT SQUARE BRACKET 
    t.put("lbrke", 0x0298B);  // LEFT SQUARE BRACKET WITH UNDERBAR 
    t.put("lbrksld", 0x0298F);  // LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER 
    t.put("lbrkslu", 0x0298D);  // LEFT SQUARE BRACKET WITH TICK IN TOP CORNER 
    t.put("lcaron", 0x0013E);  // LATIN SMALL LETTER L WITH CARON 
    t.put("lcedil", 0x0013C);  // LATIN SMALL LETTER L WITH CEDILLA 
    t.put("lceil", 0x02308);  // LEFT CEILING 
    t.put("lcub", 0x0007B);  // LEFT CURLY BRACKET 
    t.put("lcy", 0x0043B);  // CYRILLIC SMALL LETTER EL 
    t.put("ldca", 0x02936);  // ARROW POINTING DOWNWARDS THEN CURVING LEFTWARDS 
    t.put("ldquo", 0x0201C);  // LEFT DOUBLE QUOTATION MARK 
    t.put("ldquor", 0x0201E);  // DOUBLE LOW-9 QUOTATION MARK 
    t.put("ldrdhar", 0x02967);  // LEFTWARDS HARPOON WITH BARB DOWN ABOVE RIGHTWARDS HARPOON WITH BARB DOWN 
    t.put("ldrushar", 0x0294B);  // LEFT BARB DOWN RIGHT BARB UP HARPOON 
    t.put("ldsh", 0x021B2);  // DOWNWARDS ARROW WITH TIP LEFTWARDS 
    t.put("le", 0x02264);  // LESS-THAN OR EQUAL TO 
    t.put("leftarrow", 0x02190);  // LEFTWARDS ARROW 
    t.put("leftarrowtail", 0x021A2);  // LEFTWARDS ARROW WITH TAIL 
    t.put("leftharpoondown", 0x021BD);  // LEFTWARDS HARPOON WITH BARB DOWNWARDS 
    t.put("leftharpoonup", 0x021BC);  // LEFTWARDS HARPOON WITH BARB UPWARDS 
    t.put("leftleftarrows", 0x021C7);  // LEFTWARDS PAIRED ARROWS 
    t.put("leftrightarrow", 0x02194);  // LEFT RIGHT ARROW 
    t.put("leftrightarrows", 0x021C6);  // LEFTWARDS ARROW OVER RIGHTWARDS ARROW 
    t.put("leftrightharpoons", 0x021CB);  // LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON 
    t.put("leftrightsquigarrow", 0x021AD);  // LEFT RIGHT WAVE ARROW 
    t.put("leftthreetimes", 0x022CB);  // LEFT SEMIDIRECT PRODUCT 
    t.put("leg", 0x022DA);  // LESS-THAN EQUAL TO OR GREATER-THAN 
    t.put("leq", 0x02264);  // LESS-THAN OR EQUAL TO 
    t.put("leqq", 0x02266);  // LESS-THAN OVER EQUAL TO 
    t.put("leqslant", 0x02A7D);  // LESS-THAN OR SLANTED EQUAL TO 
    t.put("les", 0x02A7D);  // LESS-THAN OR SLANTED EQUAL TO 
    t.put("lescc", 0x02AA8);  // LESS-THAN CLOSED BY CURVE ABOVE SLANTED EQUAL 
    t.put("lesdot", 0x02A7F);  // LESS-THAN OR SLANTED EQUAL TO WITH DOT INSIDE 
    t.put("lesdoto", 0x02A81);  // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE 
    t.put("lesdotor", 0x02A83);  // LESS-THAN OR SLANTED EQUAL TO WITH DOT ABOVE RIGHT 
    t.put("lesg", 0x022DA, 0x0FE00);  // LESS-THAN slanted EQUAL TO OR GREATER-THAN 
    t.put("lesges", 0x02A93);  // LESS-THAN ABOVE SLANTED EQUAL ABOVE GREATER-THAN ABOVE SLANTED EQUAL 
    t.put("lessapprox", 0x02A85);  // LESS-THAN OR APPROXIMATE 
    t.put("lessdot", 0x022D6);  // LESS-THAN WITH DOT 
    t.put("lesseqgtr", 0x022DA);  // LESS-THAN EQUAL TO OR GREATER-THAN 
    t.put("lesseqqgtr", 0x02A8B);  // LESS-THAN ABOVE DOUBLE-LINE EQUAL ABOVE GREATER-THAN 
    t.put("lessgtr", 0x02276);  // LESS-THAN OR GREATER-THAN 
    t.put("lesssim", 0x02272);  // LESS-THAN OR EQUIVALENT TO 
    t.put("lfisht", 0x0297C);  // LEFT FISH TAIL 
    t.put("lfloor", 0x0230A);  // LEFT FLOOR 
    t.put("lfr", 0x1D529);  // MATHEMATICAL FRAKTUR SMALL L 
    t.put("lg", 0x02276);  // LESS-THAN OR GREATER-THAN 
    t.put("lgE", 0x02A91);  // LESS-THAN ABOVE GREATER-THAN ABOVE DOUBLE-LINE EQUAL 
    t.put("lgr", 0x003BB);  // GREEK SMALL LETTER LAMDA 
    t.put("lhard", 0x021BD);  // LEFTWARDS HARPOON WITH BARB DOWNWARDS 
    t.put("lharu", 0x021BC);  // LEFTWARDS HARPOON WITH BARB UPWARDS 
    t.put("lharul", 0x0296A);  // LEFTWARDS HARPOON WITH BARB UP ABOVE LONG DASH 
    t.put("lhblk", 0x02584);  // LOWER HALF BLOCK 
    t.put("ljcy", 0x00459);  // CYRILLIC SMALL LETTER LJE 
    t.put("ll", 0x0226A);  // MUCH LESS-THAN 
    t.put("llarr", 0x021C7);  // LEFTWARDS PAIRED ARROWS 
    t.put("llcorner", 0x0231E);  // BOTTOM LEFT CORNER 
    t.put("llhard", 0x0296B);  // LEFTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH 
    t.put("lltri", 0x025FA);  // LOWER LEFT TRIANGLE 
    t.put("lmidot", 0x00140);  // LATIN SMALL LETTER L WITH MIDDLE DOT 
    t.put("lmoust", 0x023B0);  // UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION 
    t.put("lmoustache", 0x023B0);  // UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION 
    t.put("lnE", 0x02268);  // LESS-THAN BUT NOT EQUAL TO 
    t.put("lnap", 0x02A89);  // LESS-THAN AND NOT APPROXIMATE 
    t.put("lnapprox", 0x02A89);  // LESS-THAN AND NOT APPROXIMATE 
    t.put("lne", 0x02A87);  // LESS-THAN AND SINGLE-LINE NOT EQUAL TO 
    t.put("lneq", 0x02A87);  // LESS-THAN AND SINGLE-LINE NOT EQUAL TO 
    t.put("lneqq", 0x02268);  // LESS-THAN BUT NOT EQUAL TO 
    t.put("lnsim", 0x022E6);  // LESS-THAN BUT NOT EQUIVALENT TO 
    t.put("loang", 0x027EC);  // MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET 
    t.put("loarr", 0x021FD);  // LEFTWARDS OPEN-HEADED ARROW 
    t.put("lobrk", 0x027E6);  // MATHEMATICAL LEFT WHITE SQUARE BRACKET 
    t.put("longleftarrow", 0x027F5);  // LONG LEFTWARDS ARROW 
    t.put("longleftrightarrow", 0x027F7);  // LONG LEFT RIGHT ARROW 
    t.put("longmapsto", 0x027FC);  // LONG RIGHTWARDS ARROW FROM BAR 
    t.put("longrightarrow", 0x027F6);  // LONG RIGHTWARDS ARROW 
    t.put("looparrowleft", 0x021AB);  // LEFTWARDS ARROW WITH LOOP 
    t.put("looparrowright", 0x021AC);  // RIGHTWARDS ARROW WITH LOOP 
    t.put("lopar", 0x02985);  // LEFT WHITE PARENTHESIS 
    t.put("lopf", 0x1D55D);  // MATHEMATICAL DOUBLE-STRUCK SMALL L 
    t.put("loplus", 0x02A2D);  // PLUS SIGN IN LEFT HALF CIRCLE 
    t.put("lotimes", 0x02A34);  // MULTIPLICATION SIGN IN LEFT HALF CIRCLE 
    t.put("lowast", 0x02217);  // ASTERISK OPERATOR 
    t.put("lowbar", 0x0005F);  // LOW LINE 
    t.put("loz", 0x025CA);  // LOZENGE 
    t.put("lozenge", 0x025CA);  // LOZENGE 
    t.put("lozf", 0x029EB);  // BLACK LOZENGE 
    t.put("lpar", 0x00028);  // LEFT PARENTHESIS 
    t.put("lparlt", 0x02993);  // LEFT ARC LESS-THAN BRACKET 
    t.put("lrarr", 0x021C6);  // LEFTWARDS ARROW OVER RIGHTWARDS ARROW 
    t.put("lrcorner", 0x0231F);  // BOTTOM RIGHT CORNER 
    t.put("lrhar", 0x021CB);  // LEFTWARDS HARPOON OVER RIGHTWARDS HARPOON 
    t.put("lrhard", 0x0296D);  // RIGHTWARDS HARPOON WITH BARB DOWN BELOW LONG DASH 
    t.put("lrm", 0x0200E);  // LEFT-TO-RIGHT MARK 
    t.put("lrtri", 0x022BF);  // RIGHT TRIANGLE 
    t.put("lsaquo", 0x02039);  // SINGLE LEFT-POINTING ANGLE QUOTATION MARK 
    t.put("lscr", 0x1D4C1);  // MATHEMATICAL SCRIPT SMALL L 
    t.put("lsh", 0x021B0);  // UPWARDS ARROW WITH TIP LEFTWARDS 
    t.put("lsim", 0x02272);  // LESS-THAN OR EQUIVALENT TO 
    t.put("lsime", 0x02A8D);  // LESS-THAN ABOVE SIMILAR OR EQUAL 
    t.put("lsimg", 0x02A8F);  // LESS-THAN ABOVE SIMILAR ABOVE GREATER-THAN 
    t.put("lsqb", 0x0005B);  // LEFT SQUARE BRACKET 
    t.put("lsquo", 0x02018);  // LEFT SINGLE QUOTATION MARK 
    t.put("lsquor", 0x0201A);  // SINGLE LOW-9 QUOTATION MARK 
    t.put("lstrok", 0x00142);  // LATIN SMALL LETTER L WITH STROKE 
    t.put("lt", 60);  // LESS-THAN SIGN 
    t.put("ltcc", 0x02AA6);  // LESS-THAN CLOSED BY CURVE 
    t.put("ltcir", 0x02A79);  // LESS-THAN WITH CIRCLE INSIDE 
    t.put("ltdot", 0x022D6);  // LESS-THAN WITH DOT 
    t.put("lthree", 0x022CB);  // LEFT SEMIDIRECT PRODUCT 
    t.put("ltimes", 0x022C9);  // LEFT NORMAL FACTOR SEMIDIRECT PRODUCT 
    t.put("ltlarr", 0x02976);  // LESS-THAN ABOVE LEFTWARDS ARROW 
    t.put("ltquest", 0x02A7B);  // LESS-THAN WITH QUESTION MARK ABOVE 
    t.put("ltrPar", 0x02996);  // DOUBLE RIGHT ARC LESS-THAN BRACKET 
    t.put("ltri", 0x025C3);  // WHITE LEFT-POINTING SMALL TRIANGLE 
    t.put("ltrie", 0x022B4);  // NORMAL SUBGROUP OF OR EQUAL TO 
    t.put("ltrif", 0x025C2);  // BLACK LEFT-POINTING SMALL TRIANGLE 
    t.put("lurdshar", 0x0294A);  // LEFT BARB UP RIGHT BARB DOWN HARPOON 
    t.put("luruhar", 0x02966);  // LEFTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB UP 
    t.put("lvertneqq", 0x02268, 0x0FE00);  // LESS-THAN BUT NOT EQUAL TO - with vertical stroke 
    t.put("lvnE", 0x02268, 0x0FE00);  // LESS-THAN BUT NOT EQUAL TO - with vertical stroke 
    t.put("mDDot", 0x0223A);  // GEOMETRIC PROPORTION 
    t.put("macr", 0x000AF);  // MACRON 
    t.put("male", 0x02642);  // MALE SIGN 
    t.put("malt", 0x02720);  // MALTESE CROSS 
    t.put("maltese", 0x02720);  // MALTESE CROSS 
    t.put("map", 0x021A6);  // RIGHTWARDS ARROW FROM BAR 
    t.put("mapsto", 0x021A6);  // RIGHTWARDS ARROW FROM BAR 
    t.put("mapstodown", 0x021A7);  // DOWNWARDS ARROW FROM BAR 
    t.put("mapstoleft", 0x021A4);  // LEFTWARDS ARROW FROM BAR 
    t.put("mapstoup", 0x021A5);  // UPWARDS ARROW FROM BAR 
    t.put("marker", 0x025AE);  // BLACK VERTICAL RECTANGLE 
    t.put("mcomma", 0x02A29);  // MINUS SIGN WITH COMMA ABOVE 
    t.put("mcy", 0x0043C);  // CYRILLIC SMALL LETTER EM 
    t.put("mdash", 0x02014);  // EM DASH 
    t.put("measuredangle", 0x02221);  // MEASURED ANGLE 
    t.put("mfr", 0x1D52A);  // MATHEMATICAL FRAKTUR SMALL M 
    t.put("mgr", 0x003BC);  // GREEK SMALL LETTER MU 
    t.put("mho", 0x02127);  // INVERTED OHM SIGN 
    t.put("micro", 0x000B5);  // MICRO SIGN 
    t.put("mid", 0x02223);  // DIVIDES 
    t.put("midast", 0x0002A);  // ASTERISK 
    t.put("midcir", 0x02AF0);  // VERTICAL LINE WITH CIRCLE BELOW 
    t.put("middot", 0x000B7);  // MIDDLE DOT 
    t.put("minus", 0x02212);  // MINUS SIGN 
    t.put("minusb", 0x0229F);  // SQUARED MINUS 
    t.put("minusd", 0x02238);  // DOT MINUS 
    t.put("minusdu", 0x02A2A);  // MINUS SIGN WITH DOT BELOW 
    t.put("mlcp", 0x02ADB);  // TRANSVERSAL INTERSECTION 
    t.put("mldr", 0x02026);  // HORIZONTAL ELLIPSIS 
    t.put("mnplus", 0x02213);  // MINUS-OR-PLUS SIGN 
    t.put("models", 0x022A7);  // MODELS 
    t.put("mopf", 0x1D55E);  // MATHEMATICAL DOUBLE-STRUCK SMALL M 
    t.put("mp", 0x02213);  // MINUS-OR-PLUS SIGN 
    t.put("mscr", 0x1D4C2);  // MATHEMATICAL SCRIPT SMALL M 
    t.put("mstpos", 0x0223E);  // INVERTED LAZY S 
    t.put("mu", 0x003BC);  // GREEK SMALL LETTER MU 
    t.put("multimap", 0x022B8);  // MULTIMAP 
    t.put("mumap", 0x022B8);  // MULTIMAP 
    t.put("nGg", 0x022D9, 0x00338);  // VERY MUCH GREATER-THAN with slash 
    t.put("nGt", 0x0226B, 0x020D2);  // MUCH GREATER THAN with vertical line 
    t.put("nGtv", 0x0226B, 0x00338);  // MUCH GREATER THAN with slash 
    t.put("nLeftarrow", 0x021CD);  // LEFTWARDS DOUBLE ARROW WITH STROKE 
    t.put("nLeftrightarrow", 0x021CE);  // LEFT RIGHT DOUBLE ARROW WITH STROKE 
    t.put("nLl", 0x022D8, 0x00338);  // VERY MUCH LESS-THAN with slash 
    t.put("nLt", 0x0226A, 0x020D2);  // MUCH LESS THAN with vertical line 
    t.put("nLtv", 0x0226A, 0x00338);  // MUCH LESS THAN with slash 
    t.put("nRightarrow", 0x021CF);  // RIGHTWARDS DOUBLE ARROW WITH STROKE 
    t.put("nVDash", 0x022AF);  // NEGATED DOUBLE VERTICAL BAR DOUBLE RIGHT TURNSTILE 
    t.put("nVdash", 0x022AE);  // DOES NOT FORCE 
    t.put("nabla", 0x02207);  // NABLA 
    t.put("nacute", 0x00144);  // LATIN SMALL LETTER N WITH ACUTE 
    t.put("nang", 0x02220, 0x020D2);  // ANGLE with vertical line 
    t.put("nap", 0x02249);  // NOT ALMOST EQUAL TO 
    t.put("napE", 0x02A70, 0x00338);  // APPROXIMATELY EQUAL OR EQUAL TO with slash 
    t.put("napid", 0x0224B, 0x00338);  // TRIPLE TILDE with slash 
    t.put("napos", 0x00149);  // LATIN SMALL LETTER N PRECEDED BY APOSTROPHE 
    t.put("napprox", 0x02249);  // NOT ALMOST EQUAL TO 
    t.put("natur", 0x0266E);  // MUSIC NATURAL SIGN 
    t.put("natural", 0x0266E);  // MUSIC NATURAL SIGN 
    t.put("naturals", 0x02115);  // DOUBLE-STRUCK CAPITAL N 
    t.put("nbsp", 0x000A0);  // NO-BREAK SPACE 
    t.put("nbump", 0x0224E, 0x00338);  // GEOMETRICALLY EQUIVALENT TO with slash 
    t.put("nbumpe", 0x0224F, 0x00338);  // DIFFERENCE BETWEEN with slash 
    t.put("ncap", 0x02A43);  // INTERSECTION WITH OVERBAR 
    t.put("ncaron", 0x00148);  // LATIN SMALL LETTER N WITH CARON 
    t.put("ncedil", 0x00146);  // LATIN SMALL LETTER N WITH CEDILLA 
    t.put("ncong", 0x02247);  // NEITHER APPROXIMATELY NOR ACTUALLY EQUAL TO 
    t.put("ncongdot", 0x02A6D, 0x00338);  // CONGRUENT WITH DOT ABOVE with slash 
    t.put("ncup", 0x02A42);  // UNION WITH OVERBAR 
    t.put("ncy", 0x0043D);  // CYRILLIC SMALL LETTER EN 
    t.put("ndash", 0x02013);  // EN DASH 
    t.put("ne", 0x02260);  // NOT EQUAL TO 
    t.put("neArr", 0x021D7);  // NORTH EAST DOUBLE ARROW 
    t.put("nearhk", 0x02924);  // NORTH EAST ARROW WITH HOOK 
    t.put("nearr", 0x02197);  // NORTH EAST ARROW 
    t.put("nearrow", 0x02197);  // NORTH EAST ARROW 
    t.put("nedot", 0x02250, 0x00338);  // APPROACHES THE LIMIT with slash 
    t.put("nequiv", 0x02262);  // NOT IDENTICAL TO 
    t.put("nesear", 0x02928);  // NORTH EAST ARROW AND SOUTH EAST ARROW 
    t.put("nesim", 0x02242, 0x00338);  // MINUS TILDE with slash 
    t.put("nexist", 0x02204);  // THERE DOES NOT EXIST 
    t.put("nexists", 0x02204);  // THERE DOES NOT EXIST 
    t.put("nfr", 0x1D52B);  // MATHEMATICAL FRAKTUR SMALL N 
    t.put("ngE", 0x02267, 0x00338);  // GREATER-THAN OVER EQUAL TO with slash 
    t.put("nge", 0x02271);  // NEITHER GREATER-THAN NOR EQUAL TO 
    t.put("ngeq", 0x02271);  // NEITHER GREATER-THAN NOR EQUAL TO 
    t.put("ngeqq", 0x02267, 0x00338);  // GREATER-THAN OVER EQUAL TO with slash 
    t.put("ngeqslant", 0x02A7E, 0x00338);  // GREATER-THAN OR SLANTED EQUAL TO with slash 
    t.put("nges", 0x02A7E, 0x00338);  // GREATER-THAN OR SLANTED EQUAL TO with slash 
    t.put("ngr", 0x003BD);  // GREEK SMALL LETTER NU 
    t.put("ngsim", 0x02275);  // NEITHER GREATER-THAN NOR EQUIVALENT TO 
    t.put("ngt", 0x0226F);  // NOT GREATER-THAN 
    t.put("ngtr", 0x0226F);  // NOT GREATER-THAN 
    t.put("nhArr", 0x021CE);  // LEFT RIGHT DOUBLE ARROW WITH STROKE 
    t.put("nharr", 0x021AE);  // LEFT RIGHT ARROW WITH STROKE 
    t.put("nhpar", 0x02AF2);  // PARALLEL WITH HORIZONTAL STROKE 
    t.put("ni", 0x0220B);  // CONTAINS AS MEMBER 
    t.put("nis", 0x022FC);  // SMALL CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE 
    t.put("nisd", 0x022FA);  // CONTAINS WITH LONG HORIZONTAL STROKE 
    t.put("niv", 0x0220B);  // CONTAINS AS MEMBER 
    t.put("njcy", 0x0045A);  // CYRILLIC SMALL LETTER NJE 
    t.put("nlArr", 0x021CD);  // LEFTWARDS DOUBLE ARROW WITH STROKE 
    t.put("nlE", 0x02266, 0x00338);  // LESS-THAN OVER EQUAL TO with slash 
    t.put("nlarr", 0x0219A);  // LEFTWARDS ARROW WITH STROKE 
    t.put("nldr", 0x02025);  // TWO DOT LEADER 
    t.put("nle", 0x02270);  // NEITHER LESS-THAN NOR EQUAL TO 
    t.put("nleftarrow", 0x0219A);  // LEFTWARDS ARROW WITH STROKE 
    t.put("nleftrightarrow", 0x021AE);  // LEFT RIGHT ARROW WITH STROKE 
    t.put("nleq", 0x02270);  // NEITHER LESS-THAN NOR EQUAL TO 
    t.put("nleqq", 0x02266, 0x00338);  // LESS-THAN OVER EQUAL TO with slash 
    t.put("nleqslant", 0x02A7D, 0x00338);  // LESS-THAN OR SLANTED EQUAL TO with slash 
    t.put("nles", 0x02A7D, 0x00338);  // LESS-THAN OR SLANTED EQUAL TO with slash 
    t.put("nless", 0x0226E);  // NOT LESS-THAN 
    t.put("nlsim", 0x02274);  // NEITHER LESS-THAN NOR EQUIVALENT TO 
    t.put("nlt", 0x0226E);  // NOT LESS-THAN 
    t.put("nltri", 0x022EA);  // NOT NORMAL SUBGROUP OF 
    t.put("nltrie", 0x022EC);  // NOT NORMAL SUBGROUP OF OR EQUAL TO 
    t.put("nmid", 0x02224);  // DOES NOT DIVIDE 
    t.put("nopf", 0x1D55F);  // MATHEMATICAL DOUBLE-STRUCK SMALL N 
    t.put("not", 0x000AC);  // NOT SIGN 
    t.put("notin", 0x02209);  // NOT AN ELEMENT OF 
    t.put("notinE", 0x022F9, 0x00338);  // ELEMENT OF WITH TWO HORIZONTAL STROKES with slash 
    t.put("notindot", 0x022F5, 0x00338);  // ELEMENT OF WITH DOT ABOVE with slash 
    t.put("notinva", 0x02209);  // NOT AN ELEMENT OF 
    t.put("notinvb", 0x022F7);  // SMALL ELEMENT OF WITH OVERBAR 
    t.put("notinvc", 0x022F6);  // ELEMENT OF WITH OVERBAR 
    t.put("notni", 0x0220C);  // DOES NOT CONTAIN AS MEMBER 
    t.put("notniva", 0x0220C);  // DOES NOT CONTAIN AS MEMBER 
    t.put("notnivb", 0x022FE);  // SMALL CONTAINS WITH OVERBAR 
    t.put("notnivc", 0x022FD);  // CONTAINS WITH OVERBAR 
    t.put("npar", 0x02226);  // NOT PARALLEL TO 
    t.put("nparallel", 0x02226);  // NOT PARALLEL TO 
    t.put("nparsl", 0x02AFD, 0x020E5);  // DOUBLE SOLIDUS OPERATOR with reverse slash 
    t.put("npart", 0x02202, 0x00338);  // PARTIAL DIFFERENTIAL with slash 
    t.put("npolint", 0x02A14);  // LINE INTEGRATION NOT INCLUDING THE POLE 
    t.put("npr", 0x02280);  // DOES NOT PRECEDE 
    t.put("nprcue", 0x022E0);  // DOES NOT PRECEDE OR EQUAL 
    t.put("npre", 0x02AAF, 0x00338);  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash 
    t.put("nprec", 0x02280);  // DOES NOT PRECEDE 
    t.put("npreceq", 0x02AAF, 0x00338);  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN with slash 
    t.put("nrArr", 0x021CF);  // RIGHTWARDS DOUBLE ARROW WITH STROKE 
    t.put("nrarr", 0x0219B);  // RIGHTWARDS ARROW WITH STROKE 
    t.put("nrarrc", 0x02933, 0x00338);  // WAVE ARROW POINTING DIRECTLY RIGHT with slash 
    t.put("nrarrw", 0x0219D, 0x00338);  // RIGHTWARDS WAVE ARROW with slash 
    t.put("nrightarrow", 0x0219B);  // RIGHTWARDS ARROW WITH STROKE 
    t.put("nrtri", 0x022EB);  // DOES NOT CONTAIN AS NORMAL SUBGROUP 
    t.put("nrtrie", 0x022ED);  // DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL 
    t.put("nsc", 0x02281);  // DOES NOT SUCCEED 
    t.put("nsccue", 0x022E1);  // DOES NOT SUCCEED OR EQUAL 
    t.put("nsce", 0x02AB0, 0x00338);  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash 
    t.put("nscr", 0x1D4C3);  // MATHEMATICAL SCRIPT SMALL N 
    t.put("nshortmid", 0x02224);  // DOES NOT DIVIDE 
    t.put("nshortparallel", 0x02226);  // NOT PARALLEL TO 
    t.put("nsim", 0x02241);  // NOT TILDE 
    t.put("nsime", 0x02244);  // NOT ASYMPTOTICALLY EQUAL TO 
    t.put("nsimeq", 0x02244);  // NOT ASYMPTOTICALLY EQUAL TO 
    t.put("nsmid", 0x02224);  // DOES NOT DIVIDE 
    t.put("nspar", 0x02226);  // NOT PARALLEL TO 
    t.put("nsqsube", 0x022E2);  // NOT SQUARE IMAGE OF OR EQUAL TO 
    t.put("nsqsupe", 0x022E3);  // NOT SQUARE ORIGINAL OF OR EQUAL TO 
    t.put("nsub", 0x02284);  // NOT A SUBSET OF 
    t.put("nsubE", 0x02AC5, 0x00338);  // SUBSET OF ABOVE EQUALS SIGN with slash 
    t.put("nsube", 0x02288);  // NEITHER A SUBSET OF NOR EQUAL TO 
    t.put("nsubset", 0x02282, 0x020D2);  // SUBSET OF with vertical line 
    t.put("nsubseteq", 0x02288);  // NEITHER A SUBSET OF NOR EQUAL TO 
    t.put("nsubseteqq", 0x02AC5, 0x00338);  // SUBSET OF ABOVE EQUALS SIGN with slash 
    t.put("nsucc", 0x02281);  // DOES NOT SUCCEED 
    t.put("nsucceq", 0x02AB0, 0x00338);  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN with slash 
    t.put("nsup", 0x02285);  // NOT A SUPERSET OF 
    t.put("nsupE", 0x02AC6, 0x00338);  // SUPERSET OF ABOVE EQUALS SIGN with slash 
    t.put("nsupe", 0x02289);  // NEITHER A SUPERSET OF NOR EQUAL TO 
    t.put("nsupset", 0x02283, 0x020D2);  // SUPERSET OF with vertical line 
    t.put("nsupseteq", 0x02289);  // NEITHER A SUPERSET OF NOR EQUAL TO 
    t.put("nsupseteqq", 0x02AC6, 0x00338);  // SUPERSET OF ABOVE EQUALS SIGN with slash 
    t.put("ntgl", 0x02279);  // NEITHER GREATER-THAN NOR LESS-THAN 
    t.put("ntilde", 0x000F1);  // LATIN SMALL LETTER N WITH TILDE 
    t.put("ntlg", 0x02278);  // NEITHER LESS-THAN NOR GREATER-THAN 
    t.put("ntriangleleft", 0x022EA);  // NOT NORMAL SUBGROUP OF 
    t.put("ntrianglelefteq", 0x022EC);  // NOT NORMAL SUBGROUP OF OR EQUAL TO 
    t.put("ntriangleright", 0x022EB);  // DOES NOT CONTAIN AS NORMAL SUBGROUP 
    t.put("ntrianglerighteq", 0x022ED);  // DOES NOT CONTAIN AS NORMAL SUBGROUP OR EQUAL 
    t.put("nu", 0x003BD);  // GREEK SMALL LETTER NU 
    t.put("num", 0x00023);  // NUMBER SIGN 
    t.put("numero", 0x02116);  // NUMERO SIGN 
    t.put("numsp", 0x02007);  // FIGURE SPACE 
    t.put("nvDash", 0x022AD);  // NOT TRUE 
    t.put("nvHarr", 0x02904);  // LEFT RIGHT DOUBLE ARROW WITH VERTICAL STROKE 
    t.put("nvap", 0x0224D, 0x020D2);  // EQUIVALENT TO with vertical line 
    t.put("nvdash", 0x022AC);  // DOES NOT PROVE 
    t.put("nvge", 0x02265, 0x020D2);  // GREATER-THAN OR EQUAL TO with vertical line 
    t.put("nvgt", 0x0003E, 0x020D2);  // GREATER-THAN SIGN with vertical line 
    t.put("nvinfin", 0x029DE);  // INFINITY NEGATED WITH VERTICAL BAR 
    t.put("nvlArr", 0x02902);  // LEFTWARDS DOUBLE ARROW WITH VERTICAL STROKE 
    t.put("nvle", 0x02264, 0x020D2);  // LESS-THAN OR EQUAL TO with vertical line 
    t.put("nvlt", 0x0003C, 0x020D2);  // LESS-THAN SIGN with vertical line 
    t.put("nvltrie", 0x022B4, 0x020D2);  // NORMAL SUBGROUP OF OR EQUAL TO with vertical line 
    t.put("nvrArr", 0x02903);  // RIGHTWARDS DOUBLE ARROW WITH VERTICAL STROKE 
    t.put("nvrtrie", 0x022B5, 0x020D2);  // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO with vertical line 
    t.put("nvsim", 0x0223C, 0x020D2);  // TILDE OPERATOR with vertical line 
    t.put("nwArr", 0x021D6);  // NORTH WEST DOUBLE ARROW 
    t.put("nwarhk", 0x02923);  // NORTH WEST ARROW WITH HOOK 
    t.put("nwarr", 0x02196);  // NORTH WEST ARROW 
    t.put("nwarrow", 0x02196);  // NORTH WEST ARROW 
    t.put("nwnear", 0x02927);  // NORTH WEST ARROW AND NORTH EAST ARROW 
    t.put("oS", 0x024C8);  // CIRCLED LATIN CAPITAL LETTER S 
    t.put("oacgr", 0x003CC);  // GREEK SMALL LETTER OMICRON WITH TONOS 
    t.put("oacute", 0x000F3);  // LATIN SMALL LETTER O WITH ACUTE 
    t.put("oast", 0x0229B);  // CIRCLED ASTERISK OPERATOR 
    t.put("ocir", 0x0229A);  // CIRCLED RING OPERATOR 
    t.put("ocirc", 0x000F4);  // LATIN SMALL LETTER O WITH CIRCUMFLEX 
    t.put("ocy", 0x0043E);  // CYRILLIC SMALL LETTER O 
    t.put("odash", 0x0229D);  // CIRCLED DASH 
    t.put("odblac", 0x00151);  // LATIN SMALL LETTER O WITH DOUBLE ACUTE 
    t.put("odiv", 0x02A38);  // CIRCLED DIVISION SIGN 
    t.put("odot", 0x02299);  // CIRCLED DOT OPERATOR 
    t.put("odsold", 0x029BC);  // CIRCLED ANTICLOCKWISE-ROTATED DIVISION SIGN 
    t.put("oelig", 0x00153);  // LATIN SMALL LIGATURE OE 
    t.put("ofcir", 0x029BF);  // CIRCLED BULLET 
    t.put("ofr", 0x1D52C);  // MATHEMATICAL FRAKTUR SMALL O 
    t.put("ogon", 0x002DB);  // OGONEK 
    t.put("ogr", 0x003BF);  // GREEK SMALL LETTER OMICRON 
    t.put("ograve", 0x000F2);  // LATIN SMALL LETTER O WITH GRAVE 
    t.put("ogt", 0x029C1);  // CIRCLED GREATER-THAN 
    t.put("ohacgr", 0x003CE);  // GREEK SMALL LETTER OMEGA WITH TONOS 
    t.put("ohbar", 0x029B5);  // CIRCLE WITH HORIZONTAL BAR 
    t.put("ohgr", 0x003C9);  // GREEK SMALL LETTER OMEGA 
    t.put("ohm", 0x003A9);  // GREEK CAPITAL LETTER OMEGA 
    t.put("oint", 0x0222E);  // CONTOUR INTEGRAL 
    t.put("olarr", 0x021BA);  // ANTICLOCKWISE OPEN CIRCLE ARROW 
    t.put("olcir", 0x029BE);  // CIRCLED WHITE BULLET 
    t.put("olcross", 0x029BB);  // CIRCLE WITH SUPERIMPOSED X 
    t.put("oline", 0x0203E);  // OVERLINE 
    t.put("olt", 0x029C0);  // CIRCLED LESS-THAN 
    t.put("omacr", 0x0014D);  // LATIN SMALL LETTER O WITH MACRON 
    t.put("omega", 0x003C9);  // GREEK SMALL LETTER OMEGA 
    t.put("omicron", 0x003BF);  // GREEK SMALL LETTER OMICRON 
    t.put("omid", 0x029B6);  // CIRCLED VERTICAL BAR 
    t.put("ominus", 0x02296);  // CIRCLED MINUS 
    t.put("oopf", 0x1D560);  // MATHEMATICAL DOUBLE-STRUCK SMALL O 
    t.put("opar", 0x029B7);  // CIRCLED PARALLEL 
    t.put("operp", 0x029B9);  // CIRCLED PERPENDICULAR 
    t.put("oplus", 0x02295);  // CIRCLED PLUS 
    t.put("or", 0x02228);  // LOGICAL OR 
    t.put("orarr", 0x021BB);  // CLOCKWISE OPEN CIRCLE ARROW 
    t.put("ord", 0x02A5D);  // LOGICAL OR WITH HORIZONTAL DASH 
    t.put("order", 0x02134);  // SCRIPT SMALL O 
    t.put("orderof", 0x02134);  // SCRIPT SMALL O 
    t.put("ordf", 0x000AA);  // FEMININE ORDINAL INDICATOR 
    t.put("ordm", 0x000BA);  // MASCULINE ORDINAL INDICATOR 
    t.put("origof", 0x022B6);  // ORIGINAL OF 
    t.put("oror", 0x02A56);  // TWO INTERSECTING LOGICAL OR 
    t.put("orslope", 0x02A57);  // SLOPING LARGE OR 
    t.put("orv", 0x02A5B);  // LOGICAL OR WITH MIDDLE STEM 
    t.put("oscr", 0x02134);  // SCRIPT SMALL O 
    t.put("oslash", 0x000F8);  // LATIN SMALL LETTER O WITH STROKE 
    t.put("osol", 0x02298);  // CIRCLED DIVISION SLASH 
    t.put("otilde", 0x000F5);  // LATIN SMALL LETTER O WITH TILDE 
    t.put("otimes", 0x02297);  // CIRCLED TIMES 
    t.put("otimesas", 0x02A36);  // CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT 
    t.put("ouml", 0x000F6);  // LATIN SMALL LETTER O WITH DIAERESIS 
    t.put("ovbar", 0x0233D);  // APL FUNCTIONAL SYMBOL CIRCLE STILE 
    t.put("par", 0x02225);  // PARALLEL TO 
    t.put("para", 0x000B6);  // PILCROW SIGN 
    t.put("parallel", 0x02225);  // PARALLEL TO 
    t.put("parsim", 0x02AF3);  // PARALLEL WITH TILDE OPERATOR 
    t.put("parsl", 0x02AFD);  // DOUBLE SOLIDUS OPERATOR 
    t.put("part", 0x02202);  // PARTIAL DIFFERENTIAL 
    t.put("pcy", 0x0043F);  // CYRILLIC SMALL LETTER PE 
    t.put("percnt", 0x00025);  // PERCENT SIGN 
    t.put("period", 0x0002E);  // FULL STOP 
    t.put("permil", 0x02030);  // PER MILLE SIGN 
    t.put("perp", 0x022A5);  // UP TACK 
    t.put("pertenk", 0x02031);  // PER TEN THOUSAND SIGN 
    t.put("pfr", 0x1D52D);  // MATHEMATICAL FRAKTUR SMALL P 
    t.put("pgr", 0x003C0);  // GREEK SMALL LETTER PI 
    t.put("phgr", 0x003C6);  // GREEK SMALL LETTER PHI 
    t.put("phi", 0x003C6);  // GREEK SMALL LETTER PHI 
    t.put("phiv", 0x003D5);  // GREEK PHI SYMBOL 
    t.put("phmmat", 0x02133);  // SCRIPT CAPITAL M 
    t.put("phone", 0x0260E);  // BLACK TELEPHONE 
    t.put("pi", 0x003C0);  // GREEK SMALL LETTER PI 
    t.put("pitchfork", 0x022D4);  // PITCHFORK 
    t.put("piv", 0x003D6);  // GREEK PI SYMBOL 
    t.put("planck", 0x0210F);  // PLANCK CONSTANT OVER TWO PI 
    t.put("planckh", 0x0210E);  // PLANCK CONSTANT 
    t.put("plankv", 0x0210F);  // PLANCK CONSTANT OVER TWO PI 
    t.put("plus", 0x0002B);  // PLUS SIGN 
    t.put("plusacir", 0x02A23);  // PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE 
    t.put("plusb", 0x0229E);  // SQUARED PLUS 
    t.put("pluscir", 0x02A22);  // PLUS SIGN WITH SMALL CIRCLE ABOVE 
    t.put("plusdo", 0x02214);  // DOT PLUS 
    t.put("plusdu", 0x02A25);  // PLUS SIGN WITH DOT BELOW 
    t.put("pluse", 0x02A72);  // PLUS SIGN ABOVE EQUALS SIGN 
    t.put("plusmn", 0x000B1);  // PLUS-MINUS SIGN 
    t.put("plussim", 0x02A26);  // PLUS SIGN WITH TILDE BELOW 
    t.put("plustwo", 0x02A27);  // PLUS SIGN WITH SUBSCRIPT TWO 
    t.put("pm", 0x000B1);  // PLUS-MINUS SIGN 
    t.put("pointint", 0x02A15);  // INTEGRAL AROUND A POINT OPERATOR 
    t.put("popf", 0x1D561);  // MATHEMATICAL DOUBLE-STRUCK SMALL P 
    t.put("pound", 0x000A3);  // POUND SIGN 
    t.put("pr", 0x0227A);  // PRECEDES 
    t.put("prE", 0x02AB3);  // PRECEDES ABOVE EQUALS SIGN 
    t.put("prap", 0x02AB7);  // PRECEDES ABOVE ALMOST EQUAL TO 
    t.put("prcue", 0x0227C);  // PRECEDES OR EQUAL TO 
    t.put("pre", 0x02AAF);  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN 
    t.put("prec", 0x0227A);  // PRECEDES 
    t.put("precapprox", 0x02AB7);  // PRECEDES ABOVE ALMOST EQUAL TO 
    t.put("preccurlyeq", 0x0227C);  // PRECEDES OR EQUAL TO 
    t.put("preceq", 0x02AAF);  // PRECEDES ABOVE SINGLE-LINE EQUALS SIGN 
    t.put("precnapprox", 0x02AB9);  // PRECEDES ABOVE NOT ALMOST EQUAL TO 
    t.put("precneqq", 0x02AB5);  // PRECEDES ABOVE NOT EQUAL TO 
    t.put("precnsim", 0x022E8);  // PRECEDES BUT NOT EQUIVALENT TO 
    t.put("precsim", 0x0227E);  // PRECEDES OR EQUIVALENT TO 
    t.put("prime", 0x02032);  // PRIME 
    t.put("primes", 0x02119);  // DOUBLE-STRUCK CAPITAL P 
    t.put("prnE", 0x02AB5);  // PRECEDES ABOVE NOT EQUAL TO 
    t.put("prnap", 0x02AB9);  // PRECEDES ABOVE NOT ALMOST EQUAL TO 
    t.put("prnsim", 0x022E8);  // PRECEDES BUT NOT EQUIVALENT TO 
    t.put("prod", 0x0220F);  // N-ARY PRODUCT 
    t.put("profalar", 0x0232E);  // ALL AROUND-PROFILE 
    t.put("profline", 0x02312);  // ARC 
    t.put("profsurf", 0x02313);  // SEGMENT 
    t.put("prop", 0x0221D);  // PROPORTIONAL TO 
    t.put("propto", 0x0221D);  // PROPORTIONAL TO 
    t.put("prsim", 0x0227E);  // PRECEDES OR EQUIVALENT TO 
    t.put("prurel", 0x022B0);  // PRECEDES UNDER RELATION 
    t.put("pscr", 0x1D4C5);  // MATHEMATICAL SCRIPT SMALL P 
    t.put("psgr", 0x003C8);  // GREEK SMALL LETTER PSI 
    t.put("psi", 0x003C8);  // GREEK SMALL LETTER PSI 
    t.put("puncsp", 0x02008);  // PUNCTUATION SPACE 
    t.put("qfr", 0x1D52E);  // MATHEMATICAL FRAKTUR SMALL Q 
    t.put("qint", 0x02A0C);  // QUADRUPLE INTEGRAL OPERATOR 
    t.put("qopf", 0x1D562);  // MATHEMATICAL DOUBLE-STRUCK SMALL Q 
    t.put("qprime", 0x02057);  // QUADRUPLE PRIME 
    t.put("qscr", 0x1D4C6);  // MATHEMATICAL SCRIPT SMALL Q 
    t.put("quaternions", 0x0210D);  // DOUBLE-STRUCK CAPITAL H 
    t.put("quatint", 0x02A16);  // QUATERNION INTEGRAL OPERATOR 
    t.put("quest", 0x0003F);  // QUESTION MARK 
    t.put("questeq", 0x0225F);  // QUESTIONED EQUAL TO 
    t.put("quot", 0x00022);  // QUOTATION MARK 
    t.put("rAarr", 0x021DB);  // RIGHTWARDS TRIPLE ARROW 
    t.put("rArr", 0x021D2);  // RIGHTWARDS DOUBLE ARROW 
    t.put("rAtail", 0x0291C);  // RIGHTWARDS DOUBLE ARROW-TAIL 
    t.put("rBarr", 0x0290F);  // RIGHTWARDS TRIPLE DASH ARROW 
    t.put("rHar", 0x02964);  // RIGHTWARDS HARPOON WITH BARB UP ABOVE RIGHTWARDS HARPOON WITH BARB DOWN 
    t.put("race", 0x0223D, 0x00331);  // REVERSED TILDE with underline 
    t.put("racute", 0x00155);  // LATIN SMALL LETTER R WITH ACUTE 
    t.put("radic", 0x0221A);  // SQUARE ROOT 
    t.put("raemptyv", 0x029B3);  // EMPTY SET WITH RIGHT ARROW ABOVE 
    t.put("rang", 0x027E9);  // MATHEMATICAL RIGHT ANGLE BRACKET 
    t.put("rangd", 0x02992);  // RIGHT ANGLE BRACKET WITH DOT 
    t.put("range", 0x029A5);  // REVERSED ANGLE WITH UNDERBAR 
    t.put("rangle", 0x027E9);  // MATHEMATICAL RIGHT ANGLE BRACKET 
    t.put("raquo", 0x000BB);  // RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK 
    t.put("rarr", 0x02192);  // RIGHTWARDS ARROW 
    t.put("rarrap", 0x02975);  // RIGHTWARDS ARROW ABOVE ALMOST EQUAL TO 
    t.put("rarrb", 0x021E5);  // RIGHTWARDS ARROW TO BAR 
    t.put("rarrbfs", 0x02920);  // RIGHTWARDS ARROW FROM BAR TO BLACK DIAMOND 
    t.put("rarrc", 0x02933);  // WAVE ARROW POINTING DIRECTLY RIGHT 
    t.put("rarrfs", 0x0291E);  // RIGHTWARDS ARROW TO BLACK DIAMOND 
    t.put("rarrhk", 0x021AA);  // RIGHTWARDS ARROW WITH HOOK 
    t.put("rarrlp", 0x021AC);  // RIGHTWARDS ARROW WITH LOOP 
    t.put("rarrpl", 0x02945);  // RIGHTWARDS ARROW WITH PLUS BELOW 
    t.put("rarrsim", 0x02974);  // RIGHTWARDS ARROW ABOVE TILDE OPERATOR 
    t.put("rarrtl", 0x021A3);  // RIGHTWARDS ARROW WITH TAIL 
    t.put("rarrw", 0x0219D);  // RIGHTWARDS WAVE ARROW 
    t.put("ratail", 0x0291A);  // RIGHTWARDS ARROW-TAIL 
    t.put("ratio", 0x02236);  // RATIO 
    t.put("rationals", 0x0211A);  // DOUBLE-STRUCK CAPITAL Q 
    t.put("rbarr", 0x0290D);  // RIGHTWARDS DOUBLE DASH ARROW 
    t.put("rbbrk", 0x02773);  // LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT 
    t.put("rbrace", 0x0007D);  // RIGHT CURLY BRACKET 
    t.put("rbrack", 0x0005D);  // RIGHT SQUARE BRACKET 
    t.put("rbrke", 0x0298C);  // RIGHT SQUARE BRACKET WITH UNDERBAR 
    t.put("rbrksld", 0x0298E);  // RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER 
    t.put("rbrkslu", 0x02990);  // RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER 
    t.put("rcaron", 0x00159);  // LATIN SMALL LETTER R WITH CARON 
    t.put("rcedil", 0x00157);  // LATIN SMALL LETTER R WITH CEDILLA 
    t.put("rceil", 0x02309);  // RIGHT CEILING 
    t.put("rcub", 0x0007D);  // RIGHT CURLY BRACKET 
    t.put("rcy", 0x00440);  // CYRILLIC SMALL LETTER ER 
    t.put("rdca", 0x02937);  // ARROW POINTING DOWNWARDS THEN CURVING RIGHTWARDS 
    t.put("rdldhar", 0x02969);  // RIGHTWARDS HARPOON WITH BARB DOWN ABOVE LEFTWARDS HARPOON WITH BARB DOWN 
    t.put("rdquo", 0x0201D);  // RIGHT DOUBLE QUOTATION MARK 
    t.put("rdquor", 0x0201D);  // RIGHT DOUBLE QUOTATION MARK 
    t.put("rdsh", 0x021B3);  // DOWNWARDS ARROW WITH TIP RIGHTWARDS 
    t.put("real", 0x0211C);  // BLACK-LETTER CAPITAL R 
    t.put("realine", 0x0211B);  // SCRIPT CAPITAL R 
    t.put("realpart", 0x0211C);  // BLACK-LETTER CAPITAL R 
    t.put("reals", 0x0211D);  // DOUBLE-STRUCK CAPITAL R 
    t.put("rect", 0x025AD);  // WHITE RECTANGLE 
    t.put("reg", 0x000AE);  // REGISTERED SIGN 
    t.put("rfisht", 0x0297D);  // RIGHT FISH TAIL 
    t.put("rfloor", 0x0230B);  // RIGHT FLOOR 
    t.put("rfr", 0x1D52F);  // MATHEMATICAL FRAKTUR SMALL R 
    t.put("rgr", 0x003C1);  // GREEK SMALL LETTER RHO 
    t.put("rhard", 0x021C1);  // RIGHTWARDS HARPOON WITH BARB DOWNWARDS 
    t.put("rharu", 0x021C0);  // RIGHTWARDS HARPOON WITH BARB UPWARDS 
    t.put("rharul", 0x0296C);  // RIGHTWARDS HARPOON WITH BARB UP ABOVE LONG DASH 
    t.put("rho", 0x003C1);  // GREEK SMALL LETTER RHO 
    t.put("rhov", 0x003F1);  // GREEK RHO SYMBOL 
    t.put("rightarrow", 0x02192);  // RIGHTWARDS ARROW 
    t.put("rightarrowtail", 0x021A3);  // RIGHTWARDS ARROW WITH TAIL 
    t.put("rightharpoondown", 0x021C1);  // RIGHTWARDS HARPOON WITH BARB DOWNWARDS 
    t.put("rightharpoonup", 0x021C0);  // RIGHTWARDS HARPOON WITH BARB UPWARDS 
    t.put("rightleftarrows", 0x021C4);  // RIGHTWARDS ARROW OVER LEFTWARDS ARROW 
    t.put("rightleftharpoons", 0x021CC);  // RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON 
    t.put("rightrightarrows", 0x021C9);  // RIGHTWARDS PAIRED ARROWS 
    t.put("rightsquigarrow", 0x0219D);  // RIGHTWARDS WAVE ARROW 
    t.put("rightthreetimes", 0x022CC);  // RIGHT SEMIDIRECT PRODUCT 
    t.put("ring", 0x002DA);  // RING ABOVE 
    t.put("risingdotseq", 0x02253);  // IMAGE OF OR APPROXIMATELY EQUAL TO 
    t.put("rlarr", 0x021C4);  // RIGHTWARDS ARROW OVER LEFTWARDS ARROW 
    t.put("rlhar", 0x021CC);  // RIGHTWARDS HARPOON OVER LEFTWARDS HARPOON 
    t.put("rlm", 0x0200F);  // RIGHT-TO-LEFT MARK 
    t.put("rmoust", 0x023B1);  // UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION 
    t.put("rmoustache", 0x023B1);  // UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION 
    t.put("rnmid", 0x02AEE);  // DOES NOT DIVIDE WITH REVERSED NEGATION SLASH 
    t.put("roang", 0x027ED);  // MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET 
    t.put("roarr", 0x021FE);  // RIGHTWARDS OPEN-HEADED ARROW 
    t.put("robrk", 0x027E7);  // MATHEMATICAL RIGHT WHITE SQUARE BRACKET 
    t.put("ropar", 0x02986);  // RIGHT WHITE PARENTHESIS 
    t.put("ropf", 0x1D563);  // MATHEMATICAL DOUBLE-STRUCK SMALL R 
    t.put("roplus", 0x02A2E);  // PLUS SIGN IN RIGHT HALF CIRCLE 
    t.put("rotimes", 0x02A35);  // MULTIPLICATION SIGN IN RIGHT HALF CIRCLE 
    t.put("rpar", 0x00029);  // RIGHT PARENTHESIS 
    t.put("rpargt", 0x02994);  // RIGHT ARC GREATER-THAN BRACKET 
    t.put("rppolint", 0x02A12);  // LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE 
    t.put("rrarr", 0x021C9);  // RIGHTWARDS PAIRED ARROWS 
    t.put("rsaquo", 0x0203A);  // SINGLE RIGHT-POINTING ANGLE QUOTATION MARK 
    t.put("rscr", 0x1D4C7);  // MATHEMATICAL SCRIPT SMALL R 
    t.put("rsh", 0x021B1);  // UPWARDS ARROW WITH TIP RIGHTWARDS 
    t.put("rsqb", 0x0005D);  // RIGHT SQUARE BRACKET 
    t.put("rsquo", 0x02019);  // RIGHT SINGLE QUOTATION MARK 
    t.put("rsquor", 0x02019);  // RIGHT SINGLE QUOTATION MARK 
    t.put("rthree", 0x022CC);  // RIGHT SEMIDIRECT PRODUCT 
    t.put("rtimes", 0x022CA);  // RIGHT NORMAL FACTOR SEMIDIRECT PRODUCT 
    t.put("rtri", 0x025B9);  // WHITE RIGHT-POINTING SMALL TRIANGLE 
    t.put("rtrie", 0x022B5);  // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO 
    t.put("rtrif", 0x025B8);  // BLACK RIGHT-POINTING SMALL TRIANGLE 
    t.put("rtriltri", 0x029CE);  // RIGHT TRIANGLE ABOVE LEFT TRIANGLE 
    t.put("ruluhar", 0x02968);  // RIGHTWARDS HARPOON WITH BARB UP ABOVE LEFTWARDS HARPOON WITH BARB UP 
    t.put("rx", 0x0211E);  // PRESCRIPTION TAKE 
    t.put("sacute", 0x0015B);  // LATIN SMALL LETTER S WITH ACUTE 
    t.put("sbquo", 0x0201A);  // SINGLE LOW-9 QUOTATION MARK 
    t.put("sc", 0x0227B);  // SUCCEEDS 
    t.put("scE", 0x02AB4);  // SUCCEEDS ABOVE EQUALS SIGN 
    t.put("scap", 0x02AB8);  // SUCCEEDS ABOVE ALMOST EQUAL TO 
    t.put("scaron", 0x00161);  // LATIN SMALL LETTER S WITH CARON 
    t.put("sccue", 0x0227D);  // SUCCEEDS OR EQUAL TO 
    t.put("sce", 0x02AB0);  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN 
    t.put("scedil", 0x0015F);  // LATIN SMALL LETTER S WITH CEDILLA 
    t.put("scirc", 0x0015D);  // LATIN SMALL LETTER S WITH CIRCUMFLEX 
    t.put("scnE", 0x02AB6);  // SUCCEEDS ABOVE NOT EQUAL TO 
    t.put("scnap", 0x02ABA);  // SUCCEEDS ABOVE NOT ALMOST EQUAL TO 
    t.put("scnsim", 0x022E9);  // SUCCEEDS BUT NOT EQUIVALENT TO 
    t.put("scpolint", 0x02A13);  // LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE 
    t.put("scsim", 0x0227F);  // SUCCEEDS OR EQUIVALENT TO 
    t.put("scy", 0x00441);  // CYRILLIC SMALL LETTER ES 
    t.put("sdot", 0x022C5);  // DOT OPERATOR 
    t.put("sdotb", 0x022A1);  // SQUARED DOT OPERATOR 
    t.put("sdote", 0x02A66);  // EQUALS SIGN WITH DOT BELOW 
    t.put("seArr", 0x021D8);  // SOUTH EAST DOUBLE ARROW 
    t.put("searhk", 0x02925);  // SOUTH EAST ARROW WITH HOOK 
    t.put("searr", 0x02198);  // SOUTH EAST ARROW 
    t.put("searrow", 0x02198);  // SOUTH EAST ARROW 
    t.put("sect", 0x000A7);  // SECTION SIGN 
    t.put("semi", 0x0003B);  // SEMICOLON 
    t.put("seswar", 0x02929);  // SOUTH EAST ARROW AND SOUTH WEST ARROW 
    t.put("setminus", 0x02216);  // SET MINUS 
    t.put("setmn", 0x02216);  // SET MINUS 
    t.put("sext", 0x02736);  // SIX POINTED BLACK STAR 
    t.put("sfgr", 0x003C2);  // GREEK SMALL LETTER FINAL SIGMA 
    t.put("sfr", 0x1D530);  // MATHEMATICAL FRAKTUR SMALL S 
    t.put("sfrown", 0x02322);  // FROWN 
    t.put("sgr", 0x003C3);  // GREEK SMALL LETTER SIGMA 
    t.put("sharp", 0x0266F);  // MUSIC SHARP SIGN 
    t.put("shchcy", 0x00449);  // CYRILLIC SMALL LETTER SHCHA 
    t.put("shcy", 0x00448);  // CYRILLIC SMALL LETTER SHA 
    t.put("shortmid", 0x02223);  // DIVIDES 
    t.put("shortparallel", 0x02225);  // PARALLEL TO 
    t.put("shy", 0x000AD);  // SOFT HYPHEN 
    t.put("sigma", 0x003C3);  // GREEK SMALL LETTER SIGMA 
    t.put("sigmaf", 0x003C2);  // GREEK SMALL LETTER FINAL SIGMA 
    t.put("sigmav", 0x003C2);  // GREEK SMALL LETTER FINAL SIGMA 
    t.put("sim", 0x0223C);  // TILDE OPERATOR 
    t.put("simdot", 0x02A6A);  // TILDE OPERATOR WITH DOT ABOVE 
    t.put("sime", 0x02243);  // ASYMPTOTICALLY EQUAL TO 
    t.put("simeq", 0x02243);  // ASYMPTOTICALLY EQUAL TO 
    t.put("simg", 0x02A9E);  // SIMILAR OR GREATER-THAN 
    t.put("simgE", 0x02AA0);  // SIMILAR ABOVE GREATER-THAN ABOVE EQUALS SIGN 
    t.put("siml", 0x02A9D);  // SIMILAR OR LESS-THAN 
    t.put("simlE", 0x02A9F);  // SIMILAR ABOVE LESS-THAN ABOVE EQUALS SIGN 
    t.put("simne", 0x02246);  // APPROXIMATELY BUT NOT ACTUALLY EQUAL TO 
    t.put("simplus", 0x02A24);  // PLUS SIGN WITH TILDE ABOVE 
    t.put("simrarr", 0x02972);  // TILDE OPERATOR ABOVE RIGHTWARDS ARROW 
    t.put("slarr", 0x02190);  // LEFTWARDS ARROW 
    t.put("smallsetminus", 0x02216);  // SET MINUS 
    t.put("smashp", 0x02A33);  // SMASH PRODUCT 
    t.put("smeparsl", 0x029E4);  // EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE 
    t.put("smid", 0x02223);  // DIVIDES 
    t.put("smile", 0x02323);  // SMILE 
    t.put("smt", 0x02AAA);  // SMALLER THAN 
    t.put("smte", 0x02AAC);  // SMALLER THAN OR EQUAL TO 
    t.put("smtes", 0x02AAC, 0x0FE00);  // SMALLER THAN OR slanted EQUAL 
    t.put("softcy", 0x0044C);  // CYRILLIC SMALL LETTER SOFT SIGN 
    t.put("sol", 0x0002F);  // SOLIDUS 
    t.put("solb", 0x029C4);  // SQUARED RISING DIAGONAL SLASH 
    t.put("solbar", 0x0233F);  // APL FUNCTIONAL SYMBOL SLASH BAR 
    t.put("sopf", 0x1D564);  // MATHEMATICAL DOUBLE-STRUCK SMALL S 
    t.put("spades", 0x02660);  // BLACK SPADE SUIT 
    t.put("spadesuit", 0x02660);  // BLACK SPADE SUIT 
    t.put("spar", 0x02225);  // PARALLEL TO 
    t.put("sqcap", 0x02293);  // SQUARE CAP 
    t.put("sqcaps", 0x02293, 0x0FE00);  // SQUARE CAP with serifs 
    t.put("sqcup", 0x02294);  // SQUARE CUP 
    t.put("sqcups", 0x02294, 0x0FE00);  // SQUARE CUP with serifs 
    t.put("sqsub", 0x0228F);  // SQUARE IMAGE OF 
    t.put("sqsube", 0x02291);  // SQUARE IMAGE OF OR EQUAL TO 
    t.put("sqsubset", 0x0228F);  // SQUARE IMAGE OF 
    t.put("sqsubseteq", 0x02291);  // SQUARE IMAGE OF OR EQUAL TO 
    t.put("sqsup", 0x02290);  // SQUARE ORIGINAL OF 
    t.put("sqsupe", 0x02292);  // SQUARE ORIGINAL OF OR EQUAL TO 
    t.put("sqsupset", 0x02290);  // SQUARE ORIGINAL OF 
    t.put("sqsupseteq", 0x02292);  // SQUARE ORIGINAL OF OR EQUAL TO 
    t.put("squ", 0x025A1);  // WHITE SQUARE 
    t.put("square", 0x025A1);  // WHITE SQUARE 
    t.put("squarf", 0x025AA);  // BLACK SMALL SQUARE 
    t.put("squf", 0x025AA);  // BLACK SMALL SQUARE 
    t.put("srarr", 0x02192);  // RIGHTWARDS ARROW 
    t.put("sscr", 0x1D4C8);  // MATHEMATICAL SCRIPT SMALL S 
    t.put("ssetmn", 0x02216);  // SET MINUS 
    t.put("ssmile", 0x02323);  // SMILE 
    t.put("sstarf", 0x022C6);  // STAR OPERATOR 
    t.put("star", 0x02606);  // WHITE STAR 
    t.put("starf", 0x02605);  // BLACK STAR 
    t.put("straightepsilon", 0x003F5);  // GREEK LUNATE EPSILON SYMBOL 
    t.put("straightphi", 0x003D5);  // GREEK PHI SYMBOL 
    t.put("strns", 0x000AF);  // MACRON 
    t.put("sub", 0x02282);  // SUBSET OF 
    t.put("subE", 0x02AC5);  // SUBSET OF ABOVE EQUALS SIGN 
    t.put("subdot", 0x02ABD);  // SUBSET WITH DOT 
    t.put("sube", 0x02286);  // SUBSET OF OR EQUAL TO 
    t.put("subedot", 0x02AC3);  // SUBSET OF OR EQUAL TO WITH DOT ABOVE 
    t.put("submult", 0x02AC1);  // SUBSET WITH MULTIPLICATION SIGN BELOW 
    t.put("subnE", 0x02ACB);  // SUBSET OF ABOVE NOT EQUAL TO 
    t.put("subne", 0x0228A);  // SUBSET OF WITH NOT EQUAL TO 
    t.put("subplus", 0x02ABF);  // SUBSET WITH PLUS SIGN BELOW 
    t.put("subrarr", 0x02979);  // SUBSET ABOVE RIGHTWARDS ARROW 
    t.put("subset", 0x02282);  // SUBSET OF 
    t.put("subseteq", 0x02286);  // SUBSET OF OR EQUAL TO 
    t.put("subseteqq", 0x02AC5);  // SUBSET OF ABOVE EQUALS SIGN 
    t.put("subsetneq", 0x0228A);  // SUBSET OF WITH NOT EQUAL TO 
    t.put("subsetneqq", 0x02ACB);  // SUBSET OF ABOVE NOT EQUAL TO 
    t.put("subsim", 0x02AC7);  // SUBSET OF ABOVE TILDE OPERATOR 
    t.put("subsub", 0x02AD5);  // SUBSET ABOVE SUBSET 
    t.put("subsup", 0x02AD3);  // SUBSET ABOVE SUPERSET 
    t.put("succ", 0x0227B);  // SUCCEEDS 
    t.put("succapprox", 0x02AB8);  // SUCCEEDS ABOVE ALMOST EQUAL TO 
    t.put("succcurlyeq", 0x0227D);  // SUCCEEDS OR EQUAL TO 
    t.put("succeq", 0x02AB0);  // SUCCEEDS ABOVE SINGLE-LINE EQUALS SIGN 
    t.put("succnapprox", 0x02ABA);  // SUCCEEDS ABOVE NOT ALMOST EQUAL TO 
    t.put("succneqq", 0x02AB6);  // SUCCEEDS ABOVE NOT EQUAL TO 
    t.put("succnsim", 0x022E9);  // SUCCEEDS BUT NOT EQUIVALENT TO 
    t.put("succsim", 0x0227F);  // SUCCEEDS OR EQUIVALENT TO 
    t.put("sum", 0x02211);  // N-ARY SUMMATION 
    t.put("sung", 0x0266A);  // EIGHTH NOTE 
    t.put("sup", 0x02283);  // SUPERSET OF 
    t.put("sup1", 0x000B9);  // SUPERSCRIPT ONE 
    t.put("sup2", 0x000B2);  // SUPERSCRIPT TWO 
    t.put("sup3", 0x000B3);  // SUPERSCRIPT THREE 
    t.put("supE", 0x02AC6);  // SUPERSET OF ABOVE EQUALS SIGN 
    t.put("supdot", 0x02ABE);  // SUPERSET WITH DOT 
    t.put("supdsub", 0x02AD8);  // SUPERSET BESIDE AND JOINED BY DASH WITH SUBSET 
    t.put("supe", 0x02287);  // SUPERSET OF OR EQUAL TO 
    t.put("supedot", 0x02AC4);  // SUPERSET OF OR EQUAL TO WITH DOT ABOVE 
    t.put("suphsol", 0x027C9);  // SUPERSET PRECEDING SOLIDUS 
    t.put("suphsub", 0x02AD7);  // SUPERSET BESIDE SUBSET 
    t.put("suplarr", 0x0297B);  // SUPERSET ABOVE LEFTWARDS ARROW 
    t.put("supmult", 0x02AC2);  // SUPERSET WITH MULTIPLICATION SIGN BELOW 
    t.put("supnE", 0x02ACC);  // SUPERSET OF ABOVE NOT EQUAL TO 
    t.put("supne", 0x0228B);  // SUPERSET OF WITH NOT EQUAL TO 
    t.put("supplus", 0x02AC0);  // SUPERSET WITH PLUS SIGN BELOW 
    t.put("supset", 0x02283);  // SUPERSET OF 
    t.put("supseteq", 0x02287);  // SUPERSET OF OR EQUAL TO 
    t.put("supseteqq", 0x02AC6);  // SUPERSET OF ABOVE EQUALS SIGN 
    t.put("supsetneq", 0x0228B);  // SUPERSET OF WITH NOT EQUAL TO 
    t.put("supsetneqq", 0x02ACC);  // SUPERSET OF ABOVE NOT EQUAL TO 
    t.put("supsim", 0x02AC8);  // SUPERSET OF ABOVE TILDE OPERATOR 
    t.put("supsub", 0x02AD4);  // SUPERSET ABOVE SUBSET 
    t.put("supsup", 0x02AD6);  // SUPERSET ABOVE SUPERSET 
    t.put("swArr", 0x021D9);  // SOUTH WEST DOUBLE ARROW 
    t.put("swarhk", 0x02926);  // SOUTH WEST ARROW WITH HOOK 
    t.put("swarr", 0x02199);  // SOUTH WEST ARROW 
    t.put("swarrow", 0x02199);  // SOUTH WEST ARROW 
    t.put("swnwar", 0x0292A);  // SOUTH WEST ARROW AND NORTH WEST ARROW 
    t.put("szlig", 0x000DF);  // LATIN SMALL LETTER SHARP S 
    t.put("target", 0x02316);  // POSITION INDICATOR 
    t.put("tau", 0x003C4);  // GREEK SMALL LETTER TAU 
    t.put("tbrk", 0x023B4);  // TOP SQUARE BRACKET 
    t.put("tcaron", 0x00165);  // LATIN SMALL LETTER T WITH CARON 
    t.put("tcedil", 0x00163);  // LATIN SMALL LETTER T WITH CEDILLA 
    t.put("tcy", 0x00442);  // CYRILLIC SMALL LETTER TE 
    t.put("tdot" , 0x020DB);  // COMBINING THREE DOTS ABOVE 
    t.put("telrec", 0x02315);  // TELEPHONE RECORDER 
    t.put("tfr", 0x1D531);  // MATHEMATICAL FRAKTUR SMALL T 
    t.put("tgr", 0x003C4);  // GREEK SMALL LETTER TAU 
    t.put("there4", 0x02234);  // THEREFORE 
    t.put("therefore", 0x02234);  // THEREFORE 
    t.put("theta", 0x003B8);  // GREEK SMALL LETTER THETA 
    t.put("thetasym", 0x003D1);  // GREEK THETA SYMBOL 
    t.put("thetav", 0x003D1);  // GREEK THETA SYMBOL 
    t.put("thgr", 0x003B8);  // GREEK SMALL LETTER THETA 
    t.put("thickapprox", 0x02248);  // ALMOST EQUAL TO 
    t.put("thicksim", 0x0223C);  // TILDE OPERATOR 
    t.put("thinsp", 0x02009);  // THIN SPACE 
    t.put("thkap", 0x02248);  // ALMOST EQUAL TO 
    t.put("thksim", 0x0223C);  // TILDE OPERATOR 
    t.put("thorn", 0x000FE);  // LATIN SMALL LETTER THORN 
    t.put("tilde", 0x002DC);  // SMALL TILDE 
    t.put("times", 0x000D7);  // MULTIPLICATION SIGN 
    t.put("timesb", 0x022A0);  // SQUARED TIMES 
    t.put("timesbar", 0x02A31);  // MULTIPLICATION SIGN WITH UNDERBAR 
    t.put("timesd", 0x02A30);  // MULTIPLICATION SIGN WITH DOT ABOVE 
    t.put("tint", 0x0222D);  // TRIPLE INTEGRAL 
    t.put("toea", 0x02928);  // NORTH EAST ARROW AND SOUTH EAST ARROW 
    t.put("top", 0x022A4);  // DOWN TACK 
    t.put("topbot", 0x02336);  // APL FUNCTIONAL SYMBOL I-BEAM 
    t.put("topcir", 0x02AF1);  // DOWN TACK WITH CIRCLE BELOW 
    t.put("topf", 0x1D565);  // MATHEMATICAL DOUBLE-STRUCK SMALL T 
    t.put("topfork", 0x02ADA);  // PITCHFORK WITH TEE TOP 
    t.put("tosa", 0x02929);  // SOUTH EAST ARROW AND SOUTH WEST ARROW 
    t.put("tprime", 0x02034);  // TRIPLE PRIME 
    t.put("trade", 0x02122);  // TRADE MARK SIGN 
    t.put("triangle", 0x025B5);  // WHITE UP-POINTING SMALL TRIANGLE 
    t.put("triangledown", 0x025BF);  // WHITE DOWN-POINTING SMALL TRIANGLE 
    t.put("triangleleft", 0x025C3);  // WHITE LEFT-POINTING SMALL TRIANGLE 
    t.put("trianglelefteq", 0x022B4);  // NORMAL SUBGROUP OF OR EQUAL TO 
    t.put("triangleq", 0x0225C);  // DELTA EQUAL TO 
    t.put("triangleright", 0x025B9);  // WHITE RIGHT-POINTING SMALL TRIANGLE 
    t.put("trianglerighteq", 0x022B5);  // CONTAINS AS NORMAL SUBGROUP OR EQUAL TO 
    t.put("tridot", 0x025EC);  // WHITE UP-POINTING TRIANGLE WITH DOT 
    t.put("trie", 0x0225C);  // DELTA EQUAL TO 
    t.put("triminus", 0x02A3A);  // MINUS SIGN IN TRIANGLE 
    t.put("triplus", 0x02A39);  // PLUS SIGN IN TRIANGLE 
    t.put("trisb", 0x029CD);  // TRIANGLE WITH SERIFS AT BOTTOM 
    t.put("tritime", 0x02A3B);  // MULTIPLICATION SIGN IN TRIANGLE 
    t.put("trpezium", 0x023E2);  // WHITE TRAPEZIUM 
    t.put("tscr", 0x1D4C9);  // MATHEMATICAL SCRIPT SMALL T 
    t.put("tscy", 0x00446);  // CYRILLIC SMALL LETTER TSE 
    t.put("tshcy", 0x0045B);  // CYRILLIC SMALL LETTER TSHE 
    t.put("tstrok", 0x00167);  // LATIN SMALL LETTER T WITH STROKE 
    t.put("twixt", 0x0226C);  // BETWEEN 
    t.put("twoheadleftarrow", 0x0219E);  // LEFTWARDS TWO HEADED ARROW 
    t.put("twoheadrightarrow", 0x021A0);  // RIGHTWARDS TWO HEADED ARROW 
    t.put("uArr", 0x021D1);  // UPWARDS DOUBLE ARROW 
    t.put("uHar", 0x02963);  // UPWARDS HARPOON WITH BARB LEFT BESIDE UPWARDS HARPOON WITH BARB RIGHT 
    t.put("uacgr", 0x003CD);  // GREEK SMALL LETTER UPSILON WITH TONOS 
    t.put("uacute", 0x000FA);  // LATIN SMALL LETTER U WITH ACUTE 
    t.put("uarr", 0x02191);  // UPWARDS ARROW 
    t.put("ubrcy", 0x0045E);  // CYRILLIC SMALL LETTER SHORT U 
    t.put("ubreve", 0x0016D);  // LATIN SMALL LETTER U WITH BREVE 
    t.put("ucirc", 0x000FB);  // LATIN SMALL LETTER U WITH CIRCUMFLEX 
    t.put("ucy", 0x00443);  // CYRILLIC SMALL LETTER U 
    t.put("udarr", 0x021C5);  // UPWARDS ARROW LEFTWARDS OF DOWNWARDS ARROW 
    t.put("udblac", 0x00171);  // LATIN SMALL LETTER U WITH DOUBLE ACUTE 
    t.put("udhar", 0x0296E);  // UPWARDS HARPOON WITH BARB LEFT BESIDE DOWNWARDS HARPOON WITH BARB RIGHT 
    t.put("udiagr", 0x003B0);  // GREEK SMALL LETTER UPSILON WITH DIALYTIKA AND TONOS 
    t.put("udigr", 0x003CB);  // GREEK SMALL LETTER UPSILON WITH DIALYTIKA 
    t.put("ufisht", 0x0297E);  // UP FISH TAIL 
    t.put("ufr", 0x1D532);  // MATHEMATICAL FRAKTUR SMALL U 
    t.put("ugr", 0x003C5);  // GREEK SMALL LETTER UPSILON 
    t.put("ugrave", 0x000F9);  // LATIN SMALL LETTER U WITH GRAVE 
    t.put("uharl", 0x021BF);  // UPWARDS HARPOON WITH BARB LEFTWARDS 
    t.put("uharr", 0x021BE);  // UPWARDS HARPOON WITH BARB RIGHTWARDS 
    t.put("uhblk", 0x02580);  // UPPER HALF BLOCK 
    t.put("ulcorn", 0x0231C);  // TOP LEFT CORNER 
    t.put("ulcorner", 0x0231C);  // TOP LEFT CORNER 
    t.put("ulcrop", 0x0230F);  // TOP LEFT CROP 
    t.put("ultri", 0x025F8);  // UPPER LEFT TRIANGLE 
    t.put("umacr", 0x0016B);  // LATIN SMALL LETTER U WITH MACRON 
    t.put("uml", 0x000A8);  // DIAERESIS 
    t.put("uogon", 0x00173);  // LATIN SMALL LETTER U WITH OGONEK 
    t.put("uopf", 0x1D566);  // MATHEMATICAL DOUBLE-STRUCK SMALL U 
    t.put("uparrow", 0x02191);  // UPWARDS ARROW 
    t.put("updownarrow", 0x02195);  // UP DOWN ARROW 
    t.put("upharpoonleft", 0x021BF);  // UPWARDS HARPOON WITH BARB LEFTWARDS 
    t.put("upharpoonright", 0x021BE);  // UPWARDS HARPOON WITH BARB RIGHTWARDS 
    t.put("uplus", 0x0228E);  // MULTISET UNION 
    t.put("upsi", 0x003C5);  // GREEK SMALL LETTER UPSILON 
    t.put("upsih", 0x003D2);  // GREEK UPSILON WITH HOOK SYMBOL 
    t.put("upsilon", 0x003C5);  // GREEK SMALL LETTER UPSILON 
    t.put("upuparrows", 0x021C8);  // UPWARDS PAIRED ARROWS 
    t.put("urcorn", 0x0231D);  // TOP RIGHT CORNER 
    t.put("urcorner", 0x0231D);  // TOP RIGHT CORNER 
    t.put("urcrop", 0x0230E);  // TOP RIGHT CROP 
    t.put("uring", 0x0016F);  // LATIN SMALL LETTER U WITH RING ABOVE 
    t.put("urtri", 0x025F9);  // UPPER RIGHT TRIANGLE 
    t.put("uscr", 0x1D4CA);  // MATHEMATICAL SCRIPT SMALL U 
    t.put("utdot", 0x022F0);  // UP RIGHT DIAGONAL ELLIPSIS 
    t.put("utilde", 0x00169);  // LATIN SMALL LETTER U WITH TILDE 
    t.put("utri", 0x025B5);  // WHITE UP-POINTING SMALL TRIANGLE 
    t.put("utrif", 0x025B4);  // BLACK UP-POINTING SMALL TRIANGLE 
    t.put("uuarr", 0x021C8);  // UPWARDS PAIRED ARROWS 
    t.put("uuml", 0x000FC);  // LATIN SMALL LETTER U WITH DIAERESIS 
    t.put("uwangle", 0x029A7);  // OBLIQUE ANGLE OPENING DOWN 
    t.put("vArr", 0x021D5);  // UP DOWN DOUBLE ARROW 
    t.put("vBar", 0x02AE8);  // SHORT UP TACK WITH UNDERBAR 
    t.put("vBarv", 0x02AE9);  // SHORT UP TACK ABOVE SHORT DOWN TACK 
    t.put("vDash", 0x022A8);  // TRUE 
    t.put("vangrt", 0x0299C);  // RIGHT ANGLE VARIANT WITH SQUARE 
    t.put("varepsilon", 0x003F5);  // GREEK LUNATE EPSILON SYMBOL 
    t.put("varkappa", 0x003F0);  // GREEK KAPPA SYMBOL 
    t.put("varnothing", 0x02205);  // EMPTY SET 
    t.put("varphi", 0x003D5);  // GREEK PHI SYMBOL 
    t.put("varpi", 0x003D6);  // GREEK PI SYMBOL 
    t.put("varpropto", 0x0221D);  // PROPORTIONAL TO 
    t.put("varr", 0x02195);  // UP DOWN ARROW 
    t.put("varrho", 0x003F1);  // GREEK RHO SYMBOL 
    t.put("varsigma", 0x003C2);  // GREEK SMALL LETTER FINAL SIGMA 
    t.put("varsubsetneq", 0x0228A, 0x0FE00);  // SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members 
    t.put("varsubsetneqq", 0x02ACB, 0x0FE00);  // SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members 
    t.put("varsupsetneq", 0x0228B, 0x0FE00);  // SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members 
    t.put("varsupsetneqq", 0x02ACC, 0x0FE00);  // SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members 
    t.put("vartheta", 0x003D1);  // GREEK THETA SYMBOL 
    t.put("vartriangleleft", 0x022B2);  // NORMAL SUBGROUP OF 
    t.put("vartriangleright", 0x022B3);  // CONTAINS AS NORMAL SUBGROUP 
    t.put("vcy", 0x00432);  // CYRILLIC SMALL LETTER VE 
    t.put("vdash", 0x022A2);  // RIGHT TACK 
    t.put("vee", 0x02228);  // LOGICAL OR 
    t.put("veebar", 0x022BB);  // XOR 
    t.put("veeeq", 0x0225A);  // EQUIANGULAR TO 
    t.put("vellip", 0x022EE);  // VERTICAL ELLIPSIS 
    t.put("verbar", 0x0007C);  // VERTICAL LINE 
    t.put("vert", 0x0007C);  // VERTICAL LINE 
    t.put("vfr", 0x1D533);  // MATHEMATICAL FRAKTUR SMALL V 
    t.put("vltri", 0x022B2);  // NORMAL SUBGROUP OF 
    t.put("vnsub", 0x02282, 0x020D2);  // SUBSET OF with vertical line 
    t.put("vnsup", 0x02283, 0x020D2);  // SUPERSET OF with vertical line 
    t.put("vopf", 0x1D567);  // MATHEMATICAL DOUBLE-STRUCK SMALL V 
    t.put("vprop", 0x0221D);  // PROPORTIONAL TO 
    t.put("vrtri", 0x022B3);  // CONTAINS AS NORMAL SUBGROUP 
    t.put("vscr", 0x1D4CB);  // MATHEMATICAL SCRIPT SMALL V 
    t.put("vsubnE", 0x02ACB, 0x0FE00);  // SUBSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members 
    t.put("vsubne", 0x0228A, 0x0FE00);  // SUBSET OF WITH NOT EQUAL TO - variant with stroke through bottom members 
    t.put("vsupnE", 0x02ACC, 0x0FE00);  // SUPERSET OF ABOVE NOT EQUAL TO - variant with stroke through bottom members 
    t.put("vsupne", 0x0228B, 0x0FE00);  // SUPERSET OF WITH NOT EQUAL TO - variant with stroke through bottom members 
    t.put("vzigzag", 0x0299A);  // VERTICAL ZIGZAG LINE 
    t.put("wcirc", 0x00175);  // LATIN SMALL LETTER W WITH CIRCUMFLEX 
    t.put("wedbar", 0x02A5F);  // LOGICAL AND WITH UNDERBAR 
    t.put("wedge", 0x02227);  // LOGICAL AND 
    t.put("wedgeq", 0x02259);  // ESTIMATES 
    t.put("weierp", 0x02118);  // SCRIPT CAPITAL P 
    t.put("wfr", 0x1D534);  // MATHEMATICAL FRAKTUR SMALL W 
    t.put("wopf", 0x1D568);  // MATHEMATICAL DOUBLE-STRUCK SMALL W 
    t.put("wp", 0x02118);  // SCRIPT CAPITAL P 
    t.put("wr", 0x02240);  // WREATH PRODUCT 
    t.put("wreath", 0x02240);  // WREATH PRODUCT 
    t.put("wscr", 0x1D4CC);  // MATHEMATICAL SCRIPT SMALL W 
    t.put("xcap", 0x022C2);  // N-ARY INTERSECTION 
    t.put("xcirc", 0x025EF);  // LARGE CIRCLE 
    t.put("xcup", 0x022C3);  // N-ARY UNION 
    t.put("xdtri", 0x025BD);  // WHITE DOWN-POINTING TRIANGLE 
    t.put("xfr", 0x1D535);  // MATHEMATICAL FRAKTUR SMALL X 
    t.put("xgr", 0x003BE);  // GREEK SMALL LETTER XI 
    t.put("xhArr", 0x027FA);  // LONG LEFT RIGHT DOUBLE ARROW 
    t.put("xharr", 0x027F7);  // LONG LEFT RIGHT ARROW 
    t.put("xi", 0x003BE);  // GREEK SMALL LETTER XI 
    t.put("xlArr", 0x027F8);  // LONG LEFTWARDS DOUBLE ARROW 
    t.put("xlarr", 0x027F5);  // LONG LEFTWARDS ARROW 
    t.put("xmap", 0x027FC);  // LONG RIGHTWARDS ARROW FROM BAR 
    t.put("xnis", 0x022FB);  // CONTAINS WITH VERTICAL BAR AT END OF HORIZONTAL STROKE 
    t.put("xodot", 0x02A00);  // N-ARY CIRCLED DOT OPERATOR 
    t.put("xopf", 0x1D569);  // MATHEMATICAL DOUBLE-STRUCK SMALL X 
    t.put("xoplus", 0x02A01);  // N-ARY CIRCLED PLUS OPERATOR 
    t.put("xotime", 0x02A02);  // N-ARY CIRCLED TIMES OPERATOR 
    t.put("xrArr", 0x027F9);  // LONG RIGHTWARDS DOUBLE ARROW 
    t.put("xrarr", 0x027F6);  // LONG RIGHTWARDS ARROW 
    t.put("xscr", 0x1D4CD);  // MATHEMATICAL SCRIPT SMALL X 
    t.put("xsqcup", 0x02A06);  // N-ARY SQUARE UNION OPERATOR 
    t.put("xuplus", 0x02A04);  // N-ARY UNION OPERATOR WITH PLUS 
    t.put("xutri", 0x025B3);  // WHITE UP-POINTING TRIANGLE 
    t.put("xvee", 0x022C1);  // N-ARY LOGICAL OR 
    t.put("xwedge", 0x022C0);  // N-ARY LOGICAL AND 
    t.put("yacute", 0x000FD);  // LATIN SMALL LETTER Y WITH ACUTE 
    t.put("yacy", 0x0044F);  // CYRILLIC SMALL LETTER YA 
    t.put("ycirc", 0x00177);  // LATIN SMALL LETTER Y WITH CIRCUMFLEX 
    t.put("ycy", 0x0044B);  // CYRILLIC SMALL LETTER YERU 
    t.put("yen", 0x000A5);  // YEN SIGN 
    t.put("yfr", 0x1D536);  // MATHEMATICAL FRAKTUR SMALL Y 
    t.put("yicy", 0x00457);  // CYRILLIC SMALL LETTER YI 
    t.put("yopf", 0x1D56A);  // MATHEMATICAL DOUBLE-STRUCK SMALL Y 
    t.put("yscr", 0x1D4CE);  // MATHEMATICAL SCRIPT SMALL Y 
    t.put("yucy", 0x0044E);  // CYRILLIC SMALL LETTER YU 
    t.put("yuml", 0x000FF);  // LATIN SMALL LETTER Y WITH DIAERESIS 
    t.put("zacute", 0x0017A);  // LATIN SMALL LETTER Z WITH ACUTE 
    t.put("zcaron", 0x0017E);  // LATIN SMALL LETTER Z WITH CARON 
    t.put("zcy", 0x00437);  // CYRILLIC SMALL LETTER ZE 
    t.put("zdot", 0x0017C);  // LATIN SMALL LETTER Z WITH DOT ABOVE 
    t.put("zeetrf", 0x02128);  // BLACK-LETTER CAPITAL Z 
    t.put("zeta", 0x003B6);  // GREEK SMALL LETTER ZETA 
    t.put("zfr", 0x1D537);  // MATHEMATICAL FRAKTUR SMALL Z 
    t.put("zgr", 0x003B6);  // GREEK SMALL LETTER ZETA 
    t.put("zhcy", 0x00436);  // CYRILLIC SMALL LETTER ZHE 
    t.put("zigrarr", 0x021DD);  // RIGHTWARDS SQUIGGLE ARROW 
    t.put("zopf", 0x1D56B);  // MATHEMATICAL DOUBLE-STRUCK SMALL Z 
    t.put("zscr", 0x1D4CF);  // MATHEMATICAL SCRIPT SMALL Z 
    t.put("zwj", 0x0200D);  // ZERO WIDTH JOINER 
    t.put("zwnj", 0x0200C);  // ZERO WIDTH NON-JOINER 
}}
