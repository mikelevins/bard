;;;; ***********************************************************************
;;;; FILE IDENTIFICATION
;;;;
;;;; Name:          vm.scm
;;;; Project:       Bard
;;;; Purpose:       bard virtual machine
;;;; Author:        mikel evins
;;;; Copyright:     2012 by mikel evins
;;;;
;;;; ***********************************************************************

(define-type fn env code)
(define-type return-address pc fn env)
(define-type prim op)

(define (vm f)
  (call/cc
   (lambda (return)
     (let* (;; regs
            (globals (make-table est: eq?))
            (code (fn-code f))
            (pc 0)
            (env (or (fn-env f)
                     (null-env)))
            (stack nil)
            (nargs 0)
            (instr #f)
            
            ;; ops
            (%pushval! (lambda (v)(set! stack (cons v stack))))
            (%popval! (lambda ()(let ((v (car stack))) 
                                  (set! stack (cdr stack))
                                  v)))
            (%popnvals! (lambda (n)(let ((v (car stack))) 
                                     (set! stack (cdr stack))
                                     v)))
            (%arg (lambda (n)(list-ref instr n)))
            (%args (lambda ()(cdr instr)))
            (%lref (lambda (i j)(vector-ref (list-ref env i) j)))
            (%lset! (lambda (i j v)(vector-set! (list-ref env i) j v)))
            (%gref (lambda (s)(table-ref globals s)))
            (%gset! (lambda (s v)(table-set! globals s v)))
            (%setpc! (lambda (d)(set! pc d)))
            (%save! (lambda ()
                      (set! stack (cons (%make-return pc: (%arg 1)
                                                      fn: f
                                                      env: env)
                                        stack))))
            (%return! (lambda () ; return value is the top of the stack; return address is second
                        (let ((val (%popval!))
                              (ret (%popval!)))
                          (set! f (%return-fn ret))
                          (set! pc (%return-pc ret))
                          (set! env (%return-env ret))
                          (%pushval! val))))
            (%call (lambda (argcount)
                     (set! env (cdr env))
                     (set! f (%popval!))
                     (set! code (%fn-code f))
                     (set! env (%fn-env f))
                     (set! pc 0)
                     (set! nargs (%arg 1))))
            (%take (lambda (n) (let ((vals (take n stack))) 
                                 (set! stack (drop n stack))
                                 vals)))
            (%check-nargs (lambda (n)(or (= nargs n)(error "Wrong number of arguments"))))
            (%check-nargs. (lambda (n)(or (>= nargs n)(error "Wrong number of arguments"))))
            (%makefn (lambda (#!key env code)(make-fn env code)))
            (%make-return (lambda (#!key pc fn env)(make-return-address pc fn env)))
            (%primop (lambda (p)(prim-op p)))
            (%apply-prim (lambda (p args)(apply (%primop p) args)))
            (%read (lambda (port)(read port)))
            (%write (lambda (obj port)(write obj port)))
            (%display (lambda (obj port)(display obj port))))

       (let loop ()
         (set! instr (list-ref code pc))
         (set! pc (+ 1 pc))
       
         (case (opcode instr)
           ((LVAR)(%pushval! (%lref (%arg 1)(%arg 2))))
           ((LSET)(%lset! (%arg 1)(%arg 2)(%arg 3)))
           ((GVAR)(%pushval! (%gref (%arg 1))))
           ((GSET)(%gset! (%arg 1)(%arg 2)))
           ((POP)(%popval!))
           ((CONST)(%pushval! (%arg 1)))
           ((JUMP)(%setpc! (%arg 1)))
           ((TJUMP)(if (%popval!)(%setpc! (%arg 1))))
           ((FJUMP)(if (not (%popval!))(%setpc! (%arg 1))))
           ((SAVE)(%save!))
           ((RETURN)(%return!))
           ((CALL)(%call (%arg 1)))
           ((ARGS)(begin
                    (%check-nargs (%arg 1))
                    (%pushval! (%take (%arg 1)))))
           ((ARGS.)(begin
                     (%check-nargs. (%arg 1))
                     (%pushval! (%take (%arg 1)))))
           ((FN)(%pushval! (%makefn (%popval!))))
           ((PRIM)(let* ((p (%arg 1))
                         (pargs (%take nargs)))
                    (%pushval! (%apply-prim p pargs))))
           ((SET-CC)(set! stack (car stack)))
           ((CC)(set! stack
                      (cons (%makefn env: (list (vector stack))
                                     code: '((ARGS 1)(LVAR 1 0)(SET-CC)(LVAR 0 0)(RETURN)))
                            stack)))
           ((READ)(%pushval! (%read (%popval!))))
           ((NEWLINE)(newline))
           ((CAR)(%pushval! (car (%popval!))))
           ((CDR)(%pushval! (cdr (%popval!))))
           ((CADR)(%pushval! (cadr (%popval!))))
           ((NOT)(%pushval! (not (%popval!))))
           ((LIST1) (%pushval! (list (%popval!))))
           ((COMPILE)(%pushval! (%compile (%popval!) env)))
           ((DISPLAY)(%display (%popval!)(%popval!)))
           ((WRITE)(%write (%popval!)(%popval!)))
           ((RANDOM)(random-integer (%popval!)))
           ((ADD)(%pushval! (+ (%popval!)(%popval!))))
           ((SUB)(%pushval! (- (%popval!)(%popval!))))
           ((MUL)(%pushval! (* (%popval!)(%popval!))))
           ((DIV)(%pushval! (/ (%popval!)(%popval!))))
           ((LT)(%pushval! (< (%popval!)(%popval!))))
           ((GT)(%pushval! (> (%popval!)(%popval!))))
           ((LTE)(%pushval! (<= (%popval!)(%popval!))))
           ((GTE)(%pushval! (>= (%popval!)(%popval!))))
           ((NEQ)(%pushval! (not (= (%popval!)(%popval!)))))
           ((EQ)(%pushval! (eq? (%popval!)(%popval!))))
           ((EQL)(%pushval! (eqv? (%popval!)(%popval!))))
           ((EQUAL)(%pushval! (equal? (%popval!)(%popval!))))
           ((CONS)(%pushval! (cons (%popval!)(%popval!))))
           ((LIST2)(%pushval! (list (%popval!) (%popval!))))
           ((LIST3)(%pushval! (list (%popval!) (%popval!) (%popval!))))
           ((TRUE)(%pushval! #t))
           ((FALSE) (%pushval! #f))
           ((NOTHING) (%pushval! '()))
           ((NEG1) (%pushval! -1))
           ((ZERO) (%pushval! 0))
           ((ONE) (%pushval! 1))
           ((TWO) (%pushval! 2))
           ((HALT) (return (values stack nargs instr pc code env)))
           (else (error "Unknown opcode"))))))))
